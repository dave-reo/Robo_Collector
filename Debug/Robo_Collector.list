
Robo_Collector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         000064d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08006670  08006670  00016670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006840  08006840  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006840  08006840  00016840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006848  08006848  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006848  08006848  00016848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800684c  0800684c  0001684c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006850  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000070  080068c0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  080068c0  00020234  2**0
=======
  1 .text         00003fcc  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004164  08004164  00014164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800417c  0800417c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800417c  0800417c  0001417c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004184  08004184  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004184  08004184  00014184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004188  08004188  00014188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800418c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  2000000c  08004198  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08004198  00020170  2**0
>>>>>>> parent of 2b78fa3 (line sensor)
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
 12 .debug_info   00011094  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002075  00000000  00000000  00031134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  000331b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea8  00000000  00000000  00034108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017021  00000000  00000000  00034fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000123c2  00000000  00000000  0004bfd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000913e6  00000000  00000000  0005e393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef779  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049a4  00000000  00000000  000ef7cc  2**2
=======
 12 .debug_info   0000c1d2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000189c  00000000  00000000  0002c20e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  0002dab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  0002e6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001564c  00000000  00000000  0002f2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d7c4  00000000  00000000  000448ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089fd4  00000000  00000000  000520b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc084  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035ac  00000000  00000000  000dc0d4  2**2
>>>>>>> parent of 2b78fa3 (line sensor)
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

<<<<<<< HEAD
080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006658 	.word	0x08006658

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08006658 	.word	0x08006658
=======
08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800414c 	.word	0x0800414c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	0800414c 	.word	0x0800414c
>>>>>>> parent of 2b78fa3 (line sensor)

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

<<<<<<< HEAD
08000d70 <HAL_UART_RxCpltCallback>:
	{
		// maybe do a further check for channel
		trig = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_2)/100; // has to be on channel 2
=======
08000cb8 <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay (uint16_t time)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <delay+0x30>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
 8000cca:	bf00      	nop
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <delay+0x30>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cd2:	88fb      	ldrh	r3, [r7, #6]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d3f9      	bcc.n	8000ccc <delay+0x14>
}
 8000cd8:	bf00      	nop
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	2000007c 	.word	0x2000007c
 8000cec:	00000000 	.word	0x00000000

08000cf0 <HAL_TIM_IC_CaptureCallback>:
#define TRIG_PIN GPIO_PIN_9 // make sure this is A9
#define TRIG_PORT GPIOA

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
// figure out how to put the dead man's switch in this same callback
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]

	if (htim == &htim5) //timer 5 is for dead man's switch
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a57      	ldr	r2, [pc, #348]	; (8000e58 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d113      	bne.n	8000d28 <HAL_TIM_IC_CaptureCallback+0x38>
	{
		// maybe do a further check for channel
		trig = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_2)/100; // has to be on channel 2
 8000d00:	2104      	movs	r1, #4
 8000d02:	4855      	ldr	r0, [pc, #340]	; (8000e58 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000d04:	f002 fc8c 	bl	8003620 <HAL_TIM_ReadCapturedValue>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	4a54      	ldr	r2, [pc, #336]	; (8000e5c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d10:	095b      	lsrs	r3, r3, #5
 8000d12:	4a53      	ldr	r2, [pc, #332]	; (8000e60 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000d14:	6013      	str	r3, [r2, #0]
>>>>>>> parent of 2b78fa3 (line sensor)
		if (trig > 1700)
		{
			Is_Dead = 1;
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
			disable(&motor1);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	4941      	ldr	r1, [pc, #260]	; (8000e80 <HAL_UART_RxCpltCallback+0x110>)
 8000d7c:	4841      	ldr	r0, [pc, #260]	; (8000e84 <HAL_UART_RxCpltCallback+0x114>)
 8000d7e:	f003 fea0 	bl	8004ac2 <HAL_UART_Receive_IT>
			disable(&motor2);
 8000d82:	2332      	movs	r3, #50	; 0x32
 8000d84:	2201      	movs	r2, #1
 8000d86:	493e      	ldr	r1, [pc, #248]	; (8000e80 <HAL_UART_RxCpltCallback+0x110>)
 8000d88:	483e      	ldr	r0, [pc, #248]	; (8000e84 <HAL_UART_RxCpltCallback+0x114>)
 8000d8a:	f003 fe08 	bl	800499e <HAL_UART_Transmit>
			// some other code to kill the robot
			// maybe turn off motor drivers
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a3c      	ldr	r2, [pc, #240]	; (8000e84 <HAL_UART_RxCpltCallback+0x114>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d16f      	bne.n	8000e76 <HAL_UART_RxCpltCallback+0x106>
		}
		if (trig < 1000)
 8000d96:	4b3c      	ldr	r3, [pc, #240]	; (8000e88 <HAL_UART_RxCpltCallback+0x118>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d110      	bne.n	8000dc0 <HAL_UART_RxCpltCallback+0x50>
 8000d9e:	4b38      	ldr	r3, [pc, #224]	; (8000e80 <HAL_UART_RxCpltCallback+0x110>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b4d      	cmp	r3, #77	; 0x4d
 8000da4:	d10c      	bne.n	8000dc0 <HAL_UART_RxCpltCallback+0x50>

			Start = 1;
 8000da6:	4b38      	ldr	r3, [pc, #224]	; (8000e88 <HAL_UART_RxCpltCallback+0x118>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	461a      	mov	r2, r3
 8000dac:	4b34      	ldr	r3, [pc, #208]	; (8000e80 <HAL_UART_RxCpltCallback+0x110>)
 8000dae:	7819      	ldrb	r1, [r3, #0]
 8000db0:	4b36      	ldr	r3, [pc, #216]	; (8000e8c <HAL_UART_RxCpltCallback+0x11c>)
 8000db2:	5499      	strb	r1, [r3, r2]
			enable(&motor1);
 8000db4:	4b34      	ldr	r3, [pc, #208]	; (8000e88 <HAL_UART_RxCpltCallback+0x118>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	3301      	adds	r3, #1
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	4b32      	ldr	r3, [pc, #200]	; (8000e88 <HAL_UART_RxCpltCallback+0x118>)
 8000dbe:	701a      	strb	r2, [r3, #0]
			enable(&motor2);
		{
			// something to start the code here
 8000dc0:	4b31      	ldr	r3, [pc, #196]	; (8000e88 <HAL_UART_RxCpltCallback+0x118>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d11b      	bne.n	8000e00 <HAL_UART_RxCpltCallback+0x90>
 8000dc8:	4b2d      	ldr	r3, [pc, #180]	; (8000e80 <HAL_UART_RxCpltCallback+0x110>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b31      	cmp	r3, #49	; 0x31
 8000dce:	d003      	beq.n	8000dd8 <HAL_UART_RxCpltCallback+0x68>
 8000dd0:	4b2b      	ldr	r3, [pc, #172]	; (8000e80 <HAL_UART_RxCpltCallback+0x110>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b32      	cmp	r3, #50	; 0x32
 8000dd6:	d113      	bne.n	8000e00 <HAL_UART_RxCpltCallback+0x90>
 8000dd8:	4b2c      	ldr	r3, [pc, #176]	; (8000e8c <HAL_UART_RxCpltCallback+0x11c>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b4d      	cmp	r3, #77	; 0x4d
 8000dde:	d10f      	bne.n	8000e00 <HAL_UART_RxCpltCallback+0x90>
		    // motor enable?
		}
 8000de0:	4b29      	ldr	r3, [pc, #164]	; (8000e88 <HAL_UART_RxCpltCallback+0x118>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <HAL_UART_RxCpltCallback+0x110>)
 8000de8:	7819      	ldrb	r1, [r3, #0]
 8000dea:	4b28      	ldr	r3, [pc, #160]	; (8000e8c <HAL_UART_RxCpltCallback+0x11c>)
 8000dec:	5499      	strb	r1, [r3, r2]
	}

 8000dee:	4b24      	ldr	r3, [pc, #144]	; (8000e80 <HAL_UART_RxCpltCallback+0x110>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	701a      	strb	r2, [r3, #0]
	if (htim == &htim1) // timer 1 is for the ultrasonic sensor
	{
 8000df4:	4b24      	ldr	r3, [pc, #144]	; (8000e88 <HAL_UART_RxCpltCallback+0x118>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <HAL_UART_RxCpltCallback+0x118>)
 8000dfe:	701a      	strb	r2, [r3, #0]
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // check if interpret source is channel 1
		{
			if (Is_First_Captured ==0) //if the first value is not captured
			{
 8000e00:	4b21      	ldr	r3, [pc, #132]	; (8000e88 <HAL_UART_RxCpltCallback+0x118>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d003      	beq.n	8000e10 <HAL_UART_RxCpltCallback+0xa0>
 8000e08:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <HAL_UART_RxCpltCallback+0x118>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b03      	cmp	r3, #3
 8000e0e:	d125      	bne.n	8000e5c <HAL_UART_RxCpltCallback+0xec>
 8000e10:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <HAL_UART_RxCpltCallback+0x110>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	3301      	adds	r3, #1
 8000e16:	4a1e      	ldr	r2, [pc, #120]	; (8000e90 <HAL_UART_RxCpltCallback+0x120>)
 8000e18:	4413      	add	r3, r2
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d01b      	beq.n	8000e5c <HAL_UART_RxCpltCallback+0xec>
				IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
<<<<<<< HEAD
 8000e24:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <HAL_UART_RxCpltCallback+0x11c>)
 8000e26:	785b      	ldrb	r3, [r3, #1]
 8000e28:	2b31      	cmp	r3, #49	; 0x31
 8000e2a:	d003      	beq.n	8000e34 <HAL_UART_RxCpltCallback+0xc4>
 8000e2c:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <HAL_UART_RxCpltCallback+0x11c>)
 8000e2e:	785b      	ldrb	r3, [r3, #1]
 8000e30:	2b32      	cmp	r3, #50	; 0x32
 8000e32:	d113      	bne.n	8000e5c <HAL_UART_RxCpltCallback+0xec>
=======
 8000d44:	2100      	movs	r1, #0
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f002 fc6a 	bl	8003620 <HAL_TIM_ReadCapturedValue>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	4a48      	ldr	r2, [pc, #288]	; (8000e70 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000d50:	6013      	str	r3, [r2, #0]
>>>>>>> parent of 2b78fa3 (line sensor)
				Is_First_Captured = 1; // set the first captured as true
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_UART_RxCpltCallback+0x110>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d00f      	beq.n	8000e5c <HAL_UART_RxCpltCallback+0xec>
				// now change polarity to falling edge
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_UART_RxCpltCallback+0x118>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <HAL_UART_RxCpltCallback+0x110>)
 8000e44:	7819      	ldrb	r1, [r3, #0]
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <HAL_UART_RxCpltCallback+0x11c>)
 8000e48:	5499      	strb	r1, [r3, r2]

			}
 8000e4a:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <HAL_UART_RxCpltCallback+0x110>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
			else if (Is_First_Captured==1)
 8000e50:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <HAL_UART_RxCpltCallback+0x118>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	3301      	adds	r3, #1
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <HAL_UART_RxCpltCallback+0x118>)
 8000e5a:	701a      	strb	r2, [r3, #0]
			{
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
				__HAL_TIM_SET_COUNTER(htim, 0);

 8000e5c:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <HAL_UART_RxCpltCallback+0x118>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b04      	cmp	r3, #4
 8000e62:	d108      	bne.n	8000e76 <HAL_UART_RxCpltCallback+0x106>
				if (IC_Val2 > IC_Val1)
				{
 8000e64:	2332      	movs	r3, #50	; 0x32
 8000e66:	2210      	movs	r2, #16
 8000e68:	490a      	ldr	r1, [pc, #40]	; (8000e94 <HAL_UART_RxCpltCallback+0x124>)
 8000e6a:	4806      	ldr	r0, [pc, #24]	; (8000e84 <HAL_UART_RxCpltCallback+0x114>)
 8000e6c:	f003 fd97 	bl	800499e <HAL_UART_Transmit>
					Difference = IC_Val2 - IC_Val1;
				}
 8000e70:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <HAL_UART_RxCpltCallback+0x118>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
				else if (IC_Val1 > IC_Val2)
				{
					Difference = (0xffff - IC_Val1) + IC_Val2;
				}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000211 	.word	0x20000211
 8000e84:	200001b8 	.word	0x200001b8
 8000e88:	20000219 	.word	0x20000219
 8000e8c:	20000214 	.word	0x20000214
 8000e90:	080066c0 	.word	0x080066c0
 8000e94:	08006670 	.word	0x08006670

08000e98 <HAL_TIM_IC_CaptureCallback>:

				Distance = Difference * .034/2; //FORMULA IN DATASHEET
				if (Distance <= 5) // distance is less than 5 cm, so stop
				{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
					disable(&motor1);
					disable(&motor2);
				}
				Is_First_Captured = 0; // set it back to false
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a57      	ldr	r2, [pc, #348]	; (8001000 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d113      	bne.n	8000ed0 <HAL_TIM_IC_CaptureCallback+0x38>

				//set polarity to rising edge
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000ea8:	2104      	movs	r1, #4
 8000eaa:	4855      	ldr	r0, [pc, #340]	; (8001000 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000eac:	f002 ffc0 	bl	8003e30 <HAL_TIM_ReadCapturedValue>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	4a54      	ldr	r2, [pc, #336]	; (8001004 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb8:	095b      	lsrs	r3, r3, #5
 8000eba:	4a53      	ldr	r2, [pc, #332]	; (8001008 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000ebc:	6013      	str	r3, [r2, #0]
				__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000ebe:	4b52      	ldr	r3, [pc, #328]	; (8001008 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d902      	bls.n	8000ed0 <HAL_TIM_IC_CaptureCallback+0x38>
			}
		}
<<<<<<< HEAD
 8000eca:	4b50      	ldr	r3, [pc, #320]	; (800100c <HAL_TIM_IC_CaptureCallback+0x174>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	701a      	strb	r2, [r3, #0]
=======
	}

}
 8000d78:	e063      	b.n	8000e42 <HAL_TIM_IC_CaptureCallback+0x152>
			else if (Is_First_Captured==1)
 8000d7a:	4b3c      	ldr	r3, [pc, #240]	; (8000e6c <HAL_TIM_IC_CaptureCallback+0x17c>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d15f      	bne.n	8000e42 <HAL_TIM_IC_CaptureCallback+0x152>
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
 8000d82:	2100      	movs	r1, #0
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f002 fc4b 	bl	8003620 <HAL_TIM_ReadCapturedValue>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4a39      	ldr	r2, [pc, #228]	; (8000e74 <HAL_TIM_IC_CaptureCallback+0x184>)
 8000d8e:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2200      	movs	r2, #0
 8000d96:	625a      	str	r2, [r3, #36]	; 0x24
				if (IC_Val2 > IC_Val1)
 8000d98:	4b36      	ldr	r3, [pc, #216]	; (8000e74 <HAL_TIM_IC_CaptureCallback+0x184>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4b34      	ldr	r3, [pc, #208]	; (8000e70 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d907      	bls.n	8000db4 <HAL_TIM_IC_CaptureCallback+0xc4>
					Difference = IC_Val2 - IC_Val1;
 8000da4:	4b33      	ldr	r3, [pc, #204]	; (8000e74 <HAL_TIM_IC_CaptureCallback+0x184>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b31      	ldr	r3, [pc, #196]	; (8000e70 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	4a32      	ldr	r2, [pc, #200]	; (8000e78 <HAL_TIM_IC_CaptureCallback+0x188>)
 8000db0:	6013      	str	r3, [r2, #0]
 8000db2:	e00f      	b.n	8000dd4 <HAL_TIM_IC_CaptureCallback+0xe4>
				else if (IC_Val1 > IC_Val2)
 8000db4:	4b2e      	ldr	r3, [pc, #184]	; (8000e70 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4b2e      	ldr	r3, [pc, #184]	; (8000e74 <HAL_TIM_IC_CaptureCallback+0x184>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d909      	bls.n	8000dd4 <HAL_TIM_IC_CaptureCallback+0xe4>
					Difference = (0xffff - IC_Val1) + IC_Val2;
 8000dc0:	4b2c      	ldr	r3, [pc, #176]	; (8000e74 <HAL_TIM_IC_CaptureCallback+0x184>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b2a      	ldr	r3, [pc, #168]	; (8000e70 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000dce:	33ff      	adds	r3, #255	; 0xff
 8000dd0:	4a29      	ldr	r2, [pc, #164]	; (8000e78 <HAL_TIM_IC_CaptureCallback+0x188>)
 8000dd2:	6013      	str	r3, [r2, #0]
				Distance = Difference * .034/2; //FORMULA IN DATASHEET
 8000dd4:	4b28      	ldr	r3, [pc, #160]	; (8000e78 <HAL_TIM_IC_CaptureCallback+0x188>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fb3f 	bl	800045c <__aeabi_ui2d>
 8000dde:	a31c      	add	r3, pc, #112	; (adr r3, 8000e50 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de4:	f7ff fbb4 	bl	8000550 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4610      	mov	r0, r2
 8000dee:	4619      	mov	r1, r3
 8000df0:	f04f 0200 	mov.w	r2, #0
 8000df4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000df8:	f7ff fcd4 	bl	80007a4 <__aeabi_ddiv>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	460b      	mov	r3, r1
 8000e00:	4610      	mov	r0, r2
 8000e02:	4619      	mov	r1, r3
 8000e04:	f7ff fdb6 	bl	8000974 <__aeabi_d2uiz>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <HAL_TIM_IC_CaptureCallback+0x18c>)
 8000e0e:	701a      	strb	r2, [r3, #0]
				Is_First_Captured = 0; // set it back to false
 8000e10:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <HAL_TIM_IC_CaptureCallback+0x17c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	6a1a      	ldr	r2, [r3, #32]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f022 020a 	bic.w	r2, r2, #10
 8000e24:	621a      	str	r2, [r3, #32]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	6a12      	ldr	r2, [r2, #32]
 8000e30:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000e32:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <HAL_TIM_IC_CaptureCallback+0x178>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	68da      	ldr	r2, [r3, #12]
 8000e38:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <HAL_TIM_IC_CaptureCallback+0x178>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f022 0202 	bic.w	r2, r2, #2
 8000e40:	60da      	str	r2, [r3, #12]
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	f3af 8000 	nop.w
 8000e50:	b020c49c 	.word	0xb020c49c
 8000e54:	3fa16872 	.word	0x3fa16872
 8000e58:	2000010c 	.word	0x2000010c
 8000e5c:	51eb851f 	.word	0x51eb851f
 8000e60:	20000164 	.word	0x20000164
 8000e64:	20000161 	.word	0x20000161
 8000e68:	2000007c 	.word	0x2000007c
 8000e6c:	20000160 	.word	0x20000160
 8000e70:	20000154 	.word	0x20000154
 8000e74:	20000158 	.word	0x20000158
 8000e78:	2000015c 	.word	0x2000015c
 8000e7c:	20000168 	.word	0x20000168

08000e80 <HCSR04_Read>:

>>>>>>> parent of 2b78fa3 (line sensor)
void HCSR04_Read (void)
{
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET); // pull TRIG pin HIGH
<<<<<<< HEAD
=======
 8000e84:	2201      	movs	r2, #1
 8000e86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e8a:	480b      	ldr	r0, [pc, #44]	; (8000eb8 <HCSR04_Read+0x38>)
 8000e8c:	f000 ffd6 	bl	8001e3c <HAL_GPIO_WritePin>
>>>>>>> parent of 2b78fa3 (line sensor)
	delay(10); // wait for 10 us (based on above delay function)
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); //pull the TRIG pin low
<<<<<<< HEAD
=======
 8000e96:	2200      	movs	r2, #0
 8000e98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e9c:	4806      	ldr	r0, [pc, #24]	; (8000eb8 <HCSR04_Read+0x38>)
 8000e9e:	f000 ffcd 	bl	8001e3c <HAL_GPIO_WritePin>
>>>>>>> parent of 2b78fa3 (line sensor)

 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a4f      	ldr	r2, [pc, #316]	; (8001010 <HAL_TIM_IC_CaptureCallback+0x178>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	f040 8088 	bne.w	8000fea <HAL_TIM_IC_CaptureCallback+0x152>
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
}
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	7f1b      	ldrb	r3, [r3, #28]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	f040 8083 	bne.w	8000fea <HAL_TIM_IC_CaptureCallback+0x152>
/* USER CODE END 0 */

 8000ee4:	4b4b      	ldr	r3, [pc, #300]	; (8001014 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d11a      	bne.n	8000f22 <HAL_TIM_IC_CaptureCallback+0x8a>
/**
  * @brief  The application entry point.
 8000eec:	2100      	movs	r1, #0
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f002 ff9e 	bl	8003e30 <HAL_TIM_ReadCapturedValue>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	4a48      	ldr	r2, [pc, #288]	; (8001018 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000ef8:	6013      	str	r3, [r2, #0]
  * @retval int
 8000efa:	4b46      	ldr	r3, [pc, #280]	; (8001014 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	701a      	strb	r2, [r3, #0]
  */
int main(void)
<<<<<<< HEAD
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	6a1a      	ldr	r2, [r3, #32]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f022 020a 	bic.w	r2, r2, #10
 8000f0e:	621a      	str	r2, [r3, #32]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	6a1a      	ldr	r2, [r3, #32]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f042 0202 	orr.w	r2, r2, #2
 8000f1e:	621a      	str	r2, [r3, #32]
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM2_Init();
  MX_TIM1_Init();
  MX_I2C1_Init();
  MX_TIM5_Init();
 8000f20:	e063      	b.n	8000fea <HAL_TIM_IC_CaptureCallback+0x152>

 8000f22:	4b3c      	ldr	r3, [pc, #240]	; (8001014 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d15f      	bne.n	8000fea <HAL_TIM_IC_CaptureCallback+0x152>

 8000f2a:	2100      	movs	r1, #0
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f002 ff7f 	bl	8003e30 <HAL_TIM_ReadCapturedValue>
 8000f32:	4603      	mov	r3, r0
 8000f34:	4a39      	ldr	r2, [pc, #228]	; (800101c <HAL_TIM_IC_CaptureCallback+0x184>)
 8000f36:	6013      	str	r3, [r2, #0]
  /* MCU Configuration--------------------------------------------------------*/
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	625a      	str	r2, [r3, #36]	; 0x24
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 8000f40:	4b36      	ldr	r3, [pc, #216]	; (800101c <HAL_TIM_IC_CaptureCallback+0x184>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b34      	ldr	r3, [pc, #208]	; (8001018 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d907      	bls.n	8000f5c <HAL_TIM_IC_CaptureCallback+0xc4>

 8000f4c:	4b33      	ldr	r3, [pc, #204]	; (800101c <HAL_TIM_IC_CaptureCallback+0x184>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b31      	ldr	r3, [pc, #196]	; (8001018 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	4a32      	ldr	r2, [pc, #200]	; (8001020 <HAL_TIM_IC_CaptureCallback+0x188>)
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	e00f      	b.n	8000f7c <HAL_TIM_IC_CaptureCallback+0xe4>

 8000f5c:	4b2e      	ldr	r3, [pc, #184]	; (8001018 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b2e      	ldr	r3, [pc, #184]	; (800101c <HAL_TIM_IC_CaptureCallback+0x184>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d909      	bls.n	8000f7c <HAL_TIM_IC_CaptureCallback+0xe4>

 8000f68:	4b2c      	ldr	r3, [pc, #176]	; (800101c <HAL_TIM_IC_CaptureCallback+0x184>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b2a      	ldr	r3, [pc, #168]	; (8001018 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000f76:	33ff      	adds	r3, #255	; 0xff
 8000f78:	4a29      	ldr	r2, [pc, #164]	; (8001020 <HAL_TIM_IC_CaptureCallback+0x188>)
 8000f7a:	6013      	str	r3, [r2, #0]

 8000f7c:	4b28      	ldr	r3, [pc, #160]	; (8001020 <HAL_TIM_IC_CaptureCallback+0x188>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fac7 	bl	8000514 <__aeabi_ui2d>
 8000f86:	a31c      	add	r3, pc, #112	; (adr r3, 8000ff8 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8c:	f7ff fb3c 	bl	8000608 <__aeabi_dmul>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	4610      	mov	r0, r2
 8000f96:	4619      	mov	r1, r3
 8000f98:	f04f 0200 	mov.w	r2, #0
 8000f9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fa0:	f7ff fc5c 	bl	800085c <__aeabi_ddiv>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4610      	mov	r0, r2
 8000faa:	4619      	mov	r1, r3
 8000fac:	f7ff fd3e 	bl	8000a2c <__aeabi_d2uiz>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8000fb6:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN SysInit */
 8000fb8:	4b16      	ldr	r3, [pc, #88]	; (8001014 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]

 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	6a1a      	ldr	r2, [r3, #32]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f022 020a 	bic.w	r2, r2, #10
 8000fcc:	621a      	str	r2, [r3, #32]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	6a12      	ldr	r2, [r2, #32]
 8000fd8:	621a      	str	r2, [r3, #32]
  /* Initialize all configured peripherals */
 8000fda:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <HAL_TIM_IC_CaptureCallback+0x178>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	68da      	ldr	r2, [r3, #12]
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <HAL_TIM_IC_CaptureCallback+0x178>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f022 0202 	bic.w	r2, r2, #2
 8000fe8:	60da      	str	r2, [r3, #12]
  MX_TIM5_Init();
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	f3af 8000 	nop.w
 8000ff8:	b020c49c 	.word	0xb020c49c
 8000ffc:	3fa16872 	.word	0x3fa16872
 8001000:	20000170 	.word	0x20000170
 8001004:	51eb851f 	.word	0x51eb851f
 8001008:	2000020c 	.word	0x2000020c
 800100c:	20000209 	.word	0x20000209
 8001010:	200000e0 	.word	0x200000e0
 8001014:	20000208 	.word	0x20000208
 8001018:	200001fc 	.word	0x200001fc
 800101c:	20000200 	.word	0x20000200
 8001020:	20000204 	.word	0x20000204
 8001024:	20000210 	.word	0x20000210

08001028 <main>:
//	enable(&motor2);


  /* USER CODE END 2 */

  /* Infinite loop */
 8001028:	b580      	push	{r7, lr}
 800102a:	b08c      	sub	sp, #48	; 0x30
 800102c:	af00      	add	r7, sp, #0
=======
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec4:	f000 fc8e 	bl	80017e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec8:	f000 f820 	bl	8000f0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ecc:	f000 fa3e 	bl	800134c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ed0:	f000 f908 	bl	80010e4 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000ed4:	f000 f8b0 	bl	8001038 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000ed8:	f000 f880 	bl	8000fdc <MX_I2C1_Init>
  MX_TIM5_Init();
 8000edc:	f000 f998 	bl	8001210 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4808      	ldr	r0, [pc, #32]	; (8000f04 <main+0x44>)
 8000ee4:	f001 ff12 	bl	8002d0c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1); //start tim 5!!!!!
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4807      	ldr	r0, [pc, #28]	; (8000f08 <main+0x48>)
 8000eec:	f001 ff0e 	bl	8002d0c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 8000ef0:	2104      	movs	r1, #4
 8000ef2:	4805      	ldr	r0, [pc, #20]	; (8000f08 <main+0x48>)
 8000ef4:	f001 fe3c 	bl	8002b70 <HAL_TIM_IC_Start>
  while (1)
>>>>>>> parent of 2b78fa3 (line sensor)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HCSR04_Read();
	  HAL_Delay(200); //200 ms delay
<<<<<<< HEAD
 800102e:	f000 feaf 	bl	8001d90 <HAL_Init>
	  L2 = HAL_GPIO_ReadPin(LS_PORT, LS_2);

	  if (L1 == 1 && L2 == 0){
		  // code to turn one direction
	  }
	  if (L1 == 0 && L2 == 1){
 8001032:	f000 f899 	bl	8001168 <SystemClock_Config>
	  }
	  if (L1 == 1 && L2 == 1)
	  {
		  // code to go straight
	  }
	  if (L1 == 0 && L2 == 0){
 8001036:	f000 fae1 	bl	80015fc <MX_GPIO_Init>
		  // maybe do a delay in case both sensors go off at same time
 800103a:	f000 f981 	bl	8001340 <MX_TIM2_Init>
	  }
 800103e:	f000 f929 	bl	8001294 <MX_TIM1_Init>

 8001042:	f000 f8f9 	bl	8001238 <MX_I2C1_Init>

 8001046:	f000 fa11 	bl	800146c <MX_TIM5_Init>
  }
 800104a:	f000 faad 	bl	80015a8 <MX_USART1_UART_Init>
  /* USER CODE END 3 */
}

 800104e:	2100      	movs	r1, #0
 8001050:	483d      	ldr	r0, [pc, #244]	; (8001148 <main+0x120>)
 8001052:	f002 fa63 	bl	800351c <HAL_TIM_IC_Start_IT>
=======
 8000efc:	20c8      	movs	r0, #200	; 0xc8
 8000efe:	f000 fce3 	bl	80018c8 <HAL_Delay>
	  HCSR04_Read();
 8000f02:	e7f9      	b.n	8000ef8 <main+0x38>
 8000f04:	2000007c 	.word	0x2000007c
 8000f08:	2000010c 	.word	0x2000010c

08000f0c <SystemClock_Config>:
>>>>>>> parent of 2b78fa3 (line sensor)
/**
 8001056:	2100      	movs	r1, #0
 8001058:	483c      	ldr	r0, [pc, #240]	; (800114c <main+0x124>)
 800105a:	f002 fa5f 	bl	800351c <HAL_TIM_IC_Start_IT>
  * @brief System Clock Configuration
 800105e:	2104      	movs	r1, #4
 8001060:	483a      	ldr	r0, [pc, #232]	; (800114c <main+0x124>)
 8001062:	f002 f98d 	bl	8003380 <HAL_TIM_IC_Start>
  * @retval None
  */
 8001066:	4a3a      	ldr	r2, [pc, #232]	; (8001150 <main+0x128>)
 8001068:	f107 0320 	add.w	r3, r7, #32
 800106c:	ca07      	ldmia	r2, {r0, r1, r2}
 800106e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
void SystemClock_Config(void)
 8001072:	4a38      	ldr	r2, [pc, #224]	; (8001154 <main+0x12c>)
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	ca07      	ldmia	r2, {r0, r1, r2}
 800107a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
{
<<<<<<< HEAD
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107e:	f107 0320 	add.w	r3, r7, #32
 8001082:	4618      	mov	r0, r3
 8001084:	f000 fbf3 	bl	800186e <enable>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4618      	mov	r0, r3
 800108e:	f000 fbee 	bl	800186e <enable>

  /** Configure the main internal regulator output voltage
 8001092:	2201      	movs	r2, #1
 8001094:	4930      	ldr	r1, [pc, #192]	; (8001158 <main+0x130>)
 8001096:	4831      	ldr	r0, [pc, #196]	; (800115c <main+0x134>)
 8001098:	f003 fd13 	bl	8004ac2 <HAL_UART_Receive_IT>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 192;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109c:	4b30      	ldr	r3, [pc, #192]	; (8001160 <main+0x138>)
 800109e:	789b      	ldrb	r3, [r3, #2]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d026      	beq.n	80010f2 <main+0xca>
 80010a4:	4b2e      	ldr	r3, [pc, #184]	; (8001160 <main+0x138>)
 80010a6:	78db      	ldrb	r3, [r3, #3]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d022      	beq.n	80010f2 <main+0xca>
=======
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b094      	sub	sp, #80	; 0x50
 8000f10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f12:	f107 0320 	add.w	r3, r7, #32
 8000f16:	2230      	movs	r2, #48	; 0x30
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f003 f90e 	bl	800413c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f20:	f107 030c 	add.w	r3, r7, #12
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f30:	2300      	movs	r3, #0
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	4b27      	ldr	r3, [pc, #156]	; (8000fd4 <SystemClock_Config+0xc8>)
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	4a26      	ldr	r2, [pc, #152]	; (8000fd4 <SystemClock_Config+0xc8>)
 8000f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f40:	4b24      	ldr	r3, [pc, #144]	; (8000fd4 <SystemClock_Config+0xc8>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <SystemClock_Config+0xcc>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a20      	ldr	r2, [pc, #128]	; (8000fd8 <SystemClock_Config+0xcc>)
 8000f56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <SystemClock_Config+0xcc>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f72:	2302      	movs	r3, #2
 8000f74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f7c:	2319      	movs	r3, #25
 8000f7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000f80:	23c0      	movs	r3, #192	; 0xc0
 8000f82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f84:	2302      	movs	r3, #2
 8000f86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f88:	2304      	movs	r3, #4
 8000f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f8c:	f107 0320 	add.w	r3, r7, #32
 8000f90:	4618      	mov	r0, r3
 8000f92:	f001 f8b1 	bl	80020f8 <HAL_RCC_OscConfig>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <SystemClock_Config+0x94>
>>>>>>> parent of 2b78fa3 (line sensor)
  {
 80010ac:	4b2c      	ldr	r3, [pc, #176]	; (8001160 <main+0x138>)
 80010ae:	785b      	ldrb	r3, [r3, #1]
 80010b0:	2b31      	cmp	r3, #49	; 0x31
 80010b2:	d11e      	bne.n	80010f2 <main+0xca>
    Error_Handler();
<<<<<<< HEAD
=======
 8000f9c:	f000 fa46 	bl	800142c <Error_Handler>
>>>>>>> parent of 2b78fa3 (line sensor)
  }
 80010b4:	4b2a      	ldr	r3, [pc, #168]	; (8001160 <main+0x138>)
 80010b6:	789b      	ldrb	r3, [r3, #2]
 80010b8:	743b      	strb	r3, [r7, #16]
 80010ba:	4b29      	ldr	r3, [pc, #164]	; (8001160 <main+0x138>)
 80010bc:	78db      	ldrb	r3, [r3, #3]
 80010be:	747b      	strb	r3, [r7, #17]

  /** Initializes the CPU, AHB and APB buses clocks
  */
 80010c0:	f107 020c 	add.w	r2, r7, #12
 80010c4:	f107 0310 	add.w	r3, r7, #16
 80010c8:	4926      	ldr	r1, [pc, #152]	; (8001164 <main+0x13c>)
 80010ca:	4618      	mov	r0, r3
 80010cc:	f004 fcc4 	bl	8005a58 <siscanf>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
=======
 8000fa0:	230f      	movs	r3, #15
 8000fa2:	60fb      	str	r3, [r7, #12]
>>>>>>> parent of 2b78fa3 (line sensor)
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
<<<<<<< HEAD
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d6:	f997 202f 	ldrsb.w	r2, [r7, #47]	; 0x2f
 80010da:	f107 0320 	add.w	r3, r7, #32
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 fb00 	bl	80016e6 <drive>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e6:	4b1e      	ldr	r3, [pc, #120]	; (8001160 <main+0x138>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	709a      	strb	r2, [r3, #2]
=======
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
>>>>>>> parent of 2b78fa3 (line sensor)

 80010ec:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <main+0x138>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	70da      	strb	r2, [r3, #3]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
<<<<<<< HEAD
  {
    Error_Handler();
=======
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	2103      	movs	r1, #3
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f001 fb13 	bl	80025e8 <HAL_RCC_ClockConfig>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000fc8:	f000 fa30 	bl	800142c <Error_Handler>
>>>>>>> parent of 2b78fa3 (line sensor)
  }
 80010f2:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <main+0x138>)
 80010f4:	789b      	ldrb	r3, [r3, #2]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d0d0      	beq.n	800109c <main+0x74>
 80010fa:	4b19      	ldr	r3, [pc, #100]	; (8001160 <main+0x138>)
 80010fc:	78db      	ldrb	r3, [r3, #3]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0cc      	beq.n	800109c <main+0x74>
}
<<<<<<< HEAD
 8001102:	4b17      	ldr	r3, [pc, #92]	; (8001160 <main+0x138>)
 8001104:	785b      	ldrb	r3, [r3, #1]
 8001106:	2b32      	cmp	r3, #50	; 0x32
 8001108:	d1c8      	bne.n	800109c <main+0x74>

/**
 800110a:	4b15      	ldr	r3, [pc, #84]	; (8001160 <main+0x138>)
 800110c:	789b      	ldrb	r3, [r3, #2]
 800110e:	723b      	strb	r3, [r7, #8]
 8001110:	4b13      	ldr	r3, [pc, #76]	; (8001160 <main+0x138>)
 8001112:	78db      	ldrb	r3, [r3, #3]
 8001114:	727b      	strb	r3, [r7, #9]
=======
 8000fcc:	bf00      	nop
 8000fce:	3750      	adds	r7, #80	; 0x50
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40007000 	.word	0x40007000

08000fdc <MX_I2C1_Init>:
>>>>>>> parent of 2b78fa3 (line sensor)
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
 8001116:	1d3a      	adds	r2, r7, #4
 8001118:	f107 0308 	add.w	r3, r7, #8
 800111c:	4911      	ldr	r1, [pc, #68]	; (8001164 <main+0x13c>)
 800111e:	4618      	mov	r0, r3
 8001120:	f004 fc9a 	bl	8005a58 <siscanf>
  */
static void MX_I2C1_Init(void)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
{
<<<<<<< HEAD

 800112a:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4611      	mov	r1, r2
 8001134:	4618      	mov	r0, r3
 8001136:	f000 fad6 	bl	80016e6 <drive>
  /* USER CODE BEGIN I2C1_Init 0 */

 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <main+0x138>)
 800113c:	2200      	movs	r2, #0
 800113e:	709a      	strb	r2, [r3, #2]
=======
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
>>>>>>> parent of 2b78fa3 (line sensor)
  /* USER CODE END I2C1_Init 0 */
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <main+0x138>)
 8001142:	2200      	movs	r2, #0
 8001144:	70da      	strb	r2, [r3, #3]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001146:	e7a9      	b.n	800109c <main+0x74>
 8001148:	200000e0 	.word	0x200000e0
 800114c:	20000170 	.word	0x20000170
 8001150:	08006684 	.word	0x08006684
 8001154:	08006690 	.word	0x08006690
 8001158:	20000211 	.word	0x20000211
 800115c:	200001b8 	.word	0x200001b8
 8001160:	20000214 	.word	0x20000214
 8001164:	08006680 	.word	0x08006680

<<<<<<< HEAD
08001168 <SystemClock_Config>:
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001168:	b580      	push	{r7, lr}
 800116a:	b094      	sub	sp, #80	; 0x50
 800116c:	af00      	add	r7, sp, #0
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800116e:	f107 0320 	add.w	r3, r7, #32
 8001172:	2230      	movs	r2, #48	; 0x30
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f004 fc66 	bl	8005a48 <memset>
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  {
    Error_Handler();
=======
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <MX_I2C1_Init+0x50>)
 8000fe2:	4a13      	ldr	r2, [pc, #76]	; (8001030 <MX_I2C1_Init+0x54>)
 8000fe4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <MX_I2C1_Init+0x50>)
 8000fe8:	4a12      	ldr	r2, [pc, #72]	; (8001034 <MX_I2C1_Init+0x58>)
 8000fea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fec:	4b0f      	ldr	r3, [pc, #60]	; (800102c <MX_I2C1_Init+0x50>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <MX_I2C1_Init+0x50>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <MX_I2C1_Init+0x50>)
 8000ffa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ffe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001000:	4b0a      	ldr	r3, [pc, #40]	; (800102c <MX_I2C1_Init+0x50>)
 8001002:	2200      	movs	r2, #0
 8001004:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <MX_I2C1_Init+0x50>)
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800100c:	4b07      	ldr	r3, [pc, #28]	; (800102c <MX_I2C1_Init+0x50>)
 800100e:	2200      	movs	r2, #0
 8001010:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <MX_I2C1_Init+0x50>)
 8001014:	2200      	movs	r2, #0
 8001016:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001018:	4804      	ldr	r0, [pc, #16]	; (800102c <MX_I2C1_Init+0x50>)
 800101a:	f000 ff29 	bl	8001e70 <HAL_I2C_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001024:	f000 fa02 	bl	800142c <Error_Handler>
>>>>>>> parent of 2b78fa3 (line sensor)
  }
  /* USER CODE BEGIN I2C1_Init 2 */
 800118c:	2300      	movs	r3, #0
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	4b27      	ldr	r3, [pc, #156]	; (8001230 <SystemClock_Config+0xc8>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	4a26      	ldr	r2, [pc, #152]	; (8001230 <SystemClock_Config+0xc8>)
 8001196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800119a:	6413      	str	r3, [r2, #64]	; 0x40
 800119c:	4b24      	ldr	r3, [pc, #144]	; (8001230 <SystemClock_Config+0xc8>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]

 80011a8:	2300      	movs	r3, #0
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	4b21      	ldr	r3, [pc, #132]	; (8001234 <SystemClock_Config+0xcc>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a20      	ldr	r2, [pc, #128]	; (8001234 <SystemClock_Config+0xcc>)
 80011b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	4b1e      	ldr	r3, [pc, #120]	; (8001234 <SystemClock_Config+0xcc>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END I2C1_Init 2 */

}
<<<<<<< HEAD

/**
 80011c4:	2301      	movs	r3, #1
 80011c6:	623b      	str	r3, [r7, #32]
=======
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000028 	.word	0x20000028
 8001030:	40005400 	.word	0x40005400
 8001034:	000186a0 	.word	0x000186a0

08001038 <MX_TIM1_Init>:
>>>>>>> parent of 2b78fa3 (line sensor)
  * @brief TIM1 Initialization Function
 80011c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
  * @param None
 80011ce:	2302      	movs	r3, #2
 80011d0:	63bb      	str	r3, [r7, #56]	; 0x38
  * @retval None
 80011d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  */
 80011d8:	2319      	movs	r3, #25
 80011da:	643b      	str	r3, [r7, #64]	; 0x40
static void MX_TIM1_Init(void)
 80011dc:	23c0      	movs	r3, #192	; 0xc0
 80011de:	647b      	str	r3, [r7, #68]	; 0x44
{
<<<<<<< HEAD
 80011e0:	2302      	movs	r3, #2
 80011e2:	64bb      	str	r3, [r7, #72]	; 0x48
=======
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
>>>>>>> parent of 2b78fa3 (line sensor)

 80011e4:	2304      	movs	r3, #4
 80011e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* USER CODE BEGIN TIM1_Init 0 */
 80011e8:	f107 0320 	add.w	r3, r7, #32
 80011ec:	4618      	mov	r0, r3
 80011ee:	f001 fac7 	bl	8002780 <HAL_RCC_OscConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <SystemClock_Config+0x94>

  /* USER CODE END TIM1_Init 0 */
 80011f8:	f000 fa70 	bl	80016dc <Error_Handler>

  TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< HEAD
  TIM_IC_InitTypeDef sConfigIC = {0};
=======
 800103e:	f107 0310 	add.w	r3, r7, #16
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001048:	463b      	mov	r3, r7
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
>>>>>>> parent of 2b78fa3 (line sensor)

  /* USER CODE BEGIN TIM1_Init 1 */
 80011fc:	230f      	movs	r3, #15
 80011fe:	60fb      	str	r3, [r7, #12]

  /* USER CODE END TIM1_Init 1 */
 8001200:	2302      	movs	r3, #2
 8001202:	613b      	str	r3, [r7, #16]
  htim1.Instance = TIM1;
<<<<<<< HEAD
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  htim1.Init.Prescaler = 96-1;
 8001208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120c:	61bb      	str	r3, [r7, #24]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
  htim1.Init.Period = 65535;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	2103      	movs	r1, #3
 8001218:	4618      	mov	r0, r3
 800121a:	f001 fd29 	bl	8002c70 <HAL_RCC_ClockConfig>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <SystemClock_Config+0xc0>
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001224:	f000 fa5a 	bl	80016dc <Error_Handler>
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
  {
 8001228:	bf00      	nop
 800122a:	3750      	adds	r7, #80	; 0x50
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40023800 	.word	0x40023800
 8001234:	40007000 	.word	0x40007000

08001238 <MX_I2C1_Init>:
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
=======
 8001054:	4b21      	ldr	r3, [pc, #132]	; (80010dc <MX_TIM1_Init+0xa4>)
 8001056:	4a22      	ldr	r2, [pc, #136]	; (80010e0 <MX_TIM1_Init+0xa8>)
 8001058:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 800105a:	4b20      	ldr	r3, [pc, #128]	; (80010dc <MX_TIM1_Init+0xa4>)
 800105c:	225f      	movs	r2, #95	; 0x5f
 800105e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001060:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <MX_TIM1_Init+0xa4>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001066:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <MX_TIM1_Init+0xa4>)
 8001068:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800106c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106e:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <MX_TIM1_Init+0xa4>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001074:	4b19      	ldr	r3, [pc, #100]	; (80010dc <MX_TIM1_Init+0xa4>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107a:	4b18      	ldr	r3, [pc, #96]	; (80010dc <MX_TIM1_Init+0xa4>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001080:	4816      	ldr	r0, [pc, #88]	; (80010dc <MX_TIM1_Init+0xa4>)
 8001082:	f001 fd25 	bl	8002ad0 <HAL_TIM_IC_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800108c:	f000 f9ce 	bl	800142c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001090:	2300      	movs	r3, #0
 8001092:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	4619      	mov	r1, r3
 800109e:	480f      	ldr	r0, [pc, #60]	; (80010dc <MX_TIM1_Init+0xa4>)
 80010a0:	f002 ffa6 	bl	8003ff0 <HAL_TIMEx_MasterConfigSynchronization>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80010aa:	f000 f9bf 	bl	800142c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010ae:	2300      	movs	r3, #0
 80010b0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010b2:	2301      	movs	r3, #1
 80010b4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010be:	463b      	mov	r3, r7
 80010c0:	2200      	movs	r2, #0
 80010c2:	4619      	mov	r1, r3
 80010c4:	4805      	ldr	r0, [pc, #20]	; (80010dc <MX_TIM1_Init+0xa4>)
 80010c6:	f002 f843 	bl	8003150 <HAL_TIM_IC_ConfigChannel>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80010d0:	f000 f9ac 	bl	800142c <Error_Handler>
>>>>>>> parent of 2b78fa3 (line sensor)
  }
  /* USER CODE BEGIN TIM1_Init 2 */
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <MX_I2C1_Init+0x50>)
 800123e:	4a13      	ldr	r2, [pc, #76]	; (800128c <MX_I2C1_Init+0x54>)
 8001240:	601a      	str	r2, [r3, #0]

 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <MX_I2C1_Init+0x50>)
 8001244:	4a12      	ldr	r2, [pc, #72]	; (8001290 <MX_I2C1_Init+0x58>)
 8001246:	605a      	str	r2, [r3, #4]
  /* USER CODE END TIM1_Init 2 */
 8001248:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <MX_I2C1_Init+0x50>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]

 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <MX_I2C1_Init+0x50>)
 8001250:	2200      	movs	r2, #0
 8001252:	60da      	str	r2, [r3, #12]
}
<<<<<<< HEAD
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <MX_I2C1_Init+0x50>)
 8001256:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800125a:	611a      	str	r2, [r3, #16]

 800125c:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <MX_I2C1_Init+0x50>)
 800125e:	2200      	movs	r2, #0
 8001260:	615a      	str	r2, [r3, #20]
/**
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <MX_I2C1_Init+0x50>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
=======
 80010d4:	bf00      	nop
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	2000007c 	.word	0x2000007c
 80010e0:	40010000 	.word	0x40010000

080010e4 <MX_TIM2_Init>:
>>>>>>> parent of 2b78fa3 (line sensor)
  * @brief TIM2 Initialization Function
 8001268:	4b07      	ldr	r3, [pc, #28]	; (8001288 <MX_I2C1_Init+0x50>)
 800126a:	2200      	movs	r2, #0
 800126c:	61da      	str	r2, [r3, #28]
  * @param None
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <MX_I2C1_Init+0x50>)
 8001270:	2200      	movs	r2, #0
 8001272:	621a      	str	r2, [r3, #32]
  * @retval None
 8001274:	4804      	ldr	r0, [pc, #16]	; (8001288 <MX_I2C1_Init+0x50>)
 8001276:	f001 f93f 	bl	80024f8 <HAL_I2C_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_I2C1_Init+0x4c>
  */
static void MX_TIM2_Init(void)
 8001280:	f000 fa2c 	bl	80016dc <Error_Handler>
{
<<<<<<< HEAD
=======
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08e      	sub	sp, #56	; 0x38
 80010e8:	af00      	add	r7, sp, #0
>>>>>>> parent of 2b78fa3 (line sensor)

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

<<<<<<< HEAD
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	2000008c 	.word	0x2000008c
 800128c:	40005400 	.word	0x40005400
 8001290:	000186a0 	.word	0x000186a0

08001294 <MX_TIM1_Init>:
  TIM_OC_InitTypeDef sConfigOC = {0};
=======
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f8:	f107 0320 	add.w	r3, r7, #32
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
 8001110:	615a      	str	r2, [r3, #20]
 8001112:	619a      	str	r2, [r3, #24]
>>>>>>> parent of 2b78fa3 (line sensor)

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
<<<<<<< HEAD
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 4799;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800129a:	f107 0310 	add.w	r3, r7, #16
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
=======
 8001114:	4b3d      	ldr	r3, [pc, #244]	; (800120c <MX_TIM2_Init+0x128>)
 8001116:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800111a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800111c:	4b3b      	ldr	r3, [pc, #236]	; (800120c <MX_TIM2_Init+0x128>)
 800111e:	2200      	movs	r2, #0
 8001120:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001122:	4b3a      	ldr	r3, [pc, #232]	; (800120c <MX_TIM2_Init+0x128>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4799;
 8001128:	4b38      	ldr	r3, [pc, #224]	; (800120c <MX_TIM2_Init+0x128>)
 800112a:	f241 22bf 	movw	r2, #4799	; 0x12bf
 800112e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001130:	4b36      	ldr	r3, [pc, #216]	; (800120c <MX_TIM2_Init+0x128>)
 8001132:	2200      	movs	r2, #0
 8001134:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001136:	4b35      	ldr	r3, [pc, #212]	; (800120c <MX_TIM2_Init+0x128>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800113c:	4833      	ldr	r0, [pc, #204]	; (800120c <MX_TIM2_Init+0x128>)
 800113e:	f001 fc1f 	bl	8002980 <HAL_TIM_Base_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM2_Init+0x68>
>>>>>>> parent of 2b78fa3 (line sensor)
  {
 80012a4:	463b      	mov	r3, r7
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
    Error_Handler();
<<<<<<< HEAD
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
=======
 8001148:	f000 f970 	bl	800142c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800114c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001152:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001156:	4619      	mov	r1, r3
 8001158:	482c      	ldr	r0, [pc, #176]	; (800120c <MX_TIM2_Init+0x128>)
 800115a:	f002 f957 	bl	800340c <HAL_TIM_ConfigClockSource>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM2_Init+0x84>
>>>>>>> parent of 2b78fa3 (line sensor)
  {
 80012b0:	4b21      	ldr	r3, [pc, #132]	; (8001338 <MX_TIM1_Init+0xa4>)
 80012b2:	4a22      	ldr	r2, [pc, #136]	; (800133c <MX_TIM1_Init+0xa8>)
 80012b4:	601a      	str	r2, [r3, #0]
    Error_Handler();
<<<<<<< HEAD
 80012b6:	4b20      	ldr	r3, [pc, #128]	; (8001338 <MX_TIM1_Init+0xa4>)
 80012b8:	225f      	movs	r2, #95	; 0x5f
 80012ba:	605a      	str	r2, [r3, #4]
=======
 8001164:	f000 f962 	bl	800142c <Error_Handler>
>>>>>>> parent of 2b78fa3 (line sensor)
  }
 80012bc:	4b1e      	ldr	r3, [pc, #120]	; (8001338 <MX_TIM1_Init+0xa4>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
<<<<<<< HEAD
 80012c2:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <MX_TIM1_Init+0xa4>)
 80012c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012c8:	60da      	str	r2, [r3, #12]
=======
 8001168:	4828      	ldr	r0, [pc, #160]	; (800120c <MX_TIM2_Init+0x128>)
 800116a:	f001 fc58 	bl	8002a1e <HAL_TIM_PWM_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM2_Init+0x94>
>>>>>>> parent of 2b78fa3 (line sensor)
  {
 80012ca:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <MX_TIM1_Init+0xa4>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
    Error_Handler();
<<<<<<< HEAD
 80012d0:	4b19      	ldr	r3, [pc, #100]	; (8001338 <MX_TIM1_Init+0xa4>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	615a      	str	r2, [r3, #20]
=======
 8001174:	f000 f95a 	bl	800142c <Error_Handler>
>>>>>>> parent of 2b78fa3 (line sensor)
  }
 80012d6:	4b18      	ldr	r3, [pc, #96]	; (8001338 <MX_TIM1_Init+0xa4>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
<<<<<<< HEAD
 80012dc:	4816      	ldr	r0, [pc, #88]	; (8001338 <MX_TIM1_Init+0xa4>)
 80012de:	f001 ffff 	bl	80032e0 <HAL_TIM_IC_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM1_Init+0x58>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012e8:	f000 f9f8 	bl	80016dc <Error_Handler>
  {
    Error_Handler();
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
=======
 8001178:	2300      	movs	r3, #0
 800117a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117c:	2300      	movs	r3, #0
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001180:	f107 0320 	add.w	r3, r7, #32
 8001184:	4619      	mov	r1, r3
 8001186:	4821      	ldr	r0, [pc, #132]	; (800120c <MX_TIM2_Init+0x128>)
 8001188:	f002 ff32 	bl	8003ff0 <HAL_TIMEx_MasterConfigSynchronization>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001192:	f000 f94b 	bl	800142c <Error_Handler>
>>>>>>> parent of 2b78fa3 (line sensor)
  }
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
<<<<<<< HEAD
 80012f4:	f107 0310 	add.w	r3, r7, #16
 80012f8:	4619      	mov	r1, r3
 80012fa:	480f      	ldr	r0, [pc, #60]	; (8001338 <MX_TIM1_Init+0xa4>)
 80012fc:	f003 fa80 	bl	8004800 <HAL_TIMEx_MasterConfigSynchronization>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM1_Init+0x76>
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001306:	f000 f9e9 	bl	80016dc <Error_Handler>
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800130a:	2300      	movs	r3, #0
 800130c:	603b      	str	r3, [r7, #0]
=======
 8001196:	2360      	movs	r3, #96	; 0x60
 8001198:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	2200      	movs	r2, #0
 80011aa:	4619      	mov	r1, r3
 80011ac:	4817      	ldr	r0, [pc, #92]	; (800120c <MX_TIM2_Init+0x128>)
 80011ae:	f002 f86b 	bl	8003288 <HAL_TIM_PWM_ConfigChannel>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM2_Init+0xd8>
>>>>>>> parent of 2b78fa3 (line sensor)
  {
 800130e:	2301      	movs	r3, #1
 8001310:	607b      	str	r3, [r7, #4]
    Error_Handler();
<<<<<<< HEAD
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
=======
 80011b8:	f000 f938 	bl	800142c <Error_Handler>
>>>>>>> parent of 2b78fa3 (line sensor)
  }
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
<<<<<<< HEAD
 800131a:	463b      	mov	r3, r7
 800131c:	2200      	movs	r2, #0
 800131e:	4619      	mov	r1, r3
 8001320:	4805      	ldr	r0, [pc, #20]	; (8001338 <MX_TIM1_Init+0xa4>)
 8001322:	f002 fb1d 	bl	8003960 <HAL_TIM_IC_ConfigChannel>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800132c:	f000 f9d6 	bl	80016dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001330:	bf00      	nop
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	200000e0 	.word	0x200000e0
 800133c:	40010000 	.word	0x40010000

08001340 <MX_TIM2_Init>:
=======
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2204      	movs	r2, #4
 80011c0:	4619      	mov	r1, r3
 80011c2:	4812      	ldr	r0, [pc, #72]	; (800120c <MX_TIM2_Init+0x128>)
 80011c4:	f002 f860 	bl	8003288 <HAL_TIM_PWM_ConfigChannel>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80011ce:	f000 f92d 	bl	800142c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	2208      	movs	r2, #8
 80011d6:	4619      	mov	r1, r3
 80011d8:	480c      	ldr	r0, [pc, #48]	; (800120c <MX_TIM2_Init+0x128>)
 80011da:	f002 f855 	bl	8003288 <HAL_TIM_PWM_ConfigChannel>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80011e4:	f000 f922 	bl	800142c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	220c      	movs	r2, #12
 80011ec:	4619      	mov	r1, r3
 80011ee:	4807      	ldr	r0, [pc, #28]	; (800120c <MX_TIM2_Init+0x128>)
 80011f0:	f002 f84a 	bl	8003288 <HAL_TIM_PWM_ConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 80011fa:	f000 f917 	bl	800142c <Error_Handler>
>>>>>>> parent of 2b78fa3 (line sensor)
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
<<<<<<< HEAD
=======
 80011fe:	4803      	ldr	r0, [pc, #12]	; (800120c <MX_TIM2_Init+0x128>)
 8001200:	f000 fa3e 	bl	8001680 <HAL_TIM_MspPostInit>
>>>>>>> parent of 2b78fa3 (line sensor)

 8001340:	b580      	push	{r7, lr}
 8001342:	b08e      	sub	sp, #56	; 0x38
 8001344:	af00      	add	r7, sp, #0
}
<<<<<<< HEAD

/**
=======
 8001204:	bf00      	nop
 8001206:	3738      	adds	r7, #56	; 0x38
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200000c4 	.word	0x200000c4

08001210 <MX_TIM5_Init>:
>>>>>>> parent of 2b78fa3 (line sensor)
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
 8001346:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
  */
 8001354:	f107 0320 	add.w	r3, r7, #32
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
static void MX_TIM5_Init(void)
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
 800136c:	615a      	str	r2, [r3, #20]
 800136e:	619a      	str	r2, [r3, #24]
{
<<<<<<< HEAD
=======
 8001210:	b580      	push	{r7, lr}
 8001212:	b090      	sub	sp, #64	; 0x40
 8001214:	af00      	add	r7, sp, #0
>>>>>>> parent of 2b78fa3 (line sensor)

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */
 8001370:	4b3d      	ldr	r3, [pc, #244]	; (8001468 <MX_TIM2_Init+0x128>)
 8001372:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001376:	601a      	str	r2, [r3, #0]

 8001378:	4b3b      	ldr	r3, [pc, #236]	; (8001468 <MX_TIM2_Init+0x128>)
 800137a:	2200      	movs	r2, #0
 800137c:	605a      	str	r2, [r3, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 800137e:	4b3a      	ldr	r3, [pc, #232]	; (8001468 <MX_TIM2_Init+0x128>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001384:	4b38      	ldr	r3, [pc, #224]	; (8001468 <MX_TIM2_Init+0x128>)
 8001386:	f241 22bf 	movw	r2, #4799	; 0x12bf
 800138a:	60da      	str	r2, [r3, #12]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800138c:	4b36      	ldr	r3, [pc, #216]	; (8001468 <MX_TIM2_Init+0x128>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001392:	4b35      	ldr	r3, [pc, #212]	; (8001468 <MX_TIM2_Init+0x128>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
=======
 8001216:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001224:	f107 031c 	add.w	r3, r7, #28
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
>>>>>>> parent of 2b78fa3 (line sensor)

 8001398:	4833      	ldr	r0, [pc, #204]	; (8001468 <MX_TIM2_Init+0x128>)
 800139a:	f001 fe49 	bl	8003030 <HAL_TIM_Base_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM2_Init+0x68>
  /* USER CODE BEGIN TIM5_Init 1 */

 80013a4:	f000 f99a 	bl	80016dc <Error_Handler>
  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
<<<<<<< HEAD
 80013a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28
  htim5.Init.Prescaler = 0;
 80013ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013b2:	4619      	mov	r1, r3
 80013b4:	482c      	ldr	r0, [pc, #176]	; (8001468 <MX_TIM2_Init+0x128>)
 80013b6:	f002 fc31 	bl	8003c1c <HAL_TIM_ConfigClockSource>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM2_Init+0x84>
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 4294967295;
 80013c0:	f000 f98c 	bl	80016dc <Error_Handler>
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c4:	4828      	ldr	r0, [pc, #160]	; (8001468 <MX_TIM2_Init+0x128>)
 80013c6:	f001 fe82 	bl	80030ce <HAL_TIM_PWM_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM2_Init+0x94>
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
=======
 800124a:	4b3e      	ldr	r3, [pc, #248]	; (8001344 <MX_TIM5_Init+0x134>)
 800124c:	4a3e      	ldr	r2, [pc, #248]	; (8001348 <MX_TIM5_Init+0x138>)
 800124e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001250:	4b3c      	ldr	r3, [pc, #240]	; (8001344 <MX_TIM5_Init+0x134>)
 8001252:	2200      	movs	r2, #0
 8001254:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001256:	4b3b      	ldr	r3, [pc, #236]	; (8001344 <MX_TIM5_Init+0x134>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800125c:	4b39      	ldr	r3, [pc, #228]	; (8001344 <MX_TIM5_Init+0x134>)
 800125e:	f04f 32ff 	mov.w	r2, #4294967295
 8001262:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001264:	4b37      	ldr	r3, [pc, #220]	; (8001344 <MX_TIM5_Init+0x134>)
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126a:	4b36      	ldr	r3, [pc, #216]	; (8001344 <MX_TIM5_Init+0x134>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001270:	4834      	ldr	r0, [pc, #208]	; (8001344 <MX_TIM5_Init+0x134>)
 8001272:	f001 fb85 	bl	8002980 <HAL_TIM_Base_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM5_Init+0x70>
>>>>>>> parent of 2b78fa3 (line sensor)
  {
 80013d0:	f000 f984 	bl	80016dc <Error_Handler>
    Error_Handler();
<<<<<<< HEAD
=======
 800127c:	f000 f8d6 	bl	800142c <Error_Handler>
>>>>>>> parent of 2b78fa3 (line sensor)
  }
 80013d4:	2300      	movs	r3, #0
 80013d6:	623b      	str	r3, [r7, #32]
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
<<<<<<< HEAD
 80013d8:	2300      	movs	r3, #0
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80013dc:	f107 0320 	add.w	r3, r7, #32
 80013e0:	4619      	mov	r1, r3
 80013e2:	4821      	ldr	r0, [pc, #132]	; (8001468 <MX_TIM2_Init+0x128>)
 80013e4:	f003 fa0c 	bl	8004800 <HAL_TIMEx_MasterConfigSynchronization>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80013ee:	f000 f975 	bl	80016dc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80013f2:	2360      	movs	r3, #96	; 0x60
 80013f4:	607b      	str	r3, [r7, #4]
=======
 8001280:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001284:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001286:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800128a:	4619      	mov	r1, r3
 800128c:	482d      	ldr	r0, [pc, #180]	; (8001344 <MX_TIM5_Init+0x134>)
 800128e:	f002 f8bd 	bl	800340c <HAL_TIM_ConfigClockSource>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001298:	f000 f8c8 	bl	800142c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 800129c:	4829      	ldr	r0, [pc, #164]	; (8001344 <MX_TIM5_Init+0x134>)
 800129e:	f001 fc17 	bl	8002ad0 <HAL_TIM_IC_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM5_Init+0x9c>
>>>>>>> parent of 2b78fa3 (line sensor)
  {
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
    Error_Handler();
<<<<<<< HEAD
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
=======
 80012a8:	f000 f8c0 	bl	800142c <Error_Handler>
>>>>>>> parent of 2b78fa3 (line sensor)
  }
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
<<<<<<< HEAD
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2200      	movs	r2, #0
 8001406:	4619      	mov	r1, r3
 8001408:	4817      	ldr	r0, [pc, #92]	; (8001468 <MX_TIM2_Init+0x128>)
 800140a:	f002 fb45 	bl	8003a98 <HAL_TIM_PWM_ConfigChannel>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM2_Init+0xd8>
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001414:	f000 f962 	bl	80016dc <Error_Handler>
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
  sSlaveConfig.TriggerFilter = 0;
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	2204      	movs	r2, #4
 800141c:	4619      	mov	r1, r3
 800141e:	4812      	ldr	r0, [pc, #72]	; (8001468 <MX_TIM2_Init+0x128>)
 8001420:	f002 fb3a 	bl	8003a98 <HAL_TIM_PWM_ConfigChannel>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM2_Init+0xee>
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
=======
 80012ac:	2304      	movs	r3, #4
 80012ae:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80012b0:	2350      	movs	r3, #80	; 0x50
 80012b2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012b4:	2300      	movs	r3, #0
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 80012c0:	f107 031c 	add.w	r3, r7, #28
 80012c4:	4619      	mov	r1, r3
 80012c6:	481f      	ldr	r0, [pc, #124]	; (8001344 <MX_TIM5_Init+0x134>)
 80012c8:	f002 f967 	bl	800359a <HAL_TIM_SlaveConfigSynchro>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM5_Init+0xc6>
>>>>>>> parent of 2b78fa3 (line sensor)
  {
 800142a:	f000 f957 	bl	80016dc <Error_Handler>
    Error_Handler();
<<<<<<< HEAD
=======
 80012d2:	f000 f8ab 	bl	800142c <Error_Handler>
>>>>>>> parent of 2b78fa3 (line sensor)
  }
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	2208      	movs	r2, #8
 8001432:	4619      	mov	r1, r3
 8001434:	480c      	ldr	r0, [pc, #48]	; (8001468 <MX_TIM2_Init+0x128>)
 8001436:	f002 fb2f 	bl	8003a98 <HAL_TIM_PWM_ConfigChannel>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM2_Init+0x104>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
<<<<<<< HEAD
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001440:	f000 f94c 	bl	80016dc <Error_Handler>
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	220c      	movs	r2, #12
 8001448:	4619      	mov	r1, r3
 800144a:	4807      	ldr	r0, [pc, #28]	; (8001468 <MX_TIM2_Init+0x128>)
 800144c:	f002 fb24 	bl	8003a98 <HAL_TIM_PWM_ConfigChannel>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM2_Init+0x11a>
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
=======
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012da:	2301      	movs	r3, #1
 80012dc:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012e6:	f107 030c 	add.w	r3, r7, #12
 80012ea:	2200      	movs	r2, #0
 80012ec:	4619      	mov	r1, r3
 80012ee:	4815      	ldr	r0, [pc, #84]	; (8001344 <MX_TIM5_Init+0x134>)
 80012f0:	f001 ff2e 	bl	8003150 <HAL_TIM_IC_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM5_Init+0xee>
>>>>>>> parent of 2b78fa3 (line sensor)
  {
 8001456:	f000 f941 	bl	80016dc <Error_Handler>
    Error_Handler();
<<<<<<< HEAD
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800145a:	4803      	ldr	r0, [pc, #12]	; (8001468 <MX_TIM2_Init+0x128>)
 800145c:	f000 fb4c 	bl	8001af8 <HAL_TIM_MspPostInit>
  {
    Error_Handler();
 8001460:	bf00      	nop
 8001462:	3738      	adds	r7, #56	; 0x38
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000128 	.word	0x20000128

0800146c <MX_TIM5_Init>:
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
=======
 80012fa:	f000 f897 	bl	800142c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80012fe:	2302      	movs	r3, #2
 8001300:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001302:	2302      	movs	r3, #2
 8001304:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001306:	f107 030c 	add.w	r3, r7, #12
 800130a:	2204      	movs	r2, #4
 800130c:	4619      	mov	r1, r3
 800130e:	480d      	ldr	r0, [pc, #52]	; (8001344 <MX_TIM5_Init+0x134>)
 8001310:	f001 ff1e 	bl	8003150 <HAL_TIM_IC_ConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM5_Init+0x10e>
  {
    Error_Handler();
 800131a:	f000 f887 	bl	800142c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	4619      	mov	r1, r3
 800132a:	4806      	ldr	r0, [pc, #24]	; (8001344 <MX_TIM5_Init+0x134>)
 800132c:	f002 fe60 	bl	8003ff0 <HAL_TIMEx_MasterConfigSynchronization>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM5_Init+0x12a>
  {
    Error_Handler();
 8001336:	f000 f879 	bl	800142c <Error_Handler>
>>>>>>> parent of 2b78fa3 (line sensor)
  }
  /* USER CODE BEGIN TIM5_Init 2 */
 800146c:	b580      	push	{r7, lr}
 800146e:	b090      	sub	sp, #64	; 0x40
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE END TIM5_Init 2 */

}
<<<<<<< HEAD

/**
 8001472:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
  * @brief USART1 Initialization Function
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  * @param None
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
  * @retval None
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */
 80014a6:	4b3e      	ldr	r3, [pc, #248]	; (80015a0 <MX_TIM5_Init+0x134>)
 80014a8:	4a3e      	ldr	r2, [pc, #248]	; (80015a4 <MX_TIM5_Init+0x138>)
 80014aa:	601a      	str	r2, [r3, #0]

 80014ac:	4b3c      	ldr	r3, [pc, #240]	; (80015a0 <MX_TIM5_Init+0x134>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART1_Init 0 */
 80014b2:	4b3b      	ldr	r3, [pc, #236]	; (80015a0 <MX_TIM5_Init+0x134>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]

 80014b8:	4b39      	ldr	r3, [pc, #228]	; (80015a0 <MX_TIM5_Init+0x134>)
 80014ba:	f04f 32ff 	mov.w	r2, #4294967295
 80014be:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN USART1_Init 1 */
 80014c0:	4b37      	ldr	r3, [pc, #220]	; (80015a0 <MX_TIM5_Init+0x134>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]

 80014c6:	4b36      	ldr	r3, [pc, #216]	; (80015a0 <MX_TIM5_Init+0x134>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  /* USER CODE END USART1_Init 1 */
 80014cc:	4834      	ldr	r0, [pc, #208]	; (80015a0 <MX_TIM5_Init+0x134>)
 80014ce:	f001 fdaf 	bl	8003030 <HAL_TIM_Base_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM5_Init+0x70>
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 80014d8:	f000 f900 	bl	80016dc <Error_Handler>
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e0:	633b      	str	r3, [r7, #48]	; 0x30
  huart1.Init.Parity = UART_PARITY_NONE;
 80014e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014e6:	4619      	mov	r1, r3
 80014e8:	482d      	ldr	r0, [pc, #180]	; (80015a0 <MX_TIM5_Init+0x134>)
 80014ea:	f002 fb97 	bl	8003c1c <HAL_TIM_ConfigClockSource>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM5_Init+0x8c>
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014f4:	f000 f8f2 	bl	80016dc <Error_Handler>
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014f8:	4829      	ldr	r0, [pc, #164]	; (80015a0 <MX_TIM5_Init+0x134>)
 80014fa:	f001 fef1 	bl	80032e0 <HAL_TIM_IC_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001504:	f000 f8ea 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
 8001508:	2304      	movs	r3, #4
 800150a:	61fb      	str	r3, [r7, #28]

 800150c:	2350      	movs	r3, #80	; 0x50
 800150e:	623b      	str	r3, [r7, #32]
  /* USER CODE END USART1_Init 2 */
 8001510:	2300      	movs	r3, #0
 8001512:	627b      	str	r3, [r7, #36]	; 0x24

 8001514:	2300      	movs	r3, #0
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001518:	2300      	movs	r3, #0
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c

 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	4619      	mov	r1, r3
 8001522:	481f      	ldr	r0, [pc, #124]	; (80015a0 <MX_TIM5_Init+0x134>)
 8001524:	f002 fc41 	bl	8003daa <HAL_TIM_SlaveConfigSynchro>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM5_Init+0xc6>
/**
=======
 800133a:	bf00      	nop
 800133c:	3740      	adds	r7, #64	; 0x40
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	2000010c 	.word	0x2000010c
 8001348:	40000c00 	.word	0x40000c00

0800134c <MX_GPIO_Init>:
>>>>>>> parent of 2b78fa3 (line sensor)
  * @brief GPIO Initialization Function
 800152e:	f000 f8d5 	bl	80016dc <Error_Handler>
  * @param None
  * @retval None
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
  */
 8001536:	2301      	movs	r3, #1
 8001538:	613b      	str	r3, [r7, #16]
static void MX_GPIO_Init(void)
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
{
<<<<<<< HEAD
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001542:	f107 030c 	add.w	r3, r7, #12
 8001546:	2200      	movs	r2, #0
 8001548:	4619      	mov	r1, r3
 800154a:	4815      	ldr	r0, [pc, #84]	; (80015a0 <MX_TIM5_Init+0x134>)
 800154c:	f002 fa08 	bl	8003960 <HAL_TIM_IC_ConfigChannel>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM5_Init+0xee>
=======
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]
>>>>>>> parent of 2b78fa3 (line sensor)
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */
 8001556:	f000 f8c1 	bl	80016dc <Error_Handler>

  /* GPIO Ports Clock Enable */
 800155a:	2302      	movs	r3, #2
 800155c:	60fb      	str	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
<<<<<<< HEAD
 800155e:	2302      	movs	r3, #2
 8001560:	613b      	str	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001562:	f107 030c 	add.w	r3, r7, #12
 8001566:	2204      	movs	r2, #4
 8001568:	4619      	mov	r1, r3
 800156a:	480d      	ldr	r0, [pc, #52]	; (80015a0 <MX_TIM5_Init+0x134>)
 800156c:	f002 f9f8 	bl	8003960 <HAL_TIM_IC_ConfigChannel>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM5_Init+0x10e>
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001576:	f000 f8b1 	bl	80016dc <Error_Handler>
=======
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	4b2e      	ldr	r3, [pc, #184]	; (8001420 <MX_GPIO_Init+0xd4>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a2d      	ldr	r2, [pc, #180]	; (8001420 <MX_GPIO_Init+0xd4>)
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <MX_GPIO_Init+0xd4>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b27      	ldr	r3, [pc, #156]	; (8001420 <MX_GPIO_Init+0xd4>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a26      	ldr	r2, [pc, #152]	; (8001420 <MX_GPIO_Init+0xd4>)
 8001388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b24      	ldr	r3, [pc, #144]	; (8001420 <MX_GPIO_Init+0xd4>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	4b20      	ldr	r3, [pc, #128]	; (8001420 <MX_GPIO_Init+0xd4>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a1f      	ldr	r2, [pc, #124]	; (8001420 <MX_GPIO_Init+0xd4>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <MX_GPIO_Init+0xd4>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	4b19      	ldr	r3, [pc, #100]	; (8001420 <MX_GPIO_Init+0xd4>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a18      	ldr	r2, [pc, #96]	; (8001420 <MX_GPIO_Init+0xd4>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b16      	ldr	r3, [pc, #88]	; (8001420 <MX_GPIO_Init+0xd4>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
>>>>>>> parent of 2b78fa3 (line sensor)

  /*Configure GPIO pin Output Level */
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
<<<<<<< HEAD
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
=======
 80013d2:	2200      	movs	r2, #0
 80013d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013d8:	4812      	ldr	r0, [pc, #72]	; (8001424 <MX_GPIO_Init+0xd8>)
 80013da:	f000 fd2f 	bl	8001e3c <HAL_GPIO_WritePin>
>>>>>>> parent of 2b78fa3 (line sensor)

 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	4619      	mov	r1, r3
 8001586:	4806      	ldr	r0, [pc, #24]	; (80015a0 <MX_TIM5_Init+0x134>)
 8001588:	f003 f93a 	bl	8004800 <HAL_TIMEx_MasterConfigSynchronization>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM5_Init+0x12a>
  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
<<<<<<< HEAD
 8001592:	f000 f8a3 	bl	80016dc <Error_Handler>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001596:	bf00      	nop
 8001598:	3740      	adds	r7, #64	; 0x40
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000170 	.word	0x20000170
 80015a4:	40000c00 	.word	0x40000c00

080015a8 <MX_USART1_UART_Init>:
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <MX_USART1_UART_Init+0x4c>)
 80015ae:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <MX_USART1_UART_Init+0x50>)
 80015b0:	601a      	str	r2, [r3, #0]
/* USER CODE END 4 */
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <MX_USART1_UART_Init+0x4c>)
 80015b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015b8:	605a      	str	r2, [r3, #4]

 80015ba:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <MX_USART1_UART_Init+0x4c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
=======
 80013de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	480d      	ldr	r0, [pc, #52]	; (8001428 <MX_GPIO_Init+0xdc>)
 80013f4:	f000 fb9e 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fe:	2301      	movs	r3, #1
 8001400:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	2300      	movs	r3, #0
 8001408:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4619      	mov	r1, r3
 8001410:	4804      	ldr	r0, [pc, #16]	; (8001424 <MX_GPIO_Init+0xd8>)
 8001412:	f000 fb8f 	bl	8001b34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001416:	bf00      	nop
 8001418:	3728      	adds	r7, #40	; 0x28
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800
 8001424:	40020000 	.word	0x40020000
 8001428:	40020800 	.word	0x40020800

0800142c <Error_Handler>:
>>>>>>> parent of 2b78fa3 (line sensor)
/**
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <MX_USART1_UART_Init+0x4c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
  * @brief  This function is executed in case of error occurrence.
 80015c6:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <MX_USART1_UART_Init+0x4c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  * @retval None
 80015cc:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <MX_USART1_UART_Init+0x4c>)
 80015ce:	220c      	movs	r2, #12
 80015d0:	615a      	str	r2, [r3, #20]
  */
 80015d2:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <MX_USART1_UART_Init+0x4c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
void Error_Handler(void)
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <MX_USART1_UART_Init+0x4c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
{
<<<<<<< HEAD
 80015de:	4805      	ldr	r0, [pc, #20]	; (80015f4 <MX_USART1_UART_Init+0x4c>)
 80015e0:	f003 f990 	bl	8004904 <HAL_UART_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_USART1_UART_Init+0x46>
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
 80015ea:	f000 f877 	bl	80016dc <Error_Handler>
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200001b8 	.word	0x200001b8
 80015f8:	40011000 	.word	0x40011000

080015fc <MX_GPIO_Init>:
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	; 0x28
 8001600:	af00      	add	r7, sp, #0
  */
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
 8001610:	611a      	str	r2, [r3, #16]
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	4b2e      	ldr	r3, [pc, #184]	; (80016d0 <MX_GPIO_Init+0xd4>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a2d      	ldr	r2, [pc, #180]	; (80016d0 <MX_GPIO_Init+0xd4>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b2b      	ldr	r3, [pc, #172]	; (80016d0 <MX_GPIO_Init+0xd4>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	693b      	ldr	r3, [r7, #16]
  /* USER CODE END 6 */
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	4b27      	ldr	r3, [pc, #156]	; (80016d0 <MX_GPIO_Init+0xd4>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a26      	ldr	r2, [pc, #152]	; (80016d0 <MX_GPIO_Init+0xd4>)
 8001638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b24      	ldr	r3, [pc, #144]	; (80016d0 <MX_GPIO_Init+0xd4>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
}
 800164a:	2300      	movs	r3, #0
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <MX_GPIO_Init+0xd4>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a1f      	ldr	r2, [pc, #124]	; (80016d0 <MX_GPIO_Init+0xd4>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <MX_GPIO_Init+0xd4>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	68bb      	ldr	r3, [r7, #8]
#endif /* USE_FULL_ASSERT */
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <MX_GPIO_Init+0xd4>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a18      	ldr	r2, [pc, #96]	; (80016d0 <MX_GPIO_Init+0xd4>)
 8001670:	f043 0302 	orr.w	r3, r3, #2
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <MX_GPIO_Init+0xd4>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001688:	4812      	ldr	r0, [pc, #72]	; (80016d4 <MX_GPIO_Init+0xd8>)
 800168a:	f000 ff1b 	bl	80024c4 <HAL_GPIO_WritePin>
 800168e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	2300      	movs	r3, #0
 8001696:	61bb      	str	r3, [r7, #24]
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4619      	mov	r1, r3
 80016a2:	480d      	ldr	r0, [pc, #52]	; (80016d8 <MX_GPIO_Init+0xdc>)
 80016a4:	f000 fd8a 	bl	80021bc <HAL_GPIO_Init>
 80016a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	2301      	movs	r3, #1
 80016b0:	61bb      	str	r3, [r7, #24]
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
 80016b6:	2300      	movs	r3, #0
 80016b8:	623b      	str	r3, [r7, #32]
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	4619      	mov	r1, r3
 80016c0:	4804      	ldr	r0, [pc, #16]	; (80016d4 <MX_GPIO_Init+0xd8>)
 80016c2:	f000 fd7b 	bl	80021bc <HAL_GPIO_Init>
 80016c6:	bf00      	nop
 80016c8:	3728      	adds	r7, #40	; 0x28
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40020000 	.word	0x40020000
 80016d8:	40020800 	.word	0x40020800

080016dc <Error_Handler>:
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
=======
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
>>>>>>> parent of 2b78fa3 (line sensor)
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 80016e0:	b672      	cpsid	i
}
 80016e2:	bf00      	nop
 80016e4:	e7fe      	b.n	80016e4 <Error_Handler+0x8>

080016e6 <drive>:
#include "motor_driver.h"

void drive(motor_driver_t* motor, int32_t duty) {
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	6039      	str	r1, [r7, #0]

       if (duty > 0) { ///forward
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	dd57      	ble.n	80017a6 <drive+0xc0>

             duty = 4799 - ((duty*4799) / 128) ;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	f241 22bf 	movw	r2, #4799	; 0x12bf
 80016fc:	fb02 f303 	mul.w	r3, r2, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	da00      	bge.n	8001706 <drive+0x20>
 8001704:	337f      	adds	r3, #127	; 0x7f
 8001706:	11db      	asrs	r3, r3, #7
 8001708:	425b      	negs	r3, r3
 800170a:	f503 5395 	add.w	r3, r3, #4768	; 0x12a0
 800170e:	331f      	adds	r3, #31
 8001710:	603b      	str	r3, [r7, #0]

             __HAL_TIM_SET_COMPARE(motor->htim, motor->chan1, 4799); //only works with positive duty
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d106      	bne.n	8001728 <drive+0x42>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8001724:	635a      	str	r2, [r3, #52]	; 0x34
 8001726:	e01b      	b.n	8001760 <drive+0x7a>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b04      	cmp	r3, #4
 800172e:	d106      	bne.n	800173e <drive+0x58>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	f241 23bf 	movw	r3, #4799	; 0x12bf
 800173a:	6393      	str	r3, [r2, #56]	; 0x38
 800173c:	e010      	b.n	8001760 <drive+0x7a>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b08      	cmp	r3, #8
 8001744:	d106      	bne.n	8001754 <drive+0x6e>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	f241 23bf 	movw	r3, #4799	; 0x12bf
 8001750:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001752:	e005      	b.n	8001760 <drive+0x7a>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	f241 23bf 	movw	r3, #4799	; 0x12bf
 800175e:	6413      	str	r3, [r2, #64]	; 0x40
             __HAL_TIM_SET_COMPARE(motor->htim, motor->chan2, duty); //only works with positive duty
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d105      	bne.n	8001774 <drive+0x8e>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	635a      	str	r2, [r3, #52]	; 0x34
 8001772:	e018      	b.n	80017a6 <drive+0xc0>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b04      	cmp	r3, #4
 800177a:	d105      	bne.n	8001788 <drive+0xa2>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	6393      	str	r3, [r2, #56]	; 0x38
 8001786:	e00e      	b.n	80017a6 <drive+0xc0>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	2b08      	cmp	r3, #8
 800178e:	d105      	bne.n	800179c <drive+0xb6>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	63d3      	str	r3, [r2, #60]	; 0x3c
 800179a:	e004      	b.n	80017a6 <drive+0xc0>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	6413      	str	r3, [r2, #64]	; 0x40
       }

       if (duty < 0) { //reverse
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	da5a      	bge.n	8001862 <drive+0x17c>

             duty = -duty;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	425b      	negs	r3, r3
 80017b0:	603b      	str	r3, [r7, #0]
             duty = 4799 - ((duty*4799) / 128) ;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	f241 22bf 	movw	r2, #4799	; 0x12bf
 80017b8:	fb02 f303 	mul.w	r3, r2, r3
 80017bc:	2b00      	cmp	r3, #0
 80017be:	da00      	bge.n	80017c2 <drive+0xdc>
 80017c0:	337f      	adds	r3, #127	; 0x7f
 80017c2:	11db      	asrs	r3, r3, #7
 80017c4:	425b      	negs	r3, r3
 80017c6:	f503 5395 	add.w	r3, r3, #4768	; 0x12a0
 80017ca:	331f      	adds	r3, #31
 80017cc:	603b      	str	r3, [r7, #0]

             __HAL_TIM_SET_COMPARE(motor->htim, motor->chan1, duty); //only works with positive duty
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d105      	bne.n	80017e2 <drive+0xfc>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	635a      	str	r2, [r3, #52]	; 0x34
 80017e0:	e018      	b.n	8001814 <drive+0x12e>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d105      	bne.n	80017f6 <drive+0x110>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	6393      	str	r3, [r2, #56]	; 0x38
 80017f4:	e00e      	b.n	8001814 <drive+0x12e>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b08      	cmp	r3, #8
 80017fc:	d105      	bne.n	800180a <drive+0x124>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001808:	e004      	b.n	8001814 <drive+0x12e>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	6413      	str	r3, [r2, #64]	; 0x40
             __HAL_TIM_SET_COMPARE(motor->htim, motor->chan2, 4799); //only works with positive duty
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d106      	bne.n	800182a <drive+0x144>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8001826:	635a      	str	r2, [r3, #52]	; 0x34

             // alternate pwm signal between reverse and brake instead of reverse and stop

       }
}
 8001828:	e01b      	b.n	8001862 <drive+0x17c>
             __HAL_TIM_SET_COMPARE(motor->htim, motor->chan2, 4799); //only works with positive duty
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2b04      	cmp	r3, #4
 8001830:	d106      	bne.n	8001840 <drive+0x15a>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	f241 23bf 	movw	r3, #4799	; 0x12bf
 800183c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800183e:	e010      	b.n	8001862 <drive+0x17c>
             __HAL_TIM_SET_COMPARE(motor->htim, motor->chan2, 4799); //only works with positive duty
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	2b08      	cmp	r3, #8
 8001846:	d106      	bne.n	8001856 <drive+0x170>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	f241 23bf 	movw	r3, #4799	; 0x12bf
 8001852:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001854:	e005      	b.n	8001862 <drive+0x17c>
             __HAL_TIM_SET_COMPARE(motor->htim, motor->chan2, 4799); //only works with positive duty
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	f241 23bf 	movw	r3, #4799	; 0x12bf
 8001860:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <enable>:

void enable(motor_driver_t* motor){
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]

         HAL_TIM_PWM_Start(motor->htim, motor->chan1); // & -> pointer to variable, initialize PWM channel 1 timer 2
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	4619      	mov	r1, r3
 8001880:	4610      	mov	r0, r2
 8001882:	f001 fc7d 	bl	8003180 <HAL_TIM_PWM_Start>
         HAL_TIM_PWM_Start(motor->htim, motor->chan2);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	4619      	mov	r1, r3
 8001890:	4610      	mov	r0, r2
 8001892:	f001 fc75 	bl	8003180 <HAL_TIM_PWM_Start>
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <HAL_MspInit>:
=======
 8001430:	b672      	cpsid	i
}
 8001432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001434:	e7fe      	b.n	8001434 <Error_Handler+0x8>
	...

08001438 <HAL_MspInit>:
>>>>>>> parent of 2b78fa3 (line sensor)
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
=======
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
>>>>>>> parent of 2b78fa3 (line sensor)
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <HAL_MspInit+0x4c>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	4a0f      	ldr	r2, [pc, #60]	; (80018ec <HAL_MspInit+0x4c>)
 80018b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b4:	6453      	str	r3, [r2, #68]	; 0x44
 80018b6:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <HAL_MspInit+0x4c>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	603b      	str	r3, [r7, #0]
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <HAL_MspInit+0x4c>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	4a08      	ldr	r2, [pc, #32]	; (80018ec <HAL_MspInit+0x4c>)
 80018cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d0:	6413      	str	r3, [r2, #64]	; 0x40
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <HAL_MspInit+0x4c>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018da:	603b      	str	r3, [r7, #0]
 80018dc:	683b      	ldr	r3, [r7, #0]
=======
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <HAL_MspInit+0x4c>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	4a0f      	ldr	r2, [pc, #60]	; (8001484 <HAL_MspInit+0x4c>)
 8001448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800144c:	6453      	str	r3, [r2, #68]	; 0x44
 800144e:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <HAL_MspInit+0x4c>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <HAL_MspInit+0x4c>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	4a08      	ldr	r2, [pc, #32]	; (8001484 <HAL_MspInit+0x4c>)
 8001464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001468:	6413      	str	r3, [r2, #64]	; 0x40
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_MspInit+0x4c>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	683b      	ldr	r3, [r7, #0]
>>>>>>> parent of 2b78fa3 (line sensor)
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800

080018f0 <HAL_I2C_MspInit>:
=======
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40023800 	.word	0x40023800

08001488 <HAL_I2C_MspInit>:
>>>>>>> parent of 2b78fa3 (line sensor)
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
<<<<<<< HEAD
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08a      	sub	sp, #40	; 0x28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a19      	ldr	r2, [pc, #100]	; (8001974 <HAL_I2C_MspInit+0x84>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d12b      	bne.n	800196a <HAL_I2C_MspInit+0x7a>
=======
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	; 0x28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a19      	ldr	r2, [pc, #100]	; (800150c <HAL_I2C_MspInit+0x84>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d12b      	bne.n	8001502 <HAL_I2C_MspInit+0x7a>
>>>>>>> parent of 2b78fa3 (line sensor)
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
<<<<<<< HEAD
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	4b18      	ldr	r3, [pc, #96]	; (8001978 <HAL_I2C_MspInit+0x88>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a17      	ldr	r2, [pc, #92]	; (8001978 <HAL_I2C_MspInit+0x88>)
 800191c:	f043 0302 	orr.w	r3, r3, #2
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <HAL_I2C_MspInit+0x88>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	693b      	ldr	r3, [r7, #16]
=======
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	4b18      	ldr	r3, [pc, #96]	; (8001510 <HAL_I2C_MspInit+0x88>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a17      	ldr	r2, [pc, #92]	; (8001510 <HAL_I2C_MspInit+0x88>)
 80014b4:	f043 0302 	orr.w	r3, r3, #2
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <HAL_I2C_MspInit+0x88>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]
>>>>>>> parent of 2b78fa3 (line sensor)
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
<<<<<<< HEAD
 800192e:	23c0      	movs	r3, #192	; 0xc0
 8001930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001932:	2312      	movs	r3, #18
 8001934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193a:	2303      	movs	r3, #3
 800193c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800193e:	2304      	movs	r3, #4
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4619      	mov	r1, r3
 8001948:	480c      	ldr	r0, [pc, #48]	; (800197c <HAL_I2C_MspInit+0x8c>)
 800194a:	f000 fc37 	bl	80021bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <HAL_I2C_MspInit+0x88>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	4a08      	ldr	r2, [pc, #32]	; (8001978 <HAL_I2C_MspInit+0x88>)
 8001958:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800195c:	6413      	str	r3, [r2, #64]	; 0x40
 800195e:	4b06      	ldr	r3, [pc, #24]	; (8001978 <HAL_I2C_MspInit+0x88>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
=======
 80014c6:	23c0      	movs	r3, #192	; 0xc0
 80014c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ca:	2312      	movs	r3, #18
 80014cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d2:	2303      	movs	r3, #3
 80014d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014d6:	2304      	movs	r3, #4
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4619      	mov	r1, r3
 80014e0:	480c      	ldr	r0, [pc, #48]	; (8001514 <HAL_I2C_MspInit+0x8c>)
 80014e2:	f000 fb27 	bl	8001b34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_I2C_MspInit+0x88>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	4a08      	ldr	r2, [pc, #32]	; (8001510 <HAL_I2C_MspInit+0x88>)
 80014f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014f4:	6413      	str	r3, [r2, #64]	; 0x40
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_I2C_MspInit+0x88>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
>>>>>>> parent of 2b78fa3 (line sensor)
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
<<<<<<< HEAD
 800196a:	bf00      	nop
 800196c:	3728      	adds	r7, #40	; 0x28
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40005400 	.word	0x40005400
 8001978:	40023800 	.word	0x40023800
 800197c:	40020400 	.word	0x40020400

08001980 <HAL_TIM_IC_MspInit>:
=======
 8001502:	bf00      	nop
 8001504:	3728      	adds	r7, #40	; 0x28
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40005400 	.word	0x40005400
 8001510:	40023800 	.word	0x40023800
 8001514:	40020400 	.word	0x40020400

08001518 <HAL_TIM_IC_MspInit>:
>>>>>>> parent of 2b78fa3 (line sensor)
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
<<<<<<< HEAD
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	; 0x28
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a1d      	ldr	r2, [pc, #116]	; (8001a14 <HAL_TIM_IC_MspInit+0x94>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d134      	bne.n	8001a0c <HAL_TIM_IC_MspInit+0x8c>
=======
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a1d      	ldr	r2, [pc, #116]	; (80015ac <HAL_TIM_IC_MspInit+0x94>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d134      	bne.n	80015a4 <HAL_TIM_IC_MspInit+0x8c>
>>>>>>> parent of 2b78fa3 (line sensor)
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
<<<<<<< HEAD
 80019a2:	2300      	movs	r3, #0
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	4b1c      	ldr	r3, [pc, #112]	; (8001a18 <HAL_TIM_IC_MspInit+0x98>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019aa:	4a1b      	ldr	r2, [pc, #108]	; (8001a18 <HAL_TIM_IC_MspInit+0x98>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	6453      	str	r3, [r2, #68]	; 0x44
 80019b2:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <HAL_TIM_IC_MspInit+0x98>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <HAL_TIM_IC_MspInit+0x98>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4a14      	ldr	r2, [pc, #80]	; (8001a18 <HAL_TIM_IC_MspInit+0x98>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_TIM_IC_MspInit+0x98>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
=======
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <HAL_TIM_IC_MspInit+0x98>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	4a1b      	ldr	r2, [pc, #108]	; (80015b0 <HAL_TIM_IC_MspInit+0x98>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6453      	str	r3, [r2, #68]	; 0x44
 800154a:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <HAL_TIM_IC_MspInit+0x98>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_TIM_IC_MspInit+0x98>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a14      	ldr	r2, [pc, #80]	; (80015b0 <HAL_TIM_IC_MspInit+0x98>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_TIM_IC_MspInit+0x98>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
>>>>>>> parent of 2b78fa3 (line sensor)
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
<<<<<<< HEAD
 80019da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e0:	2302      	movs	r3, #2
 80019e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e8:	2300      	movs	r3, #0
 80019ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019ec:	2301      	movs	r3, #1
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	4619      	mov	r1, r3
 80019f6:	4809      	ldr	r0, [pc, #36]	; (8001a1c <HAL_TIM_IC_MspInit+0x9c>)
 80019f8:	f000 fbe0 	bl	80021bc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80019fc:	2200      	movs	r2, #0
 80019fe:	2100      	movs	r1, #0
 8001a00:	201b      	movs	r0, #27
 8001a02:	f000 fb12 	bl	800202a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001a06:	201b      	movs	r0, #27
 8001a08:	f000 fb2b 	bl	8002062 <HAL_NVIC_EnableIRQ>
=======
 8001572:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001584:	2301      	movs	r3, #1
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	4809      	ldr	r0, [pc, #36]	; (80015b4 <HAL_TIM_IC_MspInit+0x9c>)
 8001590:	f000 fad0 	bl	8001b34 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001594:	2200      	movs	r2, #0
 8001596:	2100      	movs	r1, #0
 8001598:	201b      	movs	r0, #27
 800159a:	f000 fa94 	bl	8001ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800159e:	201b      	movs	r0, #27
 80015a0:	f000 faad 	bl	8001afe <HAL_NVIC_EnableIRQ>
>>>>>>> parent of 2b78fa3 (line sensor)
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
<<<<<<< HEAD
 8001a0c:	bf00      	nop
 8001a0e:	3728      	adds	r7, #40	; 0x28
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40010000 	.word	0x40010000
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40020000 	.word	0x40020000

08001a20 <HAL_TIM_Base_MspInit>:
=======
 80015a4:	bf00      	nop
 80015a6:	3728      	adds	r7, #40	; 0x28
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40010000 	.word	0x40010000
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40020000 	.word	0x40020000

080015b8 <HAL_TIM_Base_MspInit>:
>>>>>>> parent of 2b78fa3 (line sensor)
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
<<<<<<< HEAD
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a40:	d116      	bne.n	8001a70 <HAL_TIM_Base_MspInit+0x50>
=======
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	; 0x28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015d8:	d10e      	bne.n	80015f8 <HAL_TIM_Base_MspInit+0x40>
>>>>>>> parent of 2b78fa3 (line sensor)
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
<<<<<<< HEAD
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	4b29      	ldr	r3, [pc, #164]	; (8001aec <HAL_TIM_Base_MspInit+0xcc>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	4a28      	ldr	r2, [pc, #160]	; (8001aec <HAL_TIM_Base_MspInit+0xcc>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6413      	str	r3, [r2, #64]	; 0x40
 8001a52:	4b26      	ldr	r3, [pc, #152]	; (8001aec <HAL_TIM_Base_MspInit+0xcc>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2100      	movs	r1, #0
 8001a62:	201c      	movs	r0, #28
 8001a64:	f000 fae1 	bl	800202a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a68:	201c      	movs	r0, #28
 8001a6a:	f000 fafa 	bl	8002062 <HAL_NVIC_EnableIRQ>
=======
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	4b25      	ldr	r3, [pc, #148]	; (8001674 <HAL_TIM_Base_MspInit+0xbc>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	4a24      	ldr	r2, [pc, #144]	; (8001674 <HAL_TIM_Base_MspInit+0xbc>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ea:	4b22      	ldr	r3, [pc, #136]	; (8001674 <HAL_TIM_Base_MspInit+0xbc>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]
>>>>>>> parent of 2b78fa3 (line sensor)
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
<<<<<<< HEAD
 8001a6e:	e038      	b.n	8001ae2 <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM5)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a1e      	ldr	r2, [pc, #120]	; (8001af0 <HAL_TIM_Base_MspInit+0xd0>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d133      	bne.n	8001ae2 <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <HAL_TIM_Base_MspInit+0xcc>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	4a1a      	ldr	r2, [pc, #104]	; (8001aec <HAL_TIM_Base_MspInit+0xcc>)
 8001a84:	f043 0308 	orr.w	r3, r3, #8
 8001a88:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8a:	4b18      	ldr	r3, [pc, #96]	; (8001aec <HAL_TIM_Base_MspInit+0xcc>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	4b14      	ldr	r3, [pc, #80]	; (8001aec <HAL_TIM_Base_MspInit+0xcc>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a13      	ldr	r2, [pc, #76]	; (8001aec <HAL_TIM_Base_MspInit+0xcc>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b11      	ldr	r3, [pc, #68]	; (8001aec <HAL_TIM_Base_MspInit+0xcc>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac6:	f107 0314 	add.w	r3, r7, #20
 8001aca:	4619      	mov	r1, r3
 8001acc:	4809      	ldr	r0, [pc, #36]	; (8001af4 <HAL_TIM_Base_MspInit+0xd4>)
 8001ace:	f000 fb75 	bl	80021bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	2032      	movs	r0, #50	; 0x32
 8001ad8:	f000 faa7 	bl	800202a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001adc:	2032      	movs	r0, #50	; 0x32
 8001ade:	f000 fac0 	bl	8002062 <HAL_NVIC_EnableIRQ>
}
 8001ae2:	bf00      	nop
 8001ae4:	3728      	adds	r7, #40	; 0x28
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40000c00 	.word	0x40000c00
 8001af4:	40020000 	.word	0x40020000

08001af8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 030c 	add.w	r3, r7, #12
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b18:	d11d      	bne.n	8001b56 <HAL_TIM_MspPostInit+0x5e>
=======
 80015f6:	e038      	b.n	800166a <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM5)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a1e      	ldr	r2, [pc, #120]	; (8001678 <HAL_TIM_Base_MspInit+0xc0>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d133      	bne.n	800166a <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <HAL_TIM_Base_MspInit+0xbc>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	4a1a      	ldr	r2, [pc, #104]	; (8001674 <HAL_TIM_Base_MspInit+0xbc>)
 800160c:	f043 0308 	orr.w	r3, r3, #8
 8001610:	6413      	str	r3, [r2, #64]	; 0x40
 8001612:	4b18      	ldr	r3, [pc, #96]	; (8001674 <HAL_TIM_Base_MspInit+0xbc>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	4b14      	ldr	r3, [pc, #80]	; (8001674 <HAL_TIM_Base_MspInit+0xbc>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a13      	ldr	r2, [pc, #76]	; (8001674 <HAL_TIM_Base_MspInit+0xbc>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <HAL_TIM_Base_MspInit+0xbc>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800163a:	2301      	movs	r3, #1
 800163c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001646:	2300      	movs	r3, #0
 8001648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800164a:	2302      	movs	r3, #2
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4619      	mov	r1, r3
 8001654:	4809      	ldr	r0, [pc, #36]	; (800167c <HAL_TIM_Base_MspInit+0xc4>)
 8001656:	f000 fa6d 	bl	8001b34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	2032      	movs	r0, #50	; 0x32
 8001660:	f000 fa31 	bl	8001ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001664:	2032      	movs	r0, #50	; 0x32
 8001666:	f000 fa4a 	bl	8001afe <HAL_NVIC_EnableIRQ>
}
 800166a:	bf00      	nop
 800166c:	3728      	adds	r7, #40	; 0x28
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800
 8001678:	40000c00 	.word	0x40000c00
 800167c:	40020000 	.word	0x40020000

08001680 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 030c 	add.w	r3, r7, #12
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016a0:	d11d      	bne.n	80016de <HAL_TIM_MspPostInit+0x5e>
>>>>>>> parent of 2b78fa3 (line sensor)
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <HAL_TIM_MspPostInit+0x68>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a0f      	ldr	r2, [pc, #60]	; (8001b60 <HAL_TIM_MspPostInit+0x68>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <HAL_TIM_MspPostInit+0x68>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	60bb      	str	r3, [r7, #8]
 8001b34:	68bb      	ldr	r3, [r7, #8]
=======
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <HAL_TIM_MspPostInit+0x68>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a0f      	ldr	r2, [pc, #60]	; (80016e8 <HAL_TIM_MspPostInit+0x68>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b0d      	ldr	r3, [pc, #52]	; (80016e8 <HAL_TIM_MspPostInit+0x68>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
>>>>>>> parent of 2b78fa3 (line sensor)
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
<<<<<<< HEAD
 8001b36:	232e      	movs	r3, #46	; 0x2e
 8001b38:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b46:	2301      	movs	r3, #1
 8001b48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4a:	f107 030c 	add.w	r3, r7, #12
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4804      	ldr	r0, [pc, #16]	; (8001b64 <HAL_TIM_MspPostInit+0x6c>)
 8001b52:	f000 fb33 	bl	80021bc <HAL_GPIO_Init>
=======
 80016be:	232e      	movs	r3, #46	; 0x2e
 80016c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c2:	2302      	movs	r3, #2
 80016c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016ce:	2301      	movs	r3, #1
 80016d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d2:	f107 030c 	add.w	r3, r7, #12
 80016d6:	4619      	mov	r1, r3
 80016d8:	4804      	ldr	r0, [pc, #16]	; (80016ec <HAL_TIM_MspPostInit+0x6c>)
 80016da:	f000 fa2b 	bl	8001b34 <HAL_GPIO_Init>
>>>>>>> parent of 2b78fa3 (line sensor)
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
<<<<<<< HEAD
 8001b56:	bf00      	nop
 8001b58:	3720      	adds	r7, #32
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40020000 	.word	0x40020000

08001b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08a      	sub	sp, #40	; 0x28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a1d      	ldr	r2, [pc, #116]	; (8001bfc <HAL_UART_MspInit+0x94>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d134      	bne.n	8001bf4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
 8001b8e:	4b1c      	ldr	r3, [pc, #112]	; (8001c00 <HAL_UART_MspInit+0x98>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	4a1b      	ldr	r2, [pc, #108]	; (8001c00 <HAL_UART_MspInit+0x98>)
 8001b94:	f043 0310 	orr.w	r3, r3, #16
 8001b98:	6453      	str	r3, [r2, #68]	; 0x44
 8001b9a:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <HAL_UART_MspInit+0x98>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9e:	f003 0310 	and.w	r3, r3, #16
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <HAL_UART_MspInit+0x98>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4a14      	ldr	r2, [pc, #80]	; (8001c00 <HAL_UART_MspInit+0x98>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_UART_MspInit+0x98>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8001bc2:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bd4:	2307      	movs	r3, #7
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4809      	ldr	r0, [pc, #36]	; (8001c04 <HAL_UART_MspInit+0x9c>)
 8001be0:	f000 faec 	bl	80021bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001be4:	2200      	movs	r2, #0
 8001be6:	2100      	movs	r1, #0
 8001be8:	2025      	movs	r0, #37	; 0x25
 8001bea:	f000 fa1e 	bl	800202a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bee:	2025      	movs	r0, #37	; 0x25
 8001bf0:	f000 fa37 	bl	8002062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001bf4:	bf00      	nop
 8001bf6:	3728      	adds	r7, #40	; 0x28
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40011000 	.word	0x40011000
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40020000 	.word	0x40020000

08001c08 <NMI_Handler>:
=======
 80016de:	bf00      	nop
 80016e0:	3720      	adds	r7, #32
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40020000 	.word	0x40020000

080016f0 <NMI_Handler>:
>>>>>>> parent of 2b78fa3 (line sensor)
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
=======
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
>>>>>>> parent of 2b78fa3 (line sensor)
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 8001c0c:	e7fe      	b.n	8001c0c <NMI_Handler+0x4>

08001c0e <HardFault_Handler>:
=======
 80016f4:	e7fe      	b.n	80016f4 <NMI_Handler+0x4>

080016f6 <HardFault_Handler>:
>>>>>>> parent of 2b78fa3 (line sensor)

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0
=======
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
>>>>>>> parent of 2b78fa3 (line sensor)
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001c12:	e7fe      	b.n	8001c12 <HardFault_Handler+0x4>

08001c14 <MemManage_Handler>:
=======
 80016fa:	e7fe      	b.n	80016fa <HardFault_Handler+0x4>

080016fc <MemManage_Handler>:
>>>>>>> parent of 2b78fa3 (line sensor)

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
=======
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
>>>>>>> parent of 2b78fa3 (line sensor)
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001c18:	e7fe      	b.n	8001c18 <MemManage_Handler+0x4>

08001c1a <BusFault_Handler>:
=======
 8001700:	e7fe      	b.n	8001700 <MemManage_Handler+0x4>

08001702 <BusFault_Handler>:
>>>>>>> parent of 2b78fa3 (line sensor)

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0
=======
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
>>>>>>> parent of 2b78fa3 (line sensor)
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001c1e:	e7fe      	b.n	8001c1e <BusFault_Handler+0x4>

08001c20 <UsageFault_Handler>:
=======
 8001706:	e7fe      	b.n	8001706 <BusFault_Handler+0x4>

08001708 <UsageFault_Handler>:
>>>>>>> parent of 2b78fa3 (line sensor)

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
=======
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
>>>>>>> parent of 2b78fa3 (line sensor)
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001c24:	e7fe      	b.n	8001c24 <UsageFault_Handler+0x4>

08001c26 <SVC_Handler>:
=======
 800170c:	e7fe      	b.n	800170c <UsageFault_Handler+0x4>

0800170e <SVC_Handler>:
>>>>>>> parent of 2b78fa3 (line sensor)

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0
=======
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
>>>>>>> parent of 2b78fa3 (line sensor)

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <DebugMon_Handler>:
=======
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <DebugMon_Handler>:
>>>>>>> parent of 2b78fa3 (line sensor)

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
=======
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
>>>>>>> parent of 2b78fa3 (line sensor)

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <PendSV_Handler>:
=======
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <PendSV_Handler>:
>>>>>>> parent of 2b78fa3 (line sensor)

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0
=======
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
>>>>>>> parent of 2b78fa3 (line sensor)

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <SysTick_Handler>:
=======
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <SysTick_Handler>:
>>>>>>> parent of 2b78fa3 (line sensor)

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
=======
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
>>>>>>> parent of 2b78fa3 (line sensor)
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 8001c54:	f000 f8ee 	bl	8001e34 <HAL_IncTick>
=======
 800173c:	f000 f8a4 	bl	8001888 <HAL_IncTick>
>>>>>>> parent of 2b78fa3 (line sensor)
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <TIM1_CC_IRQHandler>:
=======
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}

08001744 <TIM1_CC_IRQHandler>:
>>>>>>> parent of 2b78fa3 (line sensor)

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
<<<<<<< HEAD
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
=======
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
>>>>>>> parent of 2b78fa3 (line sensor)
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
<<<<<<< HEAD
 8001c60:	4802      	ldr	r0, [pc, #8]	; (8001c6c <TIM1_CC_IRQHandler+0x10>)
 8001c62:	f001 fd75 	bl	8003750 <HAL_TIM_IRQHandler>
=======
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <TIM1_CC_IRQHandler+0x10>)
 800174a:	f001 fbf9 	bl	8002f40 <HAL_TIM_IRQHandler>
>>>>>>> parent of 2b78fa3 (line sensor)
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
<<<<<<< HEAD
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	200000e0 	.word	0x200000e0

08001c70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c74:	4802      	ldr	r0, [pc, #8]	; (8001c80 <TIM2_IRQHandler+0x10>)
 8001c76:	f001 fd6b 	bl	8003750 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000128 	.word	0x20000128

08001c84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c88:	4802      	ldr	r0, [pc, #8]	; (8001c94 <USART1_IRQHandler+0x10>)
 8001c8a:	f002 ff4b 	bl	8004b24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	200001b8 	.word	0x200001b8

08001c98 <TIM5_IRQHandler>:
=======
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	2000007c 	.word	0x2000007c

08001758 <TIM5_IRQHandler>:
>>>>>>> parent of 2b78fa3 (line sensor)

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
<<<<<<< HEAD
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
=======
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
>>>>>>> parent of 2b78fa3 (line sensor)
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
<<<<<<< HEAD
 8001c9c:	4802      	ldr	r0, [pc, #8]	; (8001ca8 <TIM5_IRQHandler+0x10>)
 8001c9e:	f001 fd57 	bl	8003750 <HAL_TIM_IRQHandler>
=======
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <TIM5_IRQHandler+0x10>)
 800175e:	f001 fbef 	bl	8002f40 <HAL_TIM_IRQHandler>
>>>>>>> parent of 2b78fa3 (line sensor)
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
<<<<<<< HEAD
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000170 	.word	0x20000170

08001cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cb4:	4a14      	ldr	r2, [pc, #80]	; (8001d08 <_sbrk+0x5c>)
 8001cb6:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <_sbrk+0x60>)
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cc0:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <_sbrk+0x64>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d102      	bne.n	8001cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <_sbrk+0x64>)
 8001cca:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <_sbrk+0x68>)
 8001ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cce:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <_sbrk+0x64>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d207      	bcs.n	8001cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cdc:	f003 fe8a 	bl	80059f4 <__errno>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	220c      	movs	r2, #12
 8001ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cea:	e009      	b.n	8001d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cec:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <_sbrk+0x64>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cf2:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <_sbrk+0x64>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	4a05      	ldr	r2, [pc, #20]	; (8001d10 <_sbrk+0x64>)
 8001cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20020000 	.word	0x20020000
 8001d0c:	00000400 	.word	0x00000400
 8001d10:	2000021c 	.word	0x2000021c
 8001d14:	20000238 	.word	0x20000238

08001d18 <SystemInit>:
=======
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	2000010c 	.word	0x2000010c

0800176c <SystemInit>:
>>>>>>> parent of 2b78fa3 (line sensor)
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< HEAD
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <SystemInit+0x20>)
 8001d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d22:	4a05      	ldr	r2, [pc, #20]	; (8001d38 <SystemInit+0x20>)
 8001d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <SystemInit+0x20>)
 8001772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001776:	4a05      	ldr	r2, [pc, #20]	; (800178c <SystemInit+0x20>)
 8001778:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800177c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> parent of 2b78fa3 (line sensor)

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <Reset_Handler>:
 8001d3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d74 <LoopFillZerobss+0x12>
 8001d40:	480d      	ldr	r0, [pc, #52]	; (8001d78 <LoopFillZerobss+0x16>)
 8001d42:	490e      	ldr	r1, [pc, #56]	; (8001d7c <LoopFillZerobss+0x1a>)
 8001d44:	4a0e      	ldr	r2, [pc, #56]	; (8001d80 <LoopFillZerobss+0x1e>)
 8001d46:	2300      	movs	r3, #0
 8001d48:	e002      	b.n	8001d50 <LoopCopyDataInit>

08001d4a <CopyDataInit>:
 8001d4a:	58d4      	ldr	r4, [r2, r3]
 8001d4c:	50c4      	str	r4, [r0, r3]
 8001d4e:	3304      	adds	r3, #4

08001d50 <LoopCopyDataInit>:
 8001d50:	18c4      	adds	r4, r0, r3
 8001d52:	428c      	cmp	r4, r1
 8001d54:	d3f9      	bcc.n	8001d4a <CopyDataInit>
 8001d56:	4a0b      	ldr	r2, [pc, #44]	; (8001d84 <LoopFillZerobss+0x22>)
 8001d58:	4c0b      	ldr	r4, [pc, #44]	; (8001d88 <LoopFillZerobss+0x26>)
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	e001      	b.n	8001d62 <LoopFillZerobss>

08001d5e <FillZerobss>:
 8001d5e:	6013      	str	r3, [r2, #0]
 8001d60:	3204      	adds	r2, #4

08001d62 <LoopFillZerobss>:
 8001d62:	42a2      	cmp	r2, r4
 8001d64:	d3fb      	bcc.n	8001d5e <FillZerobss>
 8001d66:	f7ff ffd7 	bl	8001d18 <SystemInit>
 8001d6a:	f003 fe49 	bl	8005a00 <__libc_init_array>
 8001d6e:	f7ff f95b 	bl	8001028 <main>
 8001d72:	4770      	bx	lr
 8001d74:	20020000 	.word	0x20020000
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	20000070 	.word	0x20000070
 8001d80:	08006850 	.word	0x08006850
 8001d84:	20000070 	.word	0x20000070
 8001d88:	20000234 	.word	0x20000234

08001d8c <ADC_IRQHandler>:
 8001d8c:	e7fe      	b.n	8001d8c <ADC_IRQHandler>
	...

08001d90 <HAL_Init>:
=======
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001790:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001794:	480d      	ldr	r0, [pc, #52]	; (80017cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001796:	490e      	ldr	r1, [pc, #56]	; (80017d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001798:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800179a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800179c:	e002      	b.n	80017a4 <LoopCopyDataInit>

0800179e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800179e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017a2:	3304      	adds	r3, #4

080017a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a8:	d3f9      	bcc.n	800179e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017aa:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017ac:	4c0b      	ldr	r4, [pc, #44]	; (80017dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80017ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b0:	e001      	b.n	80017b6 <LoopFillZerobss>

080017b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b4:	3204      	adds	r2, #4

080017b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b8:	d3fb      	bcc.n	80017b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017ba:	f7ff ffd7 	bl	800176c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017be:	f002 fc99 	bl	80040f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017c2:	f7ff fb7d 	bl	8000ec0 <main>
  bx  lr    
 80017c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80017d4:	0800418c 	.word	0x0800418c
  ldr r2, =_sbss
 80017d8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80017dc:	20000170 	.word	0x20000170

080017e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017e0:	e7fe      	b.n	80017e0 <ADC_IRQHandler>
	...

080017e4 <HAL_Init>:
>>>>>>> parent of 2b78fa3 (line sensor)
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d94:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <HAL_Init+0x40>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a0d      	ldr	r2, [pc, #52]	; (8001dd0 <HAL_Init+0x40>)
 8001d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d9e:	6013      	str	r3, [r2, #0]
=======
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017e8:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <HAL_Init+0x40>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a0d      	ldr	r2, [pc, #52]	; (8001824 <HAL_Init+0x40>)
 80017ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017f2:	6013      	str	r3, [r2, #0]
>>>>>>> parent of 2b78fa3 (line sensor)
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< HEAD
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_Init+0x40>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <HAL_Init+0x40>)
 8001da6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001daa:	6013      	str	r3, [r2, #0]
=======
 80017f4:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <HAL_Init+0x40>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <HAL_Init+0x40>)
 80017fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017fe:	6013      	str	r3, [r2, #0]
>>>>>>> parent of 2b78fa3 (line sensor)
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 8001dac:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <HAL_Init+0x40>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a07      	ldr	r2, [pc, #28]	; (8001dd0 <HAL_Init+0x40>)
 8001db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db6:	6013      	str	r3, [r2, #0]
=======
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <HAL_Init+0x40>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a07      	ldr	r2, [pc, #28]	; (8001824 <HAL_Init+0x40>)
 8001806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800180a:	6013      	str	r3, [r2, #0]
>>>>>>> parent of 2b78fa3 (line sensor)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8001db8:	2003      	movs	r0, #3
 8001dba:	f000 f92b 	bl	8002014 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dbe:	200f      	movs	r0, #15
 8001dc0:	f000 f808 	bl	8001dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dc4:	f7ff fd6c 	bl	80018a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40023c00 	.word	0x40023c00

08001dd4 <HAL_InitTick>:
=======
 800180c:	2003      	movs	r0, #3
 800180e:	f000 f94f 	bl	8001ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001812:	200f      	movs	r0, #15
 8001814:	f000 f808 	bl	8001828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001818:	f7ff fe0e 	bl	8001438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40023c00 	.word	0x40023c00

08001828 <HAL_InitTick>:
>>>>>>> parent of 2b78fa3 (line sensor)
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ddc:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <HAL_InitTick+0x54>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <HAL_InitTick+0x58>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	4619      	mov	r1, r3
 8001de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df2:	4618      	mov	r0, r3
 8001df4:	f000 f943 	bl	800207e <HAL_SYSTICK_Config>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e00e      	b.n	8001e20 <HAL_InitTick+0x4c>
=======
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001830:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_InitTick+0x54>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <HAL_InitTick+0x58>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	4619      	mov	r1, r3
 800183a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800183e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001842:	fbb2 f3f3 	udiv	r3, r2, r3
 8001846:	4618      	mov	r0, r3
 8001848:	f000 f967 	bl	8001b1a <HAL_SYSTICK_Config>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e00e      	b.n	8001874 <HAL_InitTick+0x4c>
>>>>>>> parent of 2b78fa3 (line sensor)
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b0f      	cmp	r3, #15
 8001e06:	d80a      	bhi.n	8001e1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e10:	f000 f90b 	bl	800202a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e14:	4a06      	ldr	r2, [pc, #24]	; (8001e30 <HAL_InitTick+0x5c>)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6013      	str	r3, [r2, #0]
=======
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b0f      	cmp	r3, #15
 800185a:	d80a      	bhi.n	8001872 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800185c:	2200      	movs	r2, #0
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	f04f 30ff 	mov.w	r0, #4294967295
 8001864:	f000 f92f 	bl	8001ac6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001868:	4a06      	ldr	r2, [pc, #24]	; (8001884 <HAL_InitTick+0x5c>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6013      	str	r3, [r2, #0]
>>>>>>> parent of 2b78fa3 (line sensor)
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	e000      	b.n	8001e20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20000000 	.word	0x20000000
 8001e2c:	20000008 	.word	0x20000008
 8001e30:	20000004 	.word	0x20000004

08001e34 <HAL_IncTick>:
=======
 800186e:	2300      	movs	r3, #0
 8001870:	e000      	b.n	8001874 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
}
 8001874:	4618      	mov	r0, r3
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000000 	.word	0x20000000
 8001880:	20000008 	.word	0x20000008
 8001884:	20000004 	.word	0x20000004

08001888 <HAL_IncTick>:
>>>>>>> parent of 2b78fa3 (line sensor)
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <HAL_IncTick+0x20>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_IncTick+0x24>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4413      	add	r3, r2
 8001e44:	4a04      	ldr	r2, [pc, #16]	; (8001e58 <HAL_IncTick+0x24>)
 8001e46:	6013      	str	r3, [r2, #0]
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	20000008 	.word	0x20000008
 8001e58:	20000220 	.word	0x20000220

08001e5c <HAL_GetTick>:
=======
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_IncTick+0x20>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	461a      	mov	r2, r3
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_IncTick+0x24>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4413      	add	r3, r2
 8001898:	4a04      	ldr	r2, [pc, #16]	; (80018ac <HAL_IncTick+0x24>)
 800189a:	6013      	str	r3, [r2, #0]
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	20000008 	.word	0x20000008
 80018ac:	2000016c 	.word	0x2000016c

080018b0 <HAL_GetTick>:
>>>>>>> parent of 2b78fa3 (line sensor)
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e60:	4b03      	ldr	r3, [pc, #12]	; (8001e70 <HAL_GetTick+0x14>)
 8001e62:	681b      	ldr	r3, [r3, #0]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	20000220 	.word	0x20000220

08001e74 <__NVIC_SetPriorityGrouping>:
=======
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return uwTick;
 80018b4:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <HAL_GetTick+0x14>)
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	2000016c 	.word	0x2000016c

080018c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d0:	f7ff ffee 	bl	80018b0 <HAL_GetTick>
 80018d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e0:	d005      	beq.n	80018ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018e2:	4b0a      	ldr	r3, [pc, #40]	; (800190c <HAL_Delay+0x44>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4413      	add	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018ee:	bf00      	nop
 80018f0:	f7ff ffde 	bl	80018b0 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d8f7      	bhi.n	80018f0 <HAL_Delay+0x28>
  {
  }
}
 8001900:	bf00      	nop
 8001902:	bf00      	nop
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000008 	.word	0x20000008

08001910 <__NVIC_SetPriorityGrouping>:
>>>>>>> parent of 2b78fa3 (line sensor)
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e84:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e90:	4013      	ands	r3, r2
 8001e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ea6:	4a04      	ldr	r2, [pc, #16]	; (8001eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	60d3      	str	r3, [r2, #12]
}
 8001eac:	bf00      	nop
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <__NVIC_GetPriorityGrouping>:
=======
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <__NVIC_SetPriorityGrouping+0x44>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800192c:	4013      	ands	r3, r2
 800192e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001938:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800193c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001942:	4a04      	ldr	r2, [pc, #16]	; (8001954 <__NVIC_SetPriorityGrouping+0x44>)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	60d3      	str	r3, [r2, #12]
}
 8001948:	bf00      	nop
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_GetPriorityGrouping>:
>>>>>>> parent of 2b78fa3 (line sensor)
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec0:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	0a1b      	lsrs	r3, r3, #8
 8001ec6:	f003 0307 	and.w	r3, r3, #7
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <__NVIC_EnableIRQ>:
=======
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800195c:	4b04      	ldr	r3, [pc, #16]	; (8001970 <__NVIC_GetPriorityGrouping+0x18>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	0a1b      	lsrs	r3, r3, #8
 8001962:	f003 0307 	and.w	r3, r3, #7
}
 8001966:	4618      	mov	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <__NVIC_EnableIRQ>:
>>>>>>> parent of 2b78fa3 (line sensor)
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	db0b      	blt.n	8001f02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	f003 021f 	and.w	r2, r3, #31
 8001ef0:	4907      	ldr	r1, [pc, #28]	; (8001f10 <__NVIC_EnableIRQ+0x38>)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	095b      	lsrs	r3, r3, #5
 8001ef8:	2001      	movs	r0, #1
 8001efa:	fa00 f202 	lsl.w	r2, r0, r2
 8001efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000e100 	.word	0xe000e100

08001f14 <__NVIC_SetPriority>:
=======
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	2b00      	cmp	r3, #0
 8001984:	db0b      	blt.n	800199e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	f003 021f 	and.w	r2, r3, #31
 800198c:	4907      	ldr	r1, [pc, #28]	; (80019ac <__NVIC_EnableIRQ+0x38>)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	095b      	lsrs	r3, r3, #5
 8001994:	2001      	movs	r0, #1
 8001996:	fa00 f202 	lsl.w	r2, r0, r2
 800199a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000e100 	.word	0xe000e100

080019b0 <__NVIC_SetPriority>:
>>>>>>> parent of 2b78fa3 (line sensor)
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	6039      	str	r1, [r7, #0]
 8001f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	db0a      	blt.n	8001f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	490c      	ldr	r1, [pc, #48]	; (8001f60 <__NVIC_SetPriority+0x4c>)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	0112      	lsls	r2, r2, #4
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	440b      	add	r3, r1
 8001f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	6039      	str	r1, [r7, #0]
 80019ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	db0a      	blt.n	80019da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	490c      	ldr	r1, [pc, #48]	; (80019fc <__NVIC_SetPriority+0x4c>)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	0112      	lsls	r2, r2, #4
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	440b      	add	r3, r1
 80019d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> parent of 2b78fa3 (line sensor)
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8001f3c:	e00a      	b.n	8001f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	4908      	ldr	r1, [pc, #32]	; (8001f64 <__NVIC_SetPriority+0x50>)
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	3b04      	subs	r3, #4
 8001f4c:	0112      	lsls	r2, r2, #4
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	440b      	add	r3, r1
 8001f52:	761a      	strb	r2, [r3, #24]
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	e000e100 	.word	0xe000e100
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <NVIC_EncodePriority>:
=======
 80019d8:	e00a      	b.n	80019f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	4908      	ldr	r1, [pc, #32]	; (8001a00 <__NVIC_SetPriority+0x50>)
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	3b04      	subs	r3, #4
 80019e8:	0112      	lsls	r2, r2, #4
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	440b      	add	r3, r1
 80019ee:	761a      	strb	r2, [r3, #24]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	e000e100 	.word	0xe000e100
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <NVIC_EncodePriority>:
>>>>>>> parent of 2b78fa3 (line sensor)
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8001f68:	b480      	push	{r7}
 8001f6a:	b089      	sub	sp, #36	; 0x24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	61fb      	str	r3, [r7, #28]
=======
 8001a04:	b480      	push	{r7}
 8001a06:	b089      	sub	sp, #36	; 0x24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	61fb      	str	r3, [r7, #28]
>>>>>>> parent of 2b78fa3 (line sensor)
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f1c3 0307 	rsb	r3, r3, #7
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	bf28      	it	cs
 8001f86:	2304      	movcs	r3, #4
 8001f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	2b06      	cmp	r3, #6
 8001f90:	d902      	bls.n	8001f98 <NVIC_EncodePriority+0x30>
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	3b03      	subs	r3, #3
 8001f96:	e000      	b.n	8001f9a <NVIC_EncodePriority+0x32>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43da      	mvns	r2, r3
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	401a      	ands	r2, r3
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fba:	43d9      	mvns	r1, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc0:	4313      	orrs	r3, r2
         );
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3724      	adds	r7, #36	; 0x24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
	...

08001fd0 <SysTick_Config>:
=======
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f1c3 0307 	rsb	r3, r3, #7
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	bf28      	it	cs
 8001a22:	2304      	movcs	r3, #4
 8001a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	2b06      	cmp	r3, #6
 8001a2c:	d902      	bls.n	8001a34 <NVIC_EncodePriority+0x30>
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3b03      	subs	r3, #3
 8001a32:	e000      	b.n	8001a36 <NVIC_EncodePriority+0x32>
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a38:	f04f 32ff 	mov.w	r2, #4294967295
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43da      	mvns	r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	401a      	ands	r2, r3
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	fa01 f303 	lsl.w	r3, r1, r3
 8001a56:	43d9      	mvns	r1, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a5c:	4313      	orrs	r3, r2
         );
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3724      	adds	r7, #36	; 0x24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
	...

08001a6c <SysTick_Config>:
>>>>>>> parent of 2b78fa3 (line sensor)
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fe0:	d301      	bcc.n	8001fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e00f      	b.n	8002006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fe6:	4a0a      	ldr	r2, [pc, #40]	; (8002010 <SysTick_Config+0x40>)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fee:	210f      	movs	r1, #15
 8001ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff4:	f7ff ff8e 	bl	8001f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <SysTick_Config+0x40>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ffe:	4b04      	ldr	r3, [pc, #16]	; (8002010 <SysTick_Config+0x40>)
 8002000:	2207      	movs	r2, #7
 8002002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	e000e010 	.word	0xe000e010

08002014 <HAL_NVIC_SetPriorityGrouping>:
=======
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a7c:	d301      	bcc.n	8001a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e00f      	b.n	8001aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a82:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <SysTick_Config+0x40>)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a8a:	210f      	movs	r1, #15
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a90:	f7ff ff8e 	bl	80019b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <SysTick_Config+0x40>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a9a:	4b04      	ldr	r3, [pc, #16]	; (8001aac <SysTick_Config+0x40>)
 8001a9c:	2207      	movs	r2, #7
 8001a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	e000e010 	.word	0xe000e010

08001ab0 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> parent of 2b78fa3 (line sensor)
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
=======
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 2b78fa3 (line sensor)
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7ff ff29 	bl	8001e74 <__NVIC_SetPriorityGrouping>
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_NVIC_SetPriority>:
=======
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff ff29 	bl	8001910 <__NVIC_SetPriorityGrouping>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_NVIC_SetPriority>:
>>>>>>> parent of 2b78fa3 (line sensor)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 800202a:	b580      	push	{r7, lr}
 800202c:	b086      	sub	sp, #24
 800202e:	af00      	add	r7, sp, #0
 8002030:	4603      	mov	r3, r0
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	607a      	str	r2, [r7, #4]
 8002036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
=======
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b086      	sub	sp, #24
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	4603      	mov	r3, r0
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
 8001ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
>>>>>>> parent of 2b78fa3 (line sensor)
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 800203c:	f7ff ff3e 	bl	8001ebc <__NVIC_GetPriorityGrouping>
 8002040:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	68b9      	ldr	r1, [r7, #8]
 8002046:	6978      	ldr	r0, [r7, #20]
 8002048:	f7ff ff8e 	bl	8001f68 <NVIC_EncodePriority>
 800204c:	4602      	mov	r2, r0
 800204e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002052:	4611      	mov	r1, r2
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff ff5d 	bl	8001f14 <__NVIC_SetPriority>
}
 800205a:	bf00      	nop
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_NVIC_EnableIRQ>:
=======
 8001ad8:	f7ff ff3e 	bl	8001958 <__NVIC_GetPriorityGrouping>
 8001adc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	68b9      	ldr	r1, [r7, #8]
 8001ae2:	6978      	ldr	r0, [r7, #20]
 8001ae4:	f7ff ff8e 	bl	8001a04 <NVIC_EncodePriority>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aee:	4611      	mov	r1, r2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff5d 	bl	80019b0 <__NVIC_SetPriority>
}
 8001af6:	bf00      	nop
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_NVIC_EnableIRQ>:
>>>>>>> parent of 2b78fa3 (line sensor)
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	4603      	mov	r3, r0
 800206a:	71fb      	strb	r3, [r7, #7]
=======
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	4603      	mov	r3, r0
 8001b06:	71fb      	strb	r3, [r7, #7]
>>>>>>> parent of 2b78fa3 (line sensor)
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 800206c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ff31 	bl	8001ed8 <__NVIC_EnableIRQ>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_SYSTICK_Config>:
=======
 8001b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff31 	bl	8001974 <__NVIC_EnableIRQ>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_SYSTICK_Config>:
>>>>>>> parent of 2b78fa3 (line sensor)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff ffa2 	bl	8001fd0 <SysTick_Config>
 800208c:	4603      	mov	r3, r0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b084      	sub	sp, #16
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020a4:	f7ff feda 	bl	8001e5c <HAL_GetTick>
 80020a8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d008      	beq.n	80020c8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2280      	movs	r2, #128	; 0x80
 80020ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e052      	b.n	800216e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0216 	bic.w	r2, r2, #22
 80020d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	695a      	ldr	r2, [r3, #20]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020e6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d103      	bne.n	80020f8 <HAL_DMA_Abort+0x62>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d007      	beq.n	8002108 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0208 	bic.w	r2, r2, #8
 8002106:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0201 	bic.w	r2, r2, #1
 8002116:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002118:	e013      	b.n	8002142 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800211a:	f7ff fe9f 	bl	8001e5c <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b05      	cmp	r3, #5
 8002126:	d90c      	bls.n	8002142 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2220      	movs	r2, #32
 800212c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2203      	movs	r2, #3
 8002132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e015      	b.n	800216e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1e4      	bne.n	800211a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002154:	223f      	movs	r2, #63	; 0x3f
 8002156:	409a      	lsls	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d004      	beq.n	8002194 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2280      	movs	r2, #128	; 0x80
 800218e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e00c      	b.n	80021ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2205      	movs	r2, #5
 8002198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 0201 	bic.w	r2, r2, #1
 80021aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
	...

080021bc <HAL_GPIO_Init>:
=======
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ffa2 	bl	8001a6c <SysTick_Config>
 8001b28:	4603      	mov	r3, r0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <HAL_GPIO_Init>:
>>>>>>> parent of 2b78fa3 (line sensor)
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 80021bc:	b480      	push	{r7}
 80021be:	b089      	sub	sp, #36	; 0x24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61bb      	str	r3, [r7, #24]
=======
 8001b34:	b480      	push	{r7}
 8001b36:	b089      	sub	sp, #36	; 0x24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61bb      	str	r3, [r7, #24]
>>>>>>> parent of 2b78fa3 (line sensor)
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
 80021d6:	e159      	b.n	800248c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021d8:	2201      	movs	r2, #1
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	f040 8148 	bne.w	8002486 <HAL_GPIO_Init+0x2ca>
=======
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
 8001b4e:	e159      	b.n	8001e04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b50:	2201      	movs	r2, #1
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	f040 8148 	bne.w	8001dfe <HAL_GPIO_Init+0x2ca>
>>>>>>> parent of 2b78fa3 (line sensor)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
<<<<<<< HEAD
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d005      	beq.n	800220e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800220a:	2b02      	cmp	r3, #2
 800220c:	d130      	bne.n	8002270 <HAL_GPIO_Init+0xb4>
=======
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d005      	beq.n	8001b86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d130      	bne.n	8001be8 <HAL_GPIO_Init+0xb4>
>>>>>>> parent of 2b78fa3 (line sensor)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< HEAD
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	2203      	movs	r2, #3
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43db      	mvns	r3, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4013      	ands	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4313      	orrs	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002244:	2201      	movs	r2, #1
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	091b      	lsrs	r3, r3, #4
 800225a:	f003 0201 	and.w	r2, r3, #1
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 0303 	and.w	r3, r3, #3
 8002278:	2b03      	cmp	r3, #3
 800227a:	d017      	beq.n	80022ac <HAL_GPIO_Init+0xf0>
=======
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	2203      	movs	r2, #3
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	091b      	lsrs	r3, r3, #4
 8001bd2:	f003 0201 	and.w	r2, r3, #1
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	d017      	beq.n	8001c24 <HAL_GPIO_Init+0xf0>
>>>>>>> parent of 2b78fa3 (line sensor)
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
<<<<<<< HEAD
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	2203      	movs	r2, #3
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	60da      	str	r2, [r3, #12]
=======
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	2203      	movs	r2, #3
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	60da      	str	r2, [r3, #12]
>>>>>>> parent of 2b78fa3 (line sensor)
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d123      	bne.n	8002300 <HAL_GPIO_Init+0x144>
=======
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d123      	bne.n	8001c78 <HAL_GPIO_Init+0x144>
>>>>>>> parent of 2b78fa3 (line sensor)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< HEAD
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	08da      	lsrs	r2, r3, #3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3208      	adds	r2, #8
 80022c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	220f      	movs	r2, #15
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	43db      	mvns	r3, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4013      	ands	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	691a      	ldr	r2, [r3, #16]
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	08da      	lsrs	r2, r3, #3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3208      	adds	r2, #8
 80022fa:	69b9      	ldr	r1, [r7, #24]
 80022fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	08da      	lsrs	r2, r3, #3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3208      	adds	r2, #8
 8001c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	220f      	movs	r2, #15
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	691a      	ldr	r2, [r3, #16]
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	08da      	lsrs	r2, r3, #3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3208      	adds	r2, #8
 8001c72:	69b9      	ldr	r1, [r7, #24]
 8001c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> parent of 2b78fa3 (line sensor)
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	2203      	movs	r2, #3
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 0203 	and.w	r2, r3, #3
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	601a      	str	r2, [r3, #0]
=======
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	2203      	movs	r2, #3
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0203 	and.w	r2, r3, #3
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	601a      	str	r2, [r3, #0]
>>>>>>> parent of 2b78fa3 (line sensor)

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
<<<<<<< HEAD
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 80a2 	beq.w	8002486 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	4b57      	ldr	r3, [pc, #348]	; (80024a4 <HAL_GPIO_Init+0x2e8>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	4a56      	ldr	r2, [pc, #344]	; (80024a4 <HAL_GPIO_Init+0x2e8>)
 800234c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002350:	6453      	str	r3, [r2, #68]	; 0x44
 8002352:	4b54      	ldr	r3, [pc, #336]	; (80024a4 <HAL_GPIO_Init+0x2e8>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800235e:	4a52      	ldr	r2, [pc, #328]	; (80024a8 <HAL_GPIO_Init+0x2ec>)
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	089b      	lsrs	r3, r3, #2
 8002364:	3302      	adds	r3, #2
 8002366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800236a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	220f      	movs	r2, #15
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4013      	ands	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a49      	ldr	r2, [pc, #292]	; (80024ac <HAL_GPIO_Init+0x2f0>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d019      	beq.n	80023be <HAL_GPIO_Init+0x202>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a48      	ldr	r2, [pc, #288]	; (80024b0 <HAL_GPIO_Init+0x2f4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d013      	beq.n	80023ba <HAL_GPIO_Init+0x1fe>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a47      	ldr	r2, [pc, #284]	; (80024b4 <HAL_GPIO_Init+0x2f8>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d00d      	beq.n	80023b6 <HAL_GPIO_Init+0x1fa>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a46      	ldr	r2, [pc, #280]	; (80024b8 <HAL_GPIO_Init+0x2fc>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d007      	beq.n	80023b2 <HAL_GPIO_Init+0x1f6>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a45      	ldr	r2, [pc, #276]	; (80024bc <HAL_GPIO_Init+0x300>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d101      	bne.n	80023ae <HAL_GPIO_Init+0x1f2>
 80023aa:	2304      	movs	r3, #4
 80023ac:	e008      	b.n	80023c0 <HAL_GPIO_Init+0x204>
 80023ae:	2307      	movs	r3, #7
 80023b0:	e006      	b.n	80023c0 <HAL_GPIO_Init+0x204>
 80023b2:	2303      	movs	r3, #3
 80023b4:	e004      	b.n	80023c0 <HAL_GPIO_Init+0x204>
 80023b6:	2302      	movs	r3, #2
 80023b8:	e002      	b.n	80023c0 <HAL_GPIO_Init+0x204>
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <HAL_GPIO_Init+0x204>
 80023be:	2300      	movs	r3, #0
 80023c0:	69fa      	ldr	r2, [r7, #28]
 80023c2:	f002 0203 	and.w	r2, r2, #3
 80023c6:	0092      	lsls	r2, r2, #2
 80023c8:	4093      	lsls	r3, r2
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023d0:	4935      	ldr	r1, [pc, #212]	; (80024a8 <HAL_GPIO_Init+0x2ec>)
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	089b      	lsrs	r3, r3, #2
 80023d6:	3302      	adds	r3, #2
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023de:	4b38      	ldr	r3, [pc, #224]	; (80024c0 <HAL_GPIO_Init+0x304>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	43db      	mvns	r3, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4013      	ands	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002402:	4a2f      	ldr	r2, [pc, #188]	; (80024c0 <HAL_GPIO_Init+0x304>)
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002408:	4b2d      	ldr	r3, [pc, #180]	; (80024c0 <HAL_GPIO_Init+0x304>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800242c:	4a24      	ldr	r2, [pc, #144]	; (80024c0 <HAL_GPIO_Init+0x304>)
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002432:	4b23      	ldr	r3, [pc, #140]	; (80024c0 <HAL_GPIO_Init+0x304>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	43db      	mvns	r3, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4013      	ands	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002456:	4a1a      	ldr	r2, [pc, #104]	; (80024c0 <HAL_GPIO_Init+0x304>)
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800245c:	4b18      	ldr	r3, [pc, #96]	; (80024c0 <HAL_GPIO_Init+0x304>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002480:	4a0f      	ldr	r2, [pc, #60]	; (80024c0 <HAL_GPIO_Init+0x304>)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	3301      	adds	r3, #1
 800248a:	61fb      	str	r3, [r7, #28]
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	2b0f      	cmp	r3, #15
 8002490:	f67f aea2 	bls.w	80021d8 <HAL_GPIO_Init+0x1c>
=======
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 80a2 	beq.w	8001dfe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	4b57      	ldr	r3, [pc, #348]	; (8001e1c <HAL_GPIO_Init+0x2e8>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	4a56      	ldr	r2, [pc, #344]	; (8001e1c <HAL_GPIO_Init+0x2e8>)
 8001cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cca:	4b54      	ldr	r3, [pc, #336]	; (8001e1c <HAL_GPIO_Init+0x2e8>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cd6:	4a52      	ldr	r2, [pc, #328]	; (8001e20 <HAL_GPIO_Init+0x2ec>)
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	3302      	adds	r3, #2
 8001cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	220f      	movs	r2, #15
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a49      	ldr	r2, [pc, #292]	; (8001e24 <HAL_GPIO_Init+0x2f0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d019      	beq.n	8001d36 <HAL_GPIO_Init+0x202>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a48      	ldr	r2, [pc, #288]	; (8001e28 <HAL_GPIO_Init+0x2f4>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d013      	beq.n	8001d32 <HAL_GPIO_Init+0x1fe>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a47      	ldr	r2, [pc, #284]	; (8001e2c <HAL_GPIO_Init+0x2f8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d00d      	beq.n	8001d2e <HAL_GPIO_Init+0x1fa>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a46      	ldr	r2, [pc, #280]	; (8001e30 <HAL_GPIO_Init+0x2fc>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d007      	beq.n	8001d2a <HAL_GPIO_Init+0x1f6>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a45      	ldr	r2, [pc, #276]	; (8001e34 <HAL_GPIO_Init+0x300>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d101      	bne.n	8001d26 <HAL_GPIO_Init+0x1f2>
 8001d22:	2304      	movs	r3, #4
 8001d24:	e008      	b.n	8001d38 <HAL_GPIO_Init+0x204>
 8001d26:	2307      	movs	r3, #7
 8001d28:	e006      	b.n	8001d38 <HAL_GPIO_Init+0x204>
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e004      	b.n	8001d38 <HAL_GPIO_Init+0x204>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e002      	b.n	8001d38 <HAL_GPIO_Init+0x204>
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <HAL_GPIO_Init+0x204>
 8001d36:	2300      	movs	r3, #0
 8001d38:	69fa      	ldr	r2, [r7, #28]
 8001d3a:	f002 0203 	and.w	r2, r2, #3
 8001d3e:	0092      	lsls	r2, r2, #2
 8001d40:	4093      	lsls	r3, r2
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d48:	4935      	ldr	r1, [pc, #212]	; (8001e20 <HAL_GPIO_Init+0x2ec>)
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	089b      	lsrs	r3, r3, #2
 8001d4e:	3302      	adds	r3, #2
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d56:	4b38      	ldr	r3, [pc, #224]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d7a:	4a2f      	ldr	r2, [pc, #188]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d80:	4b2d      	ldr	r3, [pc, #180]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001da4:	4a24      	ldr	r2, [pc, #144]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001daa:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	43db      	mvns	r3, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4013      	ands	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dce:	4a1a      	ldr	r2, [pc, #104]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dd4:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001df8:	4a0f      	ldr	r2, [pc, #60]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3301      	adds	r3, #1
 8001e02:	61fb      	str	r3, [r7, #28]
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	2b0f      	cmp	r3, #15
 8001e08:	f67f aea2 	bls.w	8001b50 <HAL_GPIO_Init+0x1c>
>>>>>>> parent of 2b78fa3 (line sensor)
      }
    }
  }
}
<<<<<<< HEAD
 8002494:	bf00      	nop
 8002496:	bf00      	nop
 8002498:	3724      	adds	r7, #36	; 0x24
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40013800 	.word	0x40013800
 80024ac:	40020000 	.word	0x40020000
 80024b0:	40020400 	.word	0x40020400
 80024b4:	40020800 	.word	0x40020800
 80024b8:	40020c00 	.word	0x40020c00
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40013c00 	.word	0x40013c00

080024c4 <HAL_GPIO_WritePin>:
=======
 8001e0c:	bf00      	nop
 8001e0e:	bf00      	nop
 8001e10:	3724      	adds	r7, #36	; 0x24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40013800 	.word	0x40013800
 8001e24:	40020000 	.word	0x40020000
 8001e28:	40020400 	.word	0x40020400
 8001e2c:	40020800 	.word	0x40020800
 8001e30:	40020c00 	.word	0x40020c00
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40013c00 	.word	0x40013c00

08001e3c <HAL_GPIO_WritePin>:
>>>>>>> parent of 2b78fa3 (line sensor)
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	807b      	strh	r3, [r7, #2]
 80024d0:	4613      	mov	r3, r2
 80024d2:	707b      	strb	r3, [r7, #1]
=======
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	807b      	strh	r3, [r7, #2]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	707b      	strb	r3, [r7, #1]
>>>>>>> parent of 2b78fa3 (line sensor)
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 80024d4:	787b      	ldrb	r3, [r7, #1]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024da:	887a      	ldrh	r2, [r7, #2]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	619a      	str	r2, [r3, #24]
=======
 8001e4c:	787b      	ldrb	r3, [r7, #1]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e52:	887a      	ldrh	r2, [r7, #2]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	619a      	str	r2, [r3, #24]
>>>>>>> parent of 2b78fa3 (line sensor)
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< HEAD
 80024e0:	e003      	b.n	80024ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024e2:	887b      	ldrh	r3, [r7, #2]
 80024e4:	041a      	lsls	r2, r3, #16
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	619a      	str	r2, [r3, #24]
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
	...

080024f8 <HAL_I2C_Init>:
=======
 8001e58:	e003      	b.n	8001e62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e5a:	887b      	ldrh	r3, [r7, #2]
 8001e5c:	041a      	lsls	r2, r3, #16
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	619a      	str	r2, [r3, #24]
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <HAL_I2C_Init>:
>>>>>>> parent of 2b78fa3 (line sensor)
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
=======
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 2b78fa3 (line sensor)
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
<<<<<<< HEAD
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e12b      	b.n	8002762 <HAL_I2C_Init+0x26a>
=======
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e12b      	b.n	80020da <HAL_I2C_Init+0x26a>
>>>>>>> parent of 2b78fa3 (line sensor)
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
<<<<<<< HEAD
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d106      	bne.n	8002524 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d106      	bne.n	8001e9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> parent of 2b78fa3 (line sensor)

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
<<<<<<< HEAD
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff f9e6 	bl	80018f0 <HAL_I2C_MspInit>
=======
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff faf6 	bl	8001488 <HAL_I2C_MspInit>
>>>>>>> parent of 2b78fa3 (line sensor)
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
<<<<<<< HEAD
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2224      	movs	r2, #36	; 0x24
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0201 	bic.w	r2, r2, #1
 800253a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800254a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800255a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800255c:	f000 fd40 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 8002560:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	4a81      	ldr	r2, [pc, #516]	; (800276c <HAL_I2C_Init+0x274>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d807      	bhi.n	800257c <HAL_I2C_Init+0x84>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4a80      	ldr	r2, [pc, #512]	; (8002770 <HAL_I2C_Init+0x278>)
 8002570:	4293      	cmp	r3, r2
 8002572:	bf94      	ite	ls
 8002574:	2301      	movls	r3, #1
 8002576:	2300      	movhi	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	e006      	b.n	800258a <HAL_I2C_Init+0x92>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4a7d      	ldr	r2, [pc, #500]	; (8002774 <HAL_I2C_Init+0x27c>)
 8002580:	4293      	cmp	r3, r2
 8002582:	bf94      	ite	ls
 8002584:	2301      	movls	r3, #1
 8002586:	2300      	movhi	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e0e7      	b.n	8002762 <HAL_I2C_Init+0x26a>
=======
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2224      	movs	r2, #36	; 0x24
 8001ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0201 	bic.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ec2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ed2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ed4:	f000 fd40 	bl	8002958 <HAL_RCC_GetPCLK1Freq>
 8001ed8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	4a81      	ldr	r2, [pc, #516]	; (80020e4 <HAL_I2C_Init+0x274>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d807      	bhi.n	8001ef4 <HAL_I2C_Init+0x84>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4a80      	ldr	r2, [pc, #512]	; (80020e8 <HAL_I2C_Init+0x278>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	bf94      	ite	ls
 8001eec:	2301      	movls	r3, #1
 8001eee:	2300      	movhi	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	e006      	b.n	8001f02 <HAL_I2C_Init+0x92>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4a7d      	ldr	r2, [pc, #500]	; (80020ec <HAL_I2C_Init+0x27c>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	bf94      	ite	ls
 8001efc:	2301      	movls	r3, #1
 8001efe:	2300      	movhi	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e0e7      	b.n	80020da <HAL_I2C_Init+0x26a>
>>>>>>> parent of 2b78fa3 (line sensor)
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
<<<<<<< HEAD
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	4a78      	ldr	r2, [pc, #480]	; (8002778 <HAL_I2C_Init+0x280>)
 8002596:	fba2 2303 	umull	r2, r3, r2, r3
 800259a:	0c9b      	lsrs	r3, r3, #18
 800259c:	60bb      	str	r3, [r7, #8]
=======
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4a78      	ldr	r2, [pc, #480]	; (80020f0 <HAL_I2C_Init+0x280>)
 8001f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f12:	0c9b      	lsrs	r3, r3, #18
 8001f14:	60bb      	str	r3, [r7, #8]
>>>>>>> parent of 2b78fa3 (line sensor)

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
<<<<<<< HEAD
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68ba      	ldr	r2, [r7, #8]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	605a      	str	r2, [r3, #4]
=======
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68ba      	ldr	r2, [r7, #8]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	605a      	str	r2, [r3, #4]
>>>>>>> parent of 2b78fa3 (line sensor)

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
<<<<<<< HEAD
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	4a6a      	ldr	r2, [pc, #424]	; (800276c <HAL_I2C_Init+0x274>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d802      	bhi.n	80025cc <HAL_I2C_Init+0xd4>
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	3301      	adds	r3, #1
 80025ca:	e009      	b.n	80025e0 <HAL_I2C_Init+0xe8>
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025d2:	fb02 f303 	mul.w	r3, r2, r3
 80025d6:	4a69      	ldr	r2, [pc, #420]	; (800277c <HAL_I2C_Init+0x284>)
 80025d8:	fba2 2303 	umull	r2, r3, r2, r3
 80025dc:	099b      	lsrs	r3, r3, #6
 80025de:	3301      	adds	r3, #1
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	430b      	orrs	r3, r1
 80025e6:	6213      	str	r3, [r2, #32]
=======
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	4a6a      	ldr	r2, [pc, #424]	; (80020e4 <HAL_I2C_Init+0x274>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d802      	bhi.n	8001f44 <HAL_I2C_Init+0xd4>
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	3301      	adds	r3, #1
 8001f42:	e009      	b.n	8001f58 <HAL_I2C_Init+0xe8>
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f4a:	fb02 f303 	mul.w	r3, r2, r3
 8001f4e:	4a69      	ldr	r2, [pc, #420]	; (80020f4 <HAL_I2C_Init+0x284>)
 8001f50:	fba2 2303 	umull	r2, r3, r2, r3
 8001f54:	099b      	lsrs	r3, r3, #6
 8001f56:	3301      	adds	r3, #1
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	430b      	orrs	r3, r1
 8001f5e:	6213      	str	r3, [r2, #32]
>>>>>>> parent of 2b78fa3 (line sensor)

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
<<<<<<< HEAD
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	495c      	ldr	r1, [pc, #368]	; (800276c <HAL_I2C_Init+0x274>)
 80025fc:	428b      	cmp	r3, r1
 80025fe:	d819      	bhi.n	8002634 <HAL_I2C_Init+0x13c>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1e59      	subs	r1, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	fbb1 f3f3 	udiv	r3, r1, r3
 800260e:	1c59      	adds	r1, r3, #1
 8002610:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002614:	400b      	ands	r3, r1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00a      	beq.n	8002630 <HAL_I2C_Init+0x138>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1e59      	subs	r1, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	fbb1 f3f3 	udiv	r3, r1, r3
 8002628:	3301      	adds	r3, #1
 800262a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800262e:	e051      	b.n	80026d4 <HAL_I2C_Init+0x1dc>
 8002630:	2304      	movs	r3, #4
 8002632:	e04f      	b.n	80026d4 <HAL_I2C_Init+0x1dc>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d111      	bne.n	8002660 <HAL_I2C_Init+0x168>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	1e58      	subs	r0, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6859      	ldr	r1, [r3, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	440b      	add	r3, r1
 800264a:	fbb0 f3f3 	udiv	r3, r0, r3
 800264e:	3301      	adds	r3, #1
 8002650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002654:	2b00      	cmp	r3, #0
 8002656:	bf0c      	ite	eq
 8002658:	2301      	moveq	r3, #1
 800265a:	2300      	movne	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	e012      	b.n	8002686 <HAL_I2C_Init+0x18e>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	1e58      	subs	r0, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6859      	ldr	r1, [r3, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	0099      	lsls	r1, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	fbb0 f3f3 	udiv	r3, r0, r3
 8002676:	3301      	adds	r3, #1
 8002678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800267c:	2b00      	cmp	r3, #0
 800267e:	bf0c      	ite	eq
 8002680:	2301      	moveq	r3, #1
 8002682:	2300      	movne	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_I2C_Init+0x196>
 800268a:	2301      	movs	r3, #1
 800268c:	e022      	b.n	80026d4 <HAL_I2C_Init+0x1dc>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10e      	bne.n	80026b4 <HAL_I2C_Init+0x1bc>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	1e58      	subs	r0, r3, #1
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6859      	ldr	r1, [r3, #4]
 800269e:	460b      	mov	r3, r1
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	440b      	add	r3, r1
 80026a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80026a8:	3301      	adds	r3, #1
 80026aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026b2:	e00f      	b.n	80026d4 <HAL_I2C_Init+0x1dc>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	1e58      	subs	r0, r3, #1
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6859      	ldr	r1, [r3, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	0099      	lsls	r1, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ca:	3301      	adds	r3, #1
 80026cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	6809      	ldr	r1, [r1, #0]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61cb      	str	r3, [r1, #28]
=======
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	495c      	ldr	r1, [pc, #368]	; (80020e4 <HAL_I2C_Init+0x274>)
 8001f74:	428b      	cmp	r3, r1
 8001f76:	d819      	bhi.n	8001fac <HAL_I2C_Init+0x13c>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	1e59      	subs	r1, r3, #1
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f86:	1c59      	adds	r1, r3, #1
 8001f88:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f8c:	400b      	ands	r3, r1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00a      	beq.n	8001fa8 <HAL_I2C_Init+0x138>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	1e59      	subs	r1, r3, #1
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fa6:	e051      	b.n	800204c <HAL_I2C_Init+0x1dc>
 8001fa8:	2304      	movs	r3, #4
 8001faa:	e04f      	b.n	800204c <HAL_I2C_Init+0x1dc>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d111      	bne.n	8001fd8 <HAL_I2C_Init+0x168>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	1e58      	subs	r0, r3, #1
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6859      	ldr	r1, [r3, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	440b      	add	r3, r1
 8001fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	bf0c      	ite	eq
 8001fd0:	2301      	moveq	r3, #1
 8001fd2:	2300      	movne	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	e012      	b.n	8001ffe <HAL_I2C_Init+0x18e>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	1e58      	subs	r0, r3, #1
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6859      	ldr	r1, [r3, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	0099      	lsls	r1, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fee:	3301      	adds	r3, #1
 8001ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	bf0c      	ite	eq
 8001ff8:	2301      	moveq	r3, #1
 8001ffa:	2300      	movne	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_I2C_Init+0x196>
 8002002:	2301      	movs	r3, #1
 8002004:	e022      	b.n	800204c <HAL_I2C_Init+0x1dc>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10e      	bne.n	800202c <HAL_I2C_Init+0x1bc>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	1e58      	subs	r0, r3, #1
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6859      	ldr	r1, [r3, #4]
 8002016:	460b      	mov	r3, r1
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	440b      	add	r3, r1
 800201c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002020:	3301      	adds	r3, #1
 8002022:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800202a:	e00f      	b.n	800204c <HAL_I2C_Init+0x1dc>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	1e58      	subs	r0, r3, #1
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6859      	ldr	r1, [r3, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	0099      	lsls	r1, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002042:	3301      	adds	r3, #1
 8002044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002048:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	6809      	ldr	r1, [r1, #0]
 8002050:	4313      	orrs	r3, r2
 8002052:	61cb      	str	r3, [r1, #28]
>>>>>>> parent of 2b78fa3 (line sensor)

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
<<<<<<< HEAD
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69da      	ldr	r2, [r3, #28]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	601a      	str	r2, [r3, #0]
=======
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69da      	ldr	r2, [r3, #28]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	431a      	orrs	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	601a      	str	r2, [r3, #0]
>>>>>>> parent of 2b78fa3 (line sensor)

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
<<<<<<< HEAD
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002702:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6911      	ldr	r1, [r2, #16]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	68d2      	ldr	r2, [r2, #12]
 800270e:	4311      	orrs	r1, r2
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	430b      	orrs	r3, r1
 8002716:	6093      	str	r3, [r2, #8]
=======
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800207a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6911      	ldr	r1, [r2, #16]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68d2      	ldr	r2, [r2, #12]
 8002086:	4311      	orrs	r1, r2
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	430b      	orrs	r3, r1
 800208e:	6093      	str	r3, [r2, #8]
>>>>>>> parent of 2b78fa3 (line sensor)

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
<<<<<<< HEAD
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695a      	ldr	r2, [r3, #20]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0201 	orr.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2220      	movs	r2, #32
 800274e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	000186a0 	.word	0x000186a0
 8002770:	001e847f 	.word	0x001e847f
 8002774:	003d08ff 	.word	0x003d08ff
 8002778:	431bde83 	.word	0x431bde83
 800277c:	10624dd3 	.word	0x10624dd3

08002780 <HAL_RCC_OscConfig>:
=======
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	695a      	ldr	r2, [r3, #20]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	431a      	orrs	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0201 	orr.w	r2, r2, #1
 80020ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2220      	movs	r2, #32
 80020c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	000186a0 	.word	0x000186a0
 80020e8:	001e847f 	.word	0x001e847f
 80020ec:	003d08ff 	.word	0x003d08ff
 80020f0:	431bde83 	.word	0x431bde83
 80020f4:	10624dd3 	.word	0x10624dd3

080020f8 <HAL_RCC_OscConfig>:
>>>>>>> parent of 2b78fa3 (line sensor)
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
=======
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 2b78fa3 (line sensor)
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e267      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
=======
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e267      	b.n	80025da <HAL_RCC_OscConfig+0x4e2>
>>>>>>> parent of 2b78fa3 (line sensor)
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d075      	beq.n	800288a <HAL_RCC_OscConfig+0x10a>
=======
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d075      	beq.n	8002202 <HAL_RCC_OscConfig+0x10a>
>>>>>>> parent of 2b78fa3 (line sensor)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
<<<<<<< HEAD
 800279e:	4b88      	ldr	r3, [pc, #544]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 030c 	and.w	r3, r3, #12
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d00c      	beq.n	80027c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027aa:	4b85      	ldr	r3, [pc, #532]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027b2:	2b08      	cmp	r3, #8
 80027b4:	d112      	bne.n	80027dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027b6:	4b82      	ldr	r3, [pc, #520]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027c2:	d10b      	bne.n	80027dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c4:	4b7e      	ldr	r3, [pc, #504]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d05b      	beq.n	8002888 <HAL_RCC_OscConfig+0x108>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d157      	bne.n	8002888 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e242      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
=======
 8002116:	4b88      	ldr	r3, [pc, #544]	; (8002338 <HAL_RCC_OscConfig+0x240>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 030c 	and.w	r3, r3, #12
 800211e:	2b04      	cmp	r3, #4
 8002120:	d00c      	beq.n	800213c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002122:	4b85      	ldr	r3, [pc, #532]	; (8002338 <HAL_RCC_OscConfig+0x240>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800212a:	2b08      	cmp	r3, #8
 800212c:	d112      	bne.n	8002154 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800212e:	4b82      	ldr	r3, [pc, #520]	; (8002338 <HAL_RCC_OscConfig+0x240>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002136:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800213a:	d10b      	bne.n	8002154 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800213c:	4b7e      	ldr	r3, [pc, #504]	; (8002338 <HAL_RCC_OscConfig+0x240>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d05b      	beq.n	8002200 <HAL_RCC_OscConfig+0x108>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d157      	bne.n	8002200 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e242      	b.n	80025da <HAL_RCC_OscConfig+0x4e2>
>>>>>>> parent of 2b78fa3 (line sensor)
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027e4:	d106      	bne.n	80027f4 <HAL_RCC_OscConfig+0x74>
 80027e6:	4b76      	ldr	r3, [pc, #472]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a75      	ldr	r2, [pc, #468]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 80027ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	e01d      	b.n	8002830 <HAL_RCC_OscConfig+0xb0>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027fc:	d10c      	bne.n	8002818 <HAL_RCC_OscConfig+0x98>
 80027fe:	4b70      	ldr	r3, [pc, #448]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a6f      	ldr	r2, [pc, #444]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 8002804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	4b6d      	ldr	r3, [pc, #436]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a6c      	ldr	r2, [pc, #432]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 8002810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	e00b      	b.n	8002830 <HAL_RCC_OscConfig+0xb0>
 8002818:	4b69      	ldr	r3, [pc, #420]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a68      	ldr	r2, [pc, #416]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 800281e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002822:	6013      	str	r3, [r2, #0]
 8002824:	4b66      	ldr	r3, [pc, #408]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a65      	ldr	r2, [pc, #404]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 800282a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800282e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d013      	beq.n	8002860 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002838:	f7ff fb10 	bl	8001e5c <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002840:	f7ff fb0c 	bl	8001e5c <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b64      	cmp	r3, #100	; 0x64
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e207      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002852:	4b5b      	ldr	r3, [pc, #364]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0f0      	beq.n	8002840 <HAL_RCC_OscConfig+0xc0>
 800285e:	e014      	b.n	800288a <HAL_RCC_OscConfig+0x10a>
=======
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800215c:	d106      	bne.n	800216c <HAL_RCC_OscConfig+0x74>
 800215e:	4b76      	ldr	r3, [pc, #472]	; (8002338 <HAL_RCC_OscConfig+0x240>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a75      	ldr	r2, [pc, #468]	; (8002338 <HAL_RCC_OscConfig+0x240>)
 8002164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	e01d      	b.n	80021a8 <HAL_RCC_OscConfig+0xb0>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002174:	d10c      	bne.n	8002190 <HAL_RCC_OscConfig+0x98>
 8002176:	4b70      	ldr	r3, [pc, #448]	; (8002338 <HAL_RCC_OscConfig+0x240>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a6f      	ldr	r2, [pc, #444]	; (8002338 <HAL_RCC_OscConfig+0x240>)
 800217c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	4b6d      	ldr	r3, [pc, #436]	; (8002338 <HAL_RCC_OscConfig+0x240>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a6c      	ldr	r2, [pc, #432]	; (8002338 <HAL_RCC_OscConfig+0x240>)
 8002188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	e00b      	b.n	80021a8 <HAL_RCC_OscConfig+0xb0>
 8002190:	4b69      	ldr	r3, [pc, #420]	; (8002338 <HAL_RCC_OscConfig+0x240>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a68      	ldr	r2, [pc, #416]	; (8002338 <HAL_RCC_OscConfig+0x240>)
 8002196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	4b66      	ldr	r3, [pc, #408]	; (8002338 <HAL_RCC_OscConfig+0x240>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a65      	ldr	r2, [pc, #404]	; (8002338 <HAL_RCC_OscConfig+0x240>)
 80021a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d013      	beq.n	80021d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b0:	f7ff fb7e 	bl	80018b0 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021b8:	f7ff fb7a 	bl	80018b0 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b64      	cmp	r3, #100	; 0x64
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e207      	b.n	80025da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ca:	4b5b      	ldr	r3, [pc, #364]	; (8002338 <HAL_RCC_OscConfig+0x240>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCC_OscConfig+0xc0>
 80021d6:	e014      	b.n	8002202 <HAL_RCC_OscConfig+0x10a>
>>>>>>> parent of 2b78fa3 (line sensor)
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8002860:	f7ff fafc 	bl	8001e5c <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002868:	f7ff faf8 	bl	8001e5c <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b64      	cmp	r3, #100	; 0x64
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e1f3      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800287a:	4b51      	ldr	r3, [pc, #324]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f0      	bne.n	8002868 <HAL_RCC_OscConfig+0xe8>
 8002886:	e000      	b.n	800288a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002888:	bf00      	nop
=======
 80021d8:	f7ff fb6a 	bl	80018b0 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021e0:	f7ff fb66 	bl	80018b0 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b64      	cmp	r3, #100	; 0x64
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e1f3      	b.n	80025da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f2:	4b51      	ldr	r3, [pc, #324]	; (8002338 <HAL_RCC_OscConfig+0x240>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0xe8>
 80021fe:	e000      	b.n	8002202 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002200:	bf00      	nop
>>>>>>> parent of 2b78fa3 (line sensor)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d063      	beq.n	800295e <HAL_RCC_OscConfig+0x1de>
=======
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d063      	beq.n	80022d6 <HAL_RCC_OscConfig+0x1de>
>>>>>>> parent of 2b78fa3 (line sensor)
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
<<<<<<< HEAD
 8002896:	4b4a      	ldr	r3, [pc, #296]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 030c 	and.w	r3, r3, #12
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00b      	beq.n	80028ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028a2:	4b47      	ldr	r3, [pc, #284]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028aa:	2b08      	cmp	r3, #8
 80028ac:	d11c      	bne.n	80028e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ae:	4b44      	ldr	r3, [pc, #272]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d116      	bne.n	80028e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ba:	4b41      	ldr	r3, [pc, #260]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d005      	beq.n	80028d2 <HAL_RCC_OscConfig+0x152>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d001      	beq.n	80028d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e1c7      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
=======
 800220e:	4b4a      	ldr	r3, [pc, #296]	; (8002338 <HAL_RCC_OscConfig+0x240>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 030c 	and.w	r3, r3, #12
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00b      	beq.n	8002232 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800221a:	4b47      	ldr	r3, [pc, #284]	; (8002338 <HAL_RCC_OscConfig+0x240>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002222:	2b08      	cmp	r3, #8
 8002224:	d11c      	bne.n	8002260 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002226:	4b44      	ldr	r3, [pc, #272]	; (8002338 <HAL_RCC_OscConfig+0x240>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d116      	bne.n	8002260 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002232:	4b41      	ldr	r3, [pc, #260]	; (8002338 <HAL_RCC_OscConfig+0x240>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d005      	beq.n	800224a <HAL_RCC_OscConfig+0x152>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d001      	beq.n	800224a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e1c7      	b.n	80025da <HAL_RCC_OscConfig+0x4e2>
>>>>>>> parent of 2b78fa3 (line sensor)
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 80028d2:	4b3b      	ldr	r3, [pc, #236]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	4937      	ldr	r1, [pc, #220]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e6:	e03a      	b.n	800295e <HAL_RCC_OscConfig+0x1de>
=======
 800224a:	4b3b      	ldr	r3, [pc, #236]	; (8002338 <HAL_RCC_OscConfig+0x240>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	4937      	ldr	r1, [pc, #220]	; (8002338 <HAL_RCC_OscConfig+0x240>)
 800225a:	4313      	orrs	r3, r2
 800225c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225e:	e03a      	b.n	80022d6 <HAL_RCC_OscConfig+0x1de>
>>>>>>> parent of 2b78fa3 (line sensor)
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
<<<<<<< HEAD
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d020      	beq.n	8002932 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028f0:	4b34      	ldr	r3, [pc, #208]	; (80029c4 <HAL_RCC_OscConfig+0x244>)
 80028f2:	2201      	movs	r2, #1
 80028f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f6:	f7ff fab1 	bl	8001e5c <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028fe:	f7ff faad 	bl	8001e5c <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e1a8      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002910:	4b2b      	ldr	r3, [pc, #172]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0f0      	beq.n	80028fe <HAL_RCC_OscConfig+0x17e>
=======
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d020      	beq.n	80022aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002268:	4b34      	ldr	r3, [pc, #208]	; (800233c <HAL_RCC_OscConfig+0x244>)
 800226a:	2201      	movs	r2, #1
 800226c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226e:	f7ff fb1f 	bl	80018b0 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002276:	f7ff fb1b 	bl	80018b0 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e1a8      	b.n	80025da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002288:	4b2b      	ldr	r3, [pc, #172]	; (8002338 <HAL_RCC_OscConfig+0x240>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0f0      	beq.n	8002276 <HAL_RCC_OscConfig+0x17e>
>>>>>>> parent of 2b78fa3 (line sensor)
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 800291c:	4b28      	ldr	r3, [pc, #160]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	4925      	ldr	r1, [pc, #148]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 800292c:	4313      	orrs	r3, r2
 800292e:	600b      	str	r3, [r1, #0]
 8002930:	e015      	b.n	800295e <HAL_RCC_OscConfig+0x1de>
=======
 8002294:	4b28      	ldr	r3, [pc, #160]	; (8002338 <HAL_RCC_OscConfig+0x240>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	4925      	ldr	r1, [pc, #148]	; (8002338 <HAL_RCC_OscConfig+0x240>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	600b      	str	r3, [r1, #0]
 80022a8:	e015      	b.n	80022d6 <HAL_RCC_OscConfig+0x1de>
>>>>>>> parent of 2b78fa3 (line sensor)
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8002932:	4b24      	ldr	r3, [pc, #144]	; (80029c4 <HAL_RCC_OscConfig+0x244>)
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002938:	f7ff fa90 	bl	8001e5c <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002940:	f7ff fa8c 	bl	8001e5c <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e187      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002952:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1f0      	bne.n	8002940 <HAL_RCC_OscConfig+0x1c0>
=======
 80022aa:	4b24      	ldr	r3, [pc, #144]	; (800233c <HAL_RCC_OscConfig+0x244>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b0:	f7ff fafe 	bl	80018b0 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022b8:	f7ff fafa 	bl	80018b0 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e187      	b.n	80025da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ca:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <HAL_RCC_OscConfig+0x240>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x1c0>
>>>>>>> parent of 2b78fa3 (line sensor)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	2b00      	cmp	r3, #0
 8002968:	d036      	beq.n	80029d8 <HAL_RCC_OscConfig+0x258>
=======
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d036      	beq.n	8002350 <HAL_RCC_OscConfig+0x258>
>>>>>>> parent of 2b78fa3 (line sensor)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
<<<<<<< HEAD
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d016      	beq.n	80029a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002972:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <HAL_RCC_OscConfig+0x248>)
 8002974:	2201      	movs	r2, #1
 8002976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002978:	f7ff fa70 	bl	8001e5c <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002980:	f7ff fa6c 	bl	8001e5c <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e167      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002992:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 8002994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0f0      	beq.n	8002980 <HAL_RCC_OscConfig+0x200>
 800299e:	e01b      	b.n	80029d8 <HAL_RCC_OscConfig+0x258>
=======
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d016      	beq.n	8002318 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ea:	4b15      	ldr	r3, [pc, #84]	; (8002340 <HAL_RCC_OscConfig+0x248>)
 80022ec:	2201      	movs	r2, #1
 80022ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f0:	f7ff fade 	bl	80018b0 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022f8:	f7ff fada 	bl	80018b0 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e167      	b.n	80025da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800230a:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <HAL_RCC_OscConfig+0x240>)
 800230c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0f0      	beq.n	80022f8 <HAL_RCC_OscConfig+0x200>
 8002316:	e01b      	b.n	8002350 <HAL_RCC_OscConfig+0x258>
>>>>>>> parent of 2b78fa3 (line sensor)
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 80029a0:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <HAL_RCC_OscConfig+0x248>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a6:	f7ff fa59 	bl	8001e5c <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ac:	e00e      	b.n	80029cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ae:	f7ff fa55 	bl	8001e5c <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d907      	bls.n	80029cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e150      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
 80029c0:	40023800 	.word	0x40023800
 80029c4:	42470000 	.word	0x42470000
 80029c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029cc:	4b88      	ldr	r3, [pc, #544]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 80029ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1ea      	bne.n	80029ae <HAL_RCC_OscConfig+0x22e>
=======
 8002318:	4b09      	ldr	r3, [pc, #36]	; (8002340 <HAL_RCC_OscConfig+0x248>)
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231e:	f7ff fac7 	bl	80018b0 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002324:	e00e      	b.n	8002344 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002326:	f7ff fac3 	bl	80018b0 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d907      	bls.n	8002344 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e150      	b.n	80025da <HAL_RCC_OscConfig+0x4e2>
 8002338:	40023800 	.word	0x40023800
 800233c:	42470000 	.word	0x42470000
 8002340:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002344:	4b88      	ldr	r3, [pc, #544]	; (8002568 <HAL_RCC_OscConfig+0x470>)
 8002346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1ea      	bne.n	8002326 <HAL_RCC_OscConfig+0x22e>
>>>>>>> parent of 2b78fa3 (line sensor)
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 8097 	beq.w	8002b14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029e6:	2300      	movs	r3, #0
 80029e8:	75fb      	strb	r3, [r7, #23]
=======
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 8097 	beq.w	800248c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800235e:	2300      	movs	r3, #0
 8002360:	75fb      	strb	r3, [r7, #23]
>>>>>>> parent of 2b78fa3 (line sensor)
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 80029ea:	4b81      	ldr	r3, [pc, #516]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10f      	bne.n	8002a16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	4b7d      	ldr	r3, [pc, #500]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	4a7c      	ldr	r2, [pc, #496]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a04:	6413      	str	r3, [r2, #64]	; 0x40
 8002a06:	4b7a      	ldr	r3, [pc, #488]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	60bb      	str	r3, [r7, #8]
 8002a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a12:	2301      	movs	r3, #1
 8002a14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a16:	4b77      	ldr	r3, [pc, #476]	; (8002bf4 <HAL_RCC_OscConfig+0x474>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d118      	bne.n	8002a54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a22:	4b74      	ldr	r3, [pc, #464]	; (8002bf4 <HAL_RCC_OscConfig+0x474>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a73      	ldr	r2, [pc, #460]	; (8002bf4 <HAL_RCC_OscConfig+0x474>)
 8002a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a2e:	f7ff fa15 	bl	8001e5c <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a36:	f7ff fa11 	bl	8001e5c <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e10c      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a48:	4b6a      	ldr	r3, [pc, #424]	; (8002bf4 <HAL_RCC_OscConfig+0x474>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0f0      	beq.n	8002a36 <HAL_RCC_OscConfig+0x2b6>
=======
 8002362:	4b81      	ldr	r3, [pc, #516]	; (8002568 <HAL_RCC_OscConfig+0x470>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10f      	bne.n	800238e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	4b7d      	ldr	r3, [pc, #500]	; (8002568 <HAL_RCC_OscConfig+0x470>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	4a7c      	ldr	r2, [pc, #496]	; (8002568 <HAL_RCC_OscConfig+0x470>)
 8002378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800237c:	6413      	str	r3, [r2, #64]	; 0x40
 800237e:	4b7a      	ldr	r3, [pc, #488]	; (8002568 <HAL_RCC_OscConfig+0x470>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800238a:	2301      	movs	r3, #1
 800238c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238e:	4b77      	ldr	r3, [pc, #476]	; (800256c <HAL_RCC_OscConfig+0x474>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002396:	2b00      	cmp	r3, #0
 8002398:	d118      	bne.n	80023cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800239a:	4b74      	ldr	r3, [pc, #464]	; (800256c <HAL_RCC_OscConfig+0x474>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a73      	ldr	r2, [pc, #460]	; (800256c <HAL_RCC_OscConfig+0x474>)
 80023a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a6:	f7ff fa83 	bl	80018b0 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ae:	f7ff fa7f 	bl	80018b0 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e10c      	b.n	80025da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c0:	4b6a      	ldr	r3, [pc, #424]	; (800256c <HAL_RCC_OscConfig+0x474>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0f0      	beq.n	80023ae <HAL_RCC_OscConfig+0x2b6>
>>>>>>> parent of 2b78fa3 (line sensor)
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d106      	bne.n	8002a6a <HAL_RCC_OscConfig+0x2ea>
 8002a5c:	4b64      	ldr	r3, [pc, #400]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a60:	4a63      	ldr	r2, [pc, #396]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	6713      	str	r3, [r2, #112]	; 0x70
 8002a68:	e01c      	b.n	8002aa4 <HAL_RCC_OscConfig+0x324>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	2b05      	cmp	r3, #5
 8002a70:	d10c      	bne.n	8002a8c <HAL_RCC_OscConfig+0x30c>
 8002a72:	4b5f      	ldr	r3, [pc, #380]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a76:	4a5e      	ldr	r2, [pc, #376]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a78:	f043 0304 	orr.w	r3, r3, #4
 8002a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7e:	4b5c      	ldr	r3, [pc, #368]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	4a5b      	ldr	r2, [pc, #364]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	6713      	str	r3, [r2, #112]	; 0x70
 8002a8a:	e00b      	b.n	8002aa4 <HAL_RCC_OscConfig+0x324>
 8002a8c:	4b58      	ldr	r3, [pc, #352]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a90:	4a57      	ldr	r2, [pc, #348]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a92:	f023 0301 	bic.w	r3, r3, #1
 8002a96:	6713      	str	r3, [r2, #112]	; 0x70
 8002a98:	4b55      	ldr	r3, [pc, #340]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9c:	4a54      	ldr	r2, [pc, #336]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a9e:	f023 0304 	bic.w	r3, r3, #4
 8002aa2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d015      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aac:	f7ff f9d6 	bl	8001e5c <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab2:	e00a      	b.n	8002aca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ab4:	f7ff f9d2 	bl	8001e5c <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e0cb      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aca:	4b49      	ldr	r3, [pc, #292]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0ee      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x334>
 8002ad6:	e014      	b.n	8002b02 <HAL_RCC_OscConfig+0x382>
=======
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d106      	bne.n	80023e2 <HAL_RCC_OscConfig+0x2ea>
 80023d4:	4b64      	ldr	r3, [pc, #400]	; (8002568 <HAL_RCC_OscConfig+0x470>)
 80023d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d8:	4a63      	ldr	r2, [pc, #396]	; (8002568 <HAL_RCC_OscConfig+0x470>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	6713      	str	r3, [r2, #112]	; 0x70
 80023e0:	e01c      	b.n	800241c <HAL_RCC_OscConfig+0x324>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2b05      	cmp	r3, #5
 80023e8:	d10c      	bne.n	8002404 <HAL_RCC_OscConfig+0x30c>
 80023ea:	4b5f      	ldr	r3, [pc, #380]	; (8002568 <HAL_RCC_OscConfig+0x470>)
 80023ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ee:	4a5e      	ldr	r2, [pc, #376]	; (8002568 <HAL_RCC_OscConfig+0x470>)
 80023f0:	f043 0304 	orr.w	r3, r3, #4
 80023f4:	6713      	str	r3, [r2, #112]	; 0x70
 80023f6:	4b5c      	ldr	r3, [pc, #368]	; (8002568 <HAL_RCC_OscConfig+0x470>)
 80023f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fa:	4a5b      	ldr	r2, [pc, #364]	; (8002568 <HAL_RCC_OscConfig+0x470>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	6713      	str	r3, [r2, #112]	; 0x70
 8002402:	e00b      	b.n	800241c <HAL_RCC_OscConfig+0x324>
 8002404:	4b58      	ldr	r3, [pc, #352]	; (8002568 <HAL_RCC_OscConfig+0x470>)
 8002406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002408:	4a57      	ldr	r2, [pc, #348]	; (8002568 <HAL_RCC_OscConfig+0x470>)
 800240a:	f023 0301 	bic.w	r3, r3, #1
 800240e:	6713      	str	r3, [r2, #112]	; 0x70
 8002410:	4b55      	ldr	r3, [pc, #340]	; (8002568 <HAL_RCC_OscConfig+0x470>)
 8002412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002414:	4a54      	ldr	r2, [pc, #336]	; (8002568 <HAL_RCC_OscConfig+0x470>)
 8002416:	f023 0304 	bic.w	r3, r3, #4
 800241a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d015      	beq.n	8002450 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002424:	f7ff fa44 	bl	80018b0 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242a:	e00a      	b.n	8002442 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800242c:	f7ff fa40 	bl	80018b0 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	f241 3288 	movw	r2, #5000	; 0x1388
 800243a:	4293      	cmp	r3, r2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e0cb      	b.n	80025da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002442:	4b49      	ldr	r3, [pc, #292]	; (8002568 <HAL_RCC_OscConfig+0x470>)
 8002444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0ee      	beq.n	800242c <HAL_RCC_OscConfig+0x334>
 800244e:	e014      	b.n	800247a <HAL_RCC_OscConfig+0x382>
>>>>>>> parent of 2b78fa3 (line sensor)
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8002ad8:	f7ff f9c0 	bl	8001e5c <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ade:	e00a      	b.n	8002af6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ae0:	f7ff f9bc 	bl	8001e5c <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e0b5      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af6:	4b3e      	ldr	r3, [pc, #248]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1ee      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x360>
=======
 8002450:	f7ff fa2e 	bl	80018b0 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002456:	e00a      	b.n	800246e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002458:	f7ff fa2a 	bl	80018b0 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	f241 3288 	movw	r2, #5000	; 0x1388
 8002466:	4293      	cmp	r3, r2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e0b5      	b.n	80025da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800246e:	4b3e      	ldr	r3, [pc, #248]	; (8002568 <HAL_RCC_OscConfig+0x470>)
 8002470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1ee      	bne.n	8002458 <HAL_RCC_OscConfig+0x360>
>>>>>>> parent of 2b78fa3 (line sensor)
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 8002b02:	7dfb      	ldrb	r3, [r7, #23]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d105      	bne.n	8002b14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b08:	4b39      	ldr	r3, [pc, #228]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	4a38      	ldr	r2, [pc, #224]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002b0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b12:	6413      	str	r3, [r2, #64]	; 0x40
=======
 800247a:	7dfb      	ldrb	r3, [r7, #23]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d105      	bne.n	800248c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002480:	4b39      	ldr	r3, [pc, #228]	; (8002568 <HAL_RCC_OscConfig+0x470>)
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	4a38      	ldr	r2, [pc, #224]	; (8002568 <HAL_RCC_OscConfig+0x470>)
 8002486:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800248a:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> parent of 2b78fa3 (line sensor)
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 80a1 	beq.w	8002c60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b1e:	4b34      	ldr	r3, [pc, #208]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 030c 	and.w	r3, r3, #12
 8002b26:	2b08      	cmp	r3, #8
 8002b28:	d05c      	beq.n	8002be4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d141      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x436>
=======
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 80a1 	beq.w	80025d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002496:	4b34      	ldr	r3, [pc, #208]	; (8002568 <HAL_RCC_OscConfig+0x470>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 030c 	and.w	r3, r3, #12
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d05c      	beq.n	800255c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d141      	bne.n	800252e <HAL_RCC_OscConfig+0x436>
>>>>>>> parent of 2b78fa3 (line sensor)
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8002b32:	4b31      	ldr	r3, [pc, #196]	; (8002bf8 <HAL_RCC_OscConfig+0x478>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b38:	f7ff f990 	bl	8001e5c <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b40:	f7ff f98c 	bl	8001e5c <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e087      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b52:	4b27      	ldr	r3, [pc, #156]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1f0      	bne.n	8002b40 <HAL_RCC_OscConfig+0x3c0>
=======
 80024aa:	4b31      	ldr	r3, [pc, #196]	; (8002570 <HAL_RCC_OscConfig+0x478>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7ff f9fe 	bl	80018b0 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b8:	f7ff f9fa 	bl	80018b0 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e087      	b.n	80025da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ca:	4b27      	ldr	r3, [pc, #156]	; (8002568 <HAL_RCC_OscConfig+0x470>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0x3c0>
>>>>>>> parent of 2b78fa3 (line sensor)
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
<<<<<<< HEAD
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69da      	ldr	r2, [r3, #28]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	019b      	lsls	r3, r3, #6
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b74:	085b      	lsrs	r3, r3, #1
 8002b76:	3b01      	subs	r3, #1
 8002b78:	041b      	lsls	r3, r3, #16
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b80:	061b      	lsls	r3, r3, #24
 8002b82:	491b      	ldr	r1, [pc, #108]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	604b      	str	r3, [r1, #4]
=======
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69da      	ldr	r2, [r3, #28]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	431a      	orrs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	019b      	lsls	r3, r3, #6
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ec:	085b      	lsrs	r3, r3, #1
 80024ee:	3b01      	subs	r3, #1
 80024f0:	041b      	lsls	r3, r3, #16
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f8:	061b      	lsls	r3, r3, #24
 80024fa:	491b      	ldr	r1, [pc, #108]	; (8002568 <HAL_RCC_OscConfig+0x470>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	604b      	str	r3, [r1, #4]
>>>>>>> parent of 2b78fa3 (line sensor)
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 8002b88:	4b1b      	ldr	r3, [pc, #108]	; (8002bf8 <HAL_RCC_OscConfig+0x478>)
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8e:	f7ff f965 	bl	8001e5c <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b96:	f7ff f961 	bl	8001e5c <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e05c      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba8:	4b11      	ldr	r3, [pc, #68]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0f0      	beq.n	8002b96 <HAL_RCC_OscConfig+0x416>
 8002bb4:	e054      	b.n	8002c60 <HAL_RCC_OscConfig+0x4e0>
=======
 8002500:	4b1b      	ldr	r3, [pc, #108]	; (8002570 <HAL_RCC_OscConfig+0x478>)
 8002502:	2201      	movs	r2, #1
 8002504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002506:	f7ff f9d3 	bl	80018b0 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800250e:	f7ff f9cf 	bl	80018b0 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e05c      	b.n	80025da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002520:	4b11      	ldr	r3, [pc, #68]	; (8002568 <HAL_RCC_OscConfig+0x470>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0f0      	beq.n	800250e <HAL_RCC_OscConfig+0x416>
 800252c:	e054      	b.n	80025d8 <HAL_RCC_OscConfig+0x4e0>
>>>>>>> parent of 2b78fa3 (line sensor)
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8002bb6:	4b10      	ldr	r3, [pc, #64]	; (8002bf8 <HAL_RCC_OscConfig+0x478>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbc:	f7ff f94e 	bl	8001e5c <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc4:	f7ff f94a 	bl	8001e5c <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e045      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd6:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x444>
 8002be2:	e03d      	b.n	8002c60 <HAL_RCC_OscConfig+0x4e0>
=======
 800252e:	4b10      	ldr	r3, [pc, #64]	; (8002570 <HAL_RCC_OscConfig+0x478>)
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002534:	f7ff f9bc 	bl	80018b0 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800253c:	f7ff f9b8 	bl	80018b0 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e045      	b.n	80025da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254e:	4b06      	ldr	r3, [pc, #24]	; (8002568 <HAL_RCC_OscConfig+0x470>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0x444>
 800255a:	e03d      	b.n	80025d8 <HAL_RCC_OscConfig+0x4e0>
>>>>>>> parent of 2b78fa3 (line sensor)
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d107      	bne.n	8002bfc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e038      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	40007000 	.word	0x40007000
 8002bf8:	42470060 	.word	0x42470060
=======
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d107      	bne.n	8002574 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e038      	b.n	80025da <HAL_RCC_OscConfig+0x4e2>
 8002568:	40023800 	.word	0x40023800
 800256c:	40007000 	.word	0x40007000
 8002570:	42470060 	.word	0x42470060
>>>>>>> parent of 2b78fa3 (line sensor)
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
 8002bfc:	4b1b      	ldr	r3, [pc, #108]	; (8002c6c <HAL_RCC_OscConfig+0x4ec>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	60fb      	str	r3, [r7, #12]
=======
 8002574:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <HAL_RCC_OscConfig+0x4ec>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	60fb      	str	r3, [r7, #12]
>>>>>>> parent of 2b78fa3 (line sensor)
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
<<<<<<< HEAD
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d028      	beq.n	8002c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d121      	bne.n	8002c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d11a      	bne.n	8002c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d111      	bne.n	8002c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c42:	085b      	lsrs	r3, r3, #1
 8002c44:	3b01      	subs	r3, #1
 8002c46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d107      	bne.n	8002c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d001      	beq.n	8002c60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e000      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
=======
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d028      	beq.n	80025d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800258c:	429a      	cmp	r2, r3
 800258e:	d121      	bne.n	80025d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259a:	429a      	cmp	r2, r3
 800259c:	d11a      	bne.n	80025d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025a4:	4013      	ands	r3, r2
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d111      	bne.n	80025d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ba:	085b      	lsrs	r3, r3, #1
 80025bc:	3b01      	subs	r3, #1
 80025be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d107      	bne.n	80025d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d001      	beq.n	80025d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e000      	b.n	80025da <HAL_RCC_OscConfig+0x4e2>
>>>>>>> parent of 2b78fa3 (line sensor)
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40023800 	.word	0x40023800

08002c70 <HAL_RCC_ClockConfig>:
=======
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40023800 	.word	0x40023800

080025e8 <HAL_RCC_ClockConfig>:
>>>>>>> parent of 2b78fa3 (line sensor)
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
=======
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
>>>>>>> parent of 2b78fa3 (line sensor)
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e0cc      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1ae>
=======
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e0cc      	b.n	8002796 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> parent of 2b78fa3 (line sensor)
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8002c84:	4b68      	ldr	r3, [pc, #416]	; (8002e28 <HAL_RCC_ClockConfig+0x1b8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d90c      	bls.n	8002cac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c92:	4b65      	ldr	r3, [pc, #404]	; (8002e28 <HAL_RCC_ClockConfig+0x1b8>)
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	701a      	strb	r2, [r3, #0]
=======
 80025fc:	4b68      	ldr	r3, [pc, #416]	; (80027a0 <HAL_RCC_ClockConfig+0x1b8>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d90c      	bls.n	8002624 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260a:	4b65      	ldr	r3, [pc, #404]	; (80027a0 <HAL_RCC_ClockConfig+0x1b8>)
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	701a      	strb	r2, [r3, #0]
>>>>>>> parent of 2b78fa3 (line sensor)

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8002c9a:	4b63      	ldr	r3, [pc, #396]	; (8002e28 <HAL_RCC_ClockConfig+0x1b8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d001      	beq.n	8002cac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0b8      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1ae>
=======
 8002612:	4b63      	ldr	r3, [pc, #396]	; (80027a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	429a      	cmp	r2, r3
 800261e:	d001      	beq.n	8002624 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e0b8      	b.n	8002796 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> parent of 2b78fa3 (line sensor)
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d020      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x8a>
=======
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d020      	beq.n	8002672 <HAL_RCC_ClockConfig+0x8a>
>>>>>>> parent of 2b78fa3 (line sensor)
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cc4:	4b59      	ldr	r3, [pc, #356]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	4a58      	ldr	r2, [pc, #352]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0308 	and.w	r3, r3, #8
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cdc:	4b53      	ldr	r3, [pc, #332]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	4a52      	ldr	r2, [pc, #328]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ce6:	6093      	str	r3, [r2, #8]
=======
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800263c:	4b59      	ldr	r3, [pc, #356]	; (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	4a58      	ldr	r2, [pc, #352]	; (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002642:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002646:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0308 	and.w	r3, r3, #8
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002654:	4b53      	ldr	r3, [pc, #332]	; (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	4a52      	ldr	r2, [pc, #328]	; (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 800265a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800265e:	6093      	str	r3, [r2, #8]
>>>>>>> parent of 2b78fa3 (line sensor)
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 8002ce8:	4b50      	ldr	r3, [pc, #320]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	494d      	ldr	r1, [pc, #308]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	608b      	str	r3, [r1, #8]
=======
 8002660:	4b50      	ldr	r3, [pc, #320]	; (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	494d      	ldr	r1, [pc, #308]	; (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	4313      	orrs	r3, r2
 8002670:	608b      	str	r3, [r1, #8]
>>>>>>> parent of 2b78fa3 (line sensor)
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d044      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x120>
=======
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d044      	beq.n	8002708 <HAL_RCC_ClockConfig+0x120>
>>>>>>> parent of 2b78fa3 (line sensor)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d107      	bne.n	8002d1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0e:	4b47      	ldr	r3, [pc, #284]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d119      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e07f      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1ae>
=======
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d107      	bne.n	8002696 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002686:	4b47      	ldr	r3, [pc, #284]	; (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d119      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e07f      	b.n	8002796 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> parent of 2b78fa3 (line sensor)
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< HEAD
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d003      	beq.n	8002d2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d2a:	2b03      	cmp	r3, #3
 8002d2c:	d107      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d2e:	4b3f      	ldr	r3, [pc, #252]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d109      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e06f      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1ae>
=======
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d003      	beq.n	80026a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026a2:	2b03      	cmp	r3, #3
 80026a4:	d107      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a6:	4b3f      	ldr	r3, [pc, #252]	; (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d109      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e06f      	b.n	8002796 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> parent of 2b78fa3 (line sensor)
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 8002d3e:	4b3b      	ldr	r3, [pc, #236]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e067      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1ae>
=======
 80026b6:	4b3b      	ldr	r3, [pc, #236]	; (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e067      	b.n	8002796 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> parent of 2b78fa3 (line sensor)
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 8002d4e:	4b37      	ldr	r3, [pc, #220]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f023 0203 	bic.w	r2, r3, #3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	4934      	ldr	r1, [pc, #208]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d60:	f7ff f87c 	bl	8001e5c <HAL_GetTick>
 8002d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d66:	e00a      	b.n	8002d7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d68:	f7ff f878 	bl	8001e5c <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e04f      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7e:	4b2b      	ldr	r3, [pc, #172]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 020c 	and.w	r2, r3, #12
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d1eb      	bne.n	8002d68 <HAL_RCC_ClockConfig+0xf8>
=======
 80026c6:	4b37      	ldr	r3, [pc, #220]	; (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f023 0203 	bic.w	r2, r3, #3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	4934      	ldr	r1, [pc, #208]	; (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026d8:	f7ff f8ea 	bl	80018b0 <HAL_GetTick>
 80026dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026de:	e00a      	b.n	80026f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e0:	f7ff f8e6 	bl	80018b0 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e04f      	b.n	8002796 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f6:	4b2b      	ldr	r3, [pc, #172]	; (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 020c 	and.w	r2, r3, #12
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	429a      	cmp	r2, r3
 8002706:	d1eb      	bne.n	80026e0 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> parent of 2b78fa3 (line sensor)
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8002d90:	4b25      	ldr	r3, [pc, #148]	; (8002e28 <HAL_RCC_ClockConfig+0x1b8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d20c      	bcs.n	8002db8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9e:	4b22      	ldr	r3, [pc, #136]	; (8002e28 <HAL_RCC_ClockConfig+0x1b8>)
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	701a      	strb	r2, [r3, #0]
=======
 8002708:	4b25      	ldr	r3, [pc, #148]	; (80027a0 <HAL_RCC_ClockConfig+0x1b8>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d20c      	bcs.n	8002730 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002716:	4b22      	ldr	r3, [pc, #136]	; (80027a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	701a      	strb	r2, [r3, #0]
>>>>>>> parent of 2b78fa3 (line sensor)

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8002da6:	4b20      	ldr	r3, [pc, #128]	; (8002e28 <HAL_RCC_ClockConfig+0x1b8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d001      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e032      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1ae>
=======
 800271e:	4b20      	ldr	r3, [pc, #128]	; (80027a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d001      	beq.n	8002730 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e032      	b.n	8002796 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> parent of 2b78fa3 (line sensor)
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d008      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc4:	4b19      	ldr	r3, [pc, #100]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	4916      	ldr	r1, [pc, #88]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	608b      	str	r3, [r1, #8]
=======
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	d008      	beq.n	800274e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800273c:	4b19      	ldr	r3, [pc, #100]	; (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	4916      	ldr	r1, [pc, #88]	; (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	4313      	orrs	r3, r2
 800274c:	608b      	str	r3, [r1, #8]
>>>>>>> parent of 2b78fa3 (line sensor)
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d009      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002de2:	4b12      	ldr	r3, [pc, #72]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	490e      	ldr	r1, [pc, #56]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	608b      	str	r3, [r1, #8]
=======
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d009      	beq.n	800276e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800275a:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	490e      	ldr	r1, [pc, #56]	; (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	4313      	orrs	r3, r2
 800276c:	608b      	str	r3, [r1, #8]
>>>>>>> parent of 2b78fa3 (line sensor)
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 8002df6:	f000 f821 	bl	8002e3c <HAL_RCC_GetSysClockFreq>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	091b      	lsrs	r3, r3, #4
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	490a      	ldr	r1, [pc, #40]	; (8002e30 <HAL_RCC_ClockConfig+0x1c0>)
 8002e08:	5ccb      	ldrb	r3, [r1, r3]
 8002e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e0e:	4a09      	ldr	r2, [pc, #36]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e12:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <HAL_RCC_ClockConfig+0x1c8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe ffdc 	bl	8001dd4 <HAL_InitTick>

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40023c00 	.word	0x40023c00
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	080066a8 	.word	0x080066a8
 8002e34:	20000000 	.word	0x20000000
 8002e38:	20000004 	.word	0x20000004

08002e3c <HAL_RCC_GetSysClockFreq>:
=======
 800276e:	f000 f821 	bl	80027b4 <HAL_RCC_GetSysClockFreq>
 8002772:	4602      	mov	r2, r0
 8002774:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	091b      	lsrs	r3, r3, #4
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	490a      	ldr	r1, [pc, #40]	; (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002780:	5ccb      	ldrb	r3, [r1, r3]
 8002782:	fa22 f303 	lsr.w	r3, r2, r3
 8002786:	4a09      	ldr	r2, [pc, #36]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800278a:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <HAL_RCC_ClockConfig+0x1c8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff f84a 	bl	8001828 <HAL_InitTick>

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40023c00 	.word	0x40023c00
 80027a4:	40023800 	.word	0x40023800
 80027a8:	08004164 	.word	0x08004164
 80027ac:	20000000 	.word	0x20000000
 80027b0:	20000004 	.word	0x20000004

080027b4 <HAL_RCC_GetSysClockFreq>:
>>>>>>> parent of 2b78fa3 (line sensor)
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 8002e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e40:	b090      	sub	sp, #64	; 0x40
 8002e42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	637b      	str	r3, [r7, #52]	; 0x34
 8002e48:	2300      	movs	r3, #0
 8002e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e54:	4b59      	ldr	r3, [pc, #356]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x180>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 030c 	and.w	r3, r3, #12
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d00d      	beq.n	8002e7c <HAL_RCC_GetSysClockFreq+0x40>
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	f200 80a1 	bhi.w	8002fa8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d002      	beq.n	8002e70 <HAL_RCC_GetSysClockFreq+0x34>
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d003      	beq.n	8002e76 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e6e:	e09b      	b.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x16c>
=======
 80027b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027b8:	b090      	sub	sp, #64	; 0x40
 80027ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	637b      	str	r3, [r7, #52]	; 0x34
 80027c0:	2300      	movs	r3, #0
 80027c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027c4:	2300      	movs	r3, #0
 80027c6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80027c8:	2300      	movs	r3, #0
 80027ca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027cc:	4b59      	ldr	r3, [pc, #356]	; (8002934 <HAL_RCC_GetSysClockFreq+0x180>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 030c 	and.w	r3, r3, #12
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d00d      	beq.n	80027f4 <HAL_RCC_GetSysClockFreq+0x40>
 80027d8:	2b08      	cmp	r3, #8
 80027da:	f200 80a1 	bhi.w	8002920 <HAL_RCC_GetSysClockFreq+0x16c>
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <HAL_RCC_GetSysClockFreq+0x34>
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d003      	beq.n	80027ee <HAL_RCC_GetSysClockFreq+0x3a>
 80027e6:	e09b      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x16c>
>>>>>>> parent of 2b78fa3 (line sensor)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8002e70:	4b53      	ldr	r3, [pc, #332]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e72:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002e74:	e09b      	b.n	8002fae <HAL_RCC_GetSysClockFreq+0x172>
=======
 80027e8:	4b53      	ldr	r3, [pc, #332]	; (8002938 <HAL_RCC_GetSysClockFreq+0x184>)
 80027ea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80027ec:	e09b      	b.n	8002926 <HAL_RCC_GetSysClockFreq+0x172>
>>>>>>> parent of 2b78fa3 (line sensor)
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 8002e76:	4b53      	ldr	r3, [pc, #332]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e7a:	e098      	b.n	8002fae <HAL_RCC_GetSysClockFreq+0x172>
=======
 80027ee:	4b53      	ldr	r3, [pc, #332]	; (800293c <HAL_RCC_GetSysClockFreq+0x188>)
 80027f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027f2:	e098      	b.n	8002926 <HAL_RCC_GetSysClockFreq+0x172>
>>>>>>> parent of 2b78fa3 (line sensor)
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< HEAD
 8002e7c:	4b4f      	ldr	r3, [pc, #316]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x180>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e84:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e86:	4b4d      	ldr	r3, [pc, #308]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x180>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d028      	beq.n	8002ee4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e92:	4b4a      	ldr	r3, [pc, #296]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x180>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	099b      	lsrs	r3, r3, #6
 8002e98:	2200      	movs	r2, #0
 8002e9a:	623b      	str	r3, [r7, #32]
 8002e9c:	627a      	str	r2, [r7, #36]	; 0x24
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	4b47      	ldr	r3, [pc, #284]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ea8:	fb03 f201 	mul.w	r2, r3, r1
 8002eac:	2300      	movs	r3, #0
 8002eae:	fb00 f303 	mul.w	r3, r0, r3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	4a43      	ldr	r2, [pc, #268]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002eb6:	fba0 1202 	umull	r1, r2, r0, r2
 8002eba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ebc:	460a      	mov	r2, r1
 8002ebe:	62ba      	str	r2, [r7, #40]	; 0x28
 8002ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ec2:	4413      	add	r3, r2
 8002ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec8:	2200      	movs	r2, #0
 8002eca:	61bb      	str	r3, [r7, #24]
 8002ecc:	61fa      	str	r2, [r7, #28]
 8002ece:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ed2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ed6:	f7fd fdc9 	bl	8000a6c <__aeabi_uldivmod>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	4613      	mov	r3, r2
 8002ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ee2:	e053      	b.n	8002f8c <HAL_RCC_GetSysClockFreq+0x150>
=======
 80027f4:	4b4f      	ldr	r3, [pc, #316]	; (8002934 <HAL_RCC_GetSysClockFreq+0x180>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027fc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027fe:	4b4d      	ldr	r3, [pc, #308]	; (8002934 <HAL_RCC_GetSysClockFreq+0x180>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d028      	beq.n	800285c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800280a:	4b4a      	ldr	r3, [pc, #296]	; (8002934 <HAL_RCC_GetSysClockFreq+0x180>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	099b      	lsrs	r3, r3, #6
 8002810:	2200      	movs	r2, #0
 8002812:	623b      	str	r3, [r7, #32]
 8002814:	627a      	str	r2, [r7, #36]	; 0x24
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800281c:	2100      	movs	r1, #0
 800281e:	4b47      	ldr	r3, [pc, #284]	; (800293c <HAL_RCC_GetSysClockFreq+0x188>)
 8002820:	fb03 f201 	mul.w	r2, r3, r1
 8002824:	2300      	movs	r3, #0
 8002826:	fb00 f303 	mul.w	r3, r0, r3
 800282a:	4413      	add	r3, r2
 800282c:	4a43      	ldr	r2, [pc, #268]	; (800293c <HAL_RCC_GetSysClockFreq+0x188>)
 800282e:	fba0 1202 	umull	r1, r2, r0, r2
 8002832:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002834:	460a      	mov	r2, r1
 8002836:	62ba      	str	r2, [r7, #40]	; 0x28
 8002838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800283a:	4413      	add	r3, r2
 800283c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800283e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002840:	2200      	movs	r2, #0
 8002842:	61bb      	str	r3, [r7, #24]
 8002844:	61fa      	str	r2, [r7, #28]
 8002846:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800284a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800284e:	f7fe f8b1 	bl	80009b4 <__aeabi_uldivmod>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	4613      	mov	r3, r2
 8002858:	63fb      	str	r3, [r7, #60]	; 0x3c
 800285a:	e053      	b.n	8002904 <HAL_RCC_GetSysClockFreq+0x150>
>>>>>>> parent of 2b78fa3 (line sensor)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 8002ee4:	4b35      	ldr	r3, [pc, #212]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x180>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	099b      	lsrs	r3, r3, #6
 8002eea:	2200      	movs	r2, #0
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	617a      	str	r2, [r7, #20]
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002ef6:	f04f 0b00 	mov.w	fp, #0
 8002efa:	4652      	mov	r2, sl
 8002efc:	465b      	mov	r3, fp
 8002efe:	f04f 0000 	mov.w	r0, #0
 8002f02:	f04f 0100 	mov.w	r1, #0
 8002f06:	0159      	lsls	r1, r3, #5
 8002f08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f0c:	0150      	lsls	r0, r2, #5
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	ebb2 080a 	subs.w	r8, r2, sl
 8002f16:	eb63 090b 	sbc.w	r9, r3, fp
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f26:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f2a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f2e:	ebb2 0408 	subs.w	r4, r2, r8
 8002f32:	eb63 0509 	sbc.w	r5, r3, r9
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	00eb      	lsls	r3, r5, #3
 8002f40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f44:	00e2      	lsls	r2, r4, #3
 8002f46:	4614      	mov	r4, r2
 8002f48:	461d      	mov	r5, r3
 8002f4a:	eb14 030a 	adds.w	r3, r4, sl
 8002f4e:	603b      	str	r3, [r7, #0]
 8002f50:	eb45 030b 	adc.w	r3, r5, fp
 8002f54:	607b      	str	r3, [r7, #4]
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	f04f 0300 	mov.w	r3, #0
 8002f5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f62:	4629      	mov	r1, r5
 8002f64:	028b      	lsls	r3, r1, #10
 8002f66:	4621      	mov	r1, r4
 8002f68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f6c:	4621      	mov	r1, r4
 8002f6e:	028a      	lsls	r2, r1, #10
 8002f70:	4610      	mov	r0, r2
 8002f72:	4619      	mov	r1, r3
 8002f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f76:	2200      	movs	r2, #0
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	60fa      	str	r2, [r7, #12]
 8002f7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f80:	f7fd fd74 	bl	8000a6c <__aeabi_uldivmod>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4613      	mov	r3, r2
 8002f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x180>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	0c1b      	lsrs	r3, r3, #16
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	3301      	adds	r3, #1
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002f9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002fa6:	e002      	b.n	8002fae <HAL_RCC_GetSysClockFreq+0x172>
=======
 800285c:	4b35      	ldr	r3, [pc, #212]	; (8002934 <HAL_RCC_GetSysClockFreq+0x180>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	099b      	lsrs	r3, r3, #6
 8002862:	2200      	movs	r2, #0
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	617a      	str	r2, [r7, #20]
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800286e:	f04f 0b00 	mov.w	fp, #0
 8002872:	4652      	mov	r2, sl
 8002874:	465b      	mov	r3, fp
 8002876:	f04f 0000 	mov.w	r0, #0
 800287a:	f04f 0100 	mov.w	r1, #0
 800287e:	0159      	lsls	r1, r3, #5
 8002880:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002884:	0150      	lsls	r0, r2, #5
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	ebb2 080a 	subs.w	r8, r2, sl
 800288e:	eb63 090b 	sbc.w	r9, r3, fp
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	f04f 0300 	mov.w	r3, #0
 800289a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800289e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80028a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80028a6:	ebb2 0408 	subs.w	r4, r2, r8
 80028aa:	eb63 0509 	sbc.w	r5, r3, r9
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	f04f 0300 	mov.w	r3, #0
 80028b6:	00eb      	lsls	r3, r5, #3
 80028b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028bc:	00e2      	lsls	r2, r4, #3
 80028be:	4614      	mov	r4, r2
 80028c0:	461d      	mov	r5, r3
 80028c2:	eb14 030a 	adds.w	r3, r4, sl
 80028c6:	603b      	str	r3, [r7, #0]
 80028c8:	eb45 030b 	adc.w	r3, r5, fp
 80028cc:	607b      	str	r3, [r7, #4]
 80028ce:	f04f 0200 	mov.w	r2, #0
 80028d2:	f04f 0300 	mov.w	r3, #0
 80028d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028da:	4629      	mov	r1, r5
 80028dc:	028b      	lsls	r3, r1, #10
 80028de:	4621      	mov	r1, r4
 80028e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028e4:	4621      	mov	r1, r4
 80028e6:	028a      	lsls	r2, r1, #10
 80028e8:	4610      	mov	r0, r2
 80028ea:	4619      	mov	r1, r3
 80028ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ee:	2200      	movs	r2, #0
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	60fa      	str	r2, [r7, #12]
 80028f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028f8:	f7fe f85c 	bl	80009b4 <__aeabi_uldivmod>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4613      	mov	r3, r2
 8002902:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002904:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <HAL_RCC_GetSysClockFreq+0x180>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	0c1b      	lsrs	r3, r3, #16
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	3301      	adds	r3, #1
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002914:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002918:	fbb2 f3f3 	udiv	r3, r2, r3
 800291c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800291e:	e002      	b.n	8002926 <HAL_RCC_GetSysClockFreq+0x172>
>>>>>>> parent of 2b78fa3 (line sensor)
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8002fa8:	4b05      	ldr	r3, [pc, #20]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002faa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002fac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3740      	adds	r7, #64	; 0x40
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fba:	bf00      	nop
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	00f42400 	.word	0x00f42400
 8002fc4:	017d7840 	.word	0x017d7840

08002fc8 <HAL_RCC_GetHCLKFreq>:
=======
 8002920:	4b05      	ldr	r3, [pc, #20]	; (8002938 <HAL_RCC_GetSysClockFreq+0x184>)
 8002922:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002924:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002928:	4618      	mov	r0, r3
 800292a:	3740      	adds	r7, #64	; 0x40
 800292c:	46bd      	mov	sp, r7
 800292e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002932:	bf00      	nop
 8002934:	40023800 	.word	0x40023800
 8002938:	00f42400 	.word	0x00f42400
 800293c:	017d7840 	.word	0x017d7840

08002940 <HAL_RCC_GetHCLKFreq>:
>>>>>>> parent of 2b78fa3 (line sensor)
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fcc:	4b03      	ldr	r3, [pc, #12]	; (8002fdc <HAL_RCC_GetHCLKFreq+0x14>)
 8002fce:	681b      	ldr	r3, [r3, #0]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	20000000 	.word	0x20000000

08002fe0 <HAL_RCC_GetPCLK1Freq>:
=======
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002944:	4b03      	ldr	r3, [pc, #12]	; (8002954 <HAL_RCC_GetHCLKFreq+0x14>)
 8002946:	681b      	ldr	r3, [r3, #0]
}
 8002948:	4618      	mov	r0, r3
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	20000000 	.word	0x20000000

08002958 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> parent of 2b78fa3 (line sensor)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fe4:	f7ff fff0 	bl	8002fc8 <HAL_RCC_GetHCLKFreq>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	4b05      	ldr	r3, [pc, #20]	; (8003000 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	0a9b      	lsrs	r3, r3, #10
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	4903      	ldr	r1, [pc, #12]	; (8003004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ff6:	5ccb      	ldrb	r3, [r1, r3]
 8002ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40023800 	.word	0x40023800
 8003004:	080066b8 	.word	0x080066b8

08003008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800300c:	f7ff ffdc 	bl	8002fc8 <HAL_RCC_GetHCLKFreq>
 8003010:	4602      	mov	r2, r0
 8003012:	4b05      	ldr	r3, [pc, #20]	; (8003028 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	0b5b      	lsrs	r3, r3, #13
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	4903      	ldr	r1, [pc, #12]	; (800302c <HAL_RCC_GetPCLK2Freq+0x24>)
 800301e:	5ccb      	ldrb	r3, [r1, r3]
 8003020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003024:	4618      	mov	r0, r3
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40023800 	.word	0x40023800
 800302c:	080066b8 	.word	0x080066b8

08003030 <HAL_TIM_Base_Init>:
=======
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800295c:	f7ff fff0 	bl	8002940 <HAL_RCC_GetHCLKFreq>
 8002960:	4602      	mov	r2, r0
 8002962:	4b05      	ldr	r3, [pc, #20]	; (8002978 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	0a9b      	lsrs	r3, r3, #10
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	4903      	ldr	r1, [pc, #12]	; (800297c <HAL_RCC_GetPCLK1Freq+0x24>)
 800296e:	5ccb      	ldrb	r3, [r1, r3]
 8002970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002974:	4618      	mov	r0, r3
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40023800 	.word	0x40023800
 800297c:	08004174 	.word	0x08004174

08002980 <HAL_TIM_Base_Init>:
>>>>>>> parent of 2b78fa3 (line sensor)
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e041      	b.n	80030c6 <HAL_TIM_Base_Init+0x96>
=======
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e041      	b.n	8002a16 <HAL_TIM_Base_Init+0x96>
>>>>>>> parent of 2b78fa3 (line sensor)
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d106      	bne.n	800305c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d106      	bne.n	80029ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> parent of 2b78fa3 (line sensor)
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7fe fce2 	bl	8001a20 <HAL_TIM_Base_MspInit>
=======
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7fe fe06 	bl	80015b8 <HAL_TIM_Base_MspInit>
>>>>>>> parent of 2b78fa3 (line sensor)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2202      	movs	r2, #2
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3304      	adds	r3, #4
 800306c:	4619      	mov	r1, r3
 800306e:	4610      	mov	r0, r2
 8003070:	f000 ff4a 	bl	8003f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_TIM_PWM_Init>:
=======
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3304      	adds	r3, #4
 80029bc:	4619      	mov	r1, r3
 80029be:	4610      	mov	r0, r2
 80029c0:	f000 fe9a 	bl	80036f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_TIM_PWM_Init>:
>>>>>>> parent of 2b78fa3 (line sensor)
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e041      	b.n	8003164 <HAL_TIM_PWM_Init+0x96>
=======
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e041      	b.n	8002ab4 <HAL_TIM_PWM_Init+0x96>
>>>>>>> parent of 2b78fa3 (line sensor)
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d106      	bne.n	80030fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d106      	bne.n	8002a4a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> parent of 2b78fa3 (line sensor)
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
<<<<<<< HEAD
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f839 	bl	800316c <HAL_TIM_PWM_MspInit>
=======
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f839 	bl	8002abc <HAL_TIM_PWM_MspInit>
>>>>>>> parent of 2b78fa3 (line sensor)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2202      	movs	r2, #2
 80030fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	3304      	adds	r3, #4
 800310a:	4619      	mov	r1, r3
 800310c:	4610      	mov	r0, r2
 800310e:	f000 fefb 	bl	8003f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_TIM_PWM_MspInit>:
=======
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3304      	adds	r3, #4
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	f000 fe4b 	bl	80036f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_TIM_PWM_MspInit>:
>>>>>>> parent of 2b78fa3 (line sensor)
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
=======
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 2b78fa3 (line sensor)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d109      	bne.n	80031a4 <HAL_TIM_PWM_Start+0x24>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b01      	cmp	r3, #1
 800319a:	bf14      	ite	ne
 800319c:	2301      	movne	r3, #1
 800319e:	2300      	moveq	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	e022      	b.n	80031ea <HAL_TIM_PWM_Start+0x6a>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d109      	bne.n	80031be <HAL_TIM_PWM_Start+0x3e>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	bf14      	ite	ne
 80031b6:	2301      	movne	r3, #1
 80031b8:	2300      	moveq	r3, #0
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	e015      	b.n	80031ea <HAL_TIM_PWM_Start+0x6a>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d109      	bne.n	80031d8 <HAL_TIM_PWM_Start+0x58>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	bf14      	ite	ne
 80031d0:	2301      	movne	r3, #1
 80031d2:	2300      	moveq	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	e008      	b.n	80031ea <HAL_TIM_PWM_Start+0x6a>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	bf14      	ite	ne
 80031e4:	2301      	movne	r3, #1
 80031e6:	2300      	moveq	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e068      	b.n	80032c4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d104      	bne.n	8003202 <HAL_TIM_PWM_Start+0x82>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2202      	movs	r2, #2
 80031fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003200:	e013      	b.n	800322a <HAL_TIM_PWM_Start+0xaa>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2b04      	cmp	r3, #4
 8003206:	d104      	bne.n	8003212 <HAL_TIM_PWM_Start+0x92>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003210:	e00b      	b.n	800322a <HAL_TIM_PWM_Start+0xaa>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	2b08      	cmp	r3, #8
 8003216:	d104      	bne.n	8003222 <HAL_TIM_PWM_Start+0xa2>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003220:	e003      	b.n	800322a <HAL_TIM_PWM_Start+0xaa>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2202      	movs	r2, #2
 8003226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2201      	movs	r2, #1
 8003230:	6839      	ldr	r1, [r7, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f001 fabe 	bl	80047b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a23      	ldr	r2, [pc, #140]	; (80032cc <HAL_TIM_PWM_Start+0x14c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d107      	bne.n	8003252 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003250:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a1d      	ldr	r2, [pc, #116]	; (80032cc <HAL_TIM_PWM_Start+0x14c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d018      	beq.n	800328e <HAL_TIM_PWM_Start+0x10e>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003264:	d013      	beq.n	800328e <HAL_TIM_PWM_Start+0x10e>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a19      	ldr	r2, [pc, #100]	; (80032d0 <HAL_TIM_PWM_Start+0x150>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d00e      	beq.n	800328e <HAL_TIM_PWM_Start+0x10e>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a17      	ldr	r2, [pc, #92]	; (80032d4 <HAL_TIM_PWM_Start+0x154>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d009      	beq.n	800328e <HAL_TIM_PWM_Start+0x10e>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a16      	ldr	r2, [pc, #88]	; (80032d8 <HAL_TIM_PWM_Start+0x158>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d004      	beq.n	800328e <HAL_TIM_PWM_Start+0x10e>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a14      	ldr	r2, [pc, #80]	; (80032dc <HAL_TIM_PWM_Start+0x15c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d111      	bne.n	80032b2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2b06      	cmp	r3, #6
 800329e:	d010      	beq.n	80032c2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032b0:	e007      	b.n	80032c2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f042 0201 	orr.w	r2, r2, #1
 80032c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40010000 	.word	0x40010000
 80032d0:	40000400 	.word	0x40000400
 80032d4:	40000800 	.word	0x40000800
 80032d8:	40000c00 	.word	0x40000c00
 80032dc:	40014000 	.word	0x40014000

080032e0 <HAL_TIM_IC_Init>:
=======
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <HAL_TIM_IC_Init>:
>>>>>>> parent of 2b78fa3 (line sensor)
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e041      	b.n	8003376 <HAL_TIM_IC_Init+0x96>
=======
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e041      	b.n	8002b66 <HAL_TIM_IC_Init+0x96>
>>>>>>> parent of 2b78fa3 (line sensor)
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d106      	bne.n	800330c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d106      	bne.n	8002afc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> parent of 2b78fa3 (line sensor)
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
<<<<<<< HEAD
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7fe fb3a 	bl	8001980 <HAL_TIM_IC_MspInit>
=======
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7fe fd0e 	bl	8001518 <HAL_TIM_IC_MspInit>
>>>>>>> parent of 2b78fa3 (line sensor)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3304      	adds	r3, #4
 800331c:	4619      	mov	r1, r3
 800331e:	4610      	mov	r0, r2
 8003320:	f000 fdf2 	bl	8003f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <HAL_TIM_IC_Start>:
=======
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2202      	movs	r2, #2
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4610      	mov	r0, r2
 8002b10:	f000 fdf2 	bl	80036f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
	...

08002b70 <HAL_TIM_IC_Start>:
>>>>>>> parent of 2b78fa3 (line sensor)
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d104      	bne.n	800339a <HAL_TIM_IC_Start+0x1a>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003396:	b2db      	uxtb	r3, r3
 8003398:	e013      	b.n	80033c2 <HAL_TIM_IC_Start+0x42>
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b04      	cmp	r3, #4
 800339e:	d104      	bne.n	80033aa <HAL_TIM_IC_Start+0x2a>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	e00b      	b.n	80033c2 <HAL_TIM_IC_Start+0x42>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d104      	bne.n	80033ba <HAL_TIM_IC_Start+0x3a>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	e003      	b.n	80033c2 <HAL_TIM_IC_Start+0x42>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d104      	bne.n	80033d4 <HAL_TIM_IC_Start+0x54>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	e013      	b.n	80033fc <HAL_TIM_IC_Start+0x7c>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d104      	bne.n	80033e4 <HAL_TIM_IC_Start+0x64>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	e00b      	b.n	80033fc <HAL_TIM_IC_Start+0x7c>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d104      	bne.n	80033f4 <HAL_TIM_IC_Start+0x74>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	e003      	b.n	80033fc <HAL_TIM_IC_Start+0x7c>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	73bb      	strb	r3, [r7, #14]
=======
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d104      	bne.n	8002b8a <HAL_TIM_IC_Start+0x1a>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	e013      	b.n	8002bb2 <HAL_TIM_IC_Start+0x42>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2b04      	cmp	r3, #4
 8002b8e:	d104      	bne.n	8002b9a <HAL_TIM_IC_Start+0x2a>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	e00b      	b.n	8002bb2 <HAL_TIM_IC_Start+0x42>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d104      	bne.n	8002baa <HAL_TIM_IC_Start+0x3a>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	e003      	b.n	8002bb2 <HAL_TIM_IC_Start+0x42>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d104      	bne.n	8002bc4 <HAL_TIM_IC_Start+0x54>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	e013      	b.n	8002bec <HAL_TIM_IC_Start+0x7c>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d104      	bne.n	8002bd4 <HAL_TIM_IC_Start+0x64>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	e00b      	b.n	8002bec <HAL_TIM_IC_Start+0x7c>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d104      	bne.n	8002be4 <HAL_TIM_IC_Start+0x74>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	e003      	b.n	8002bec <HAL_TIM_IC_Start+0x7c>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	73bb      	strb	r3, [r7, #14]
>>>>>>> parent of 2b78fa3 (line sensor)

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
<<<<<<< HEAD
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d102      	bne.n	800340a <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003404:	7bbb      	ldrb	r3, [r7, #14]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d001      	beq.n	800340e <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e077      	b.n	80034fe <HAL_TIM_IC_Start+0x17e>
=======
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d102      	bne.n	8002bfa <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002bf4:	7bbb      	ldrb	r3, [r7, #14]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d001      	beq.n	8002bfe <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e077      	b.n	8002cee <HAL_TIM_IC_Start+0x17e>
>>>>>>> parent of 2b78fa3 (line sensor)
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d104      	bne.n	800341e <HAL_TIM_IC_Start+0x9e>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2202      	movs	r2, #2
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800341c:	e013      	b.n	8003446 <HAL_TIM_IC_Start+0xc6>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b04      	cmp	r3, #4
 8003422:	d104      	bne.n	800342e <HAL_TIM_IC_Start+0xae>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2202      	movs	r2, #2
 8003428:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800342c:	e00b      	b.n	8003446 <HAL_TIM_IC_Start+0xc6>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2b08      	cmp	r3, #8
 8003432:	d104      	bne.n	800343e <HAL_TIM_IC_Start+0xbe>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800343c:	e003      	b.n	8003446 <HAL_TIM_IC_Start+0xc6>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2202      	movs	r2, #2
 8003442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d104      	bne.n	8003456 <HAL_TIM_IC_Start+0xd6>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003454:	e013      	b.n	800347e <HAL_TIM_IC_Start+0xfe>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	2b04      	cmp	r3, #4
 800345a:	d104      	bne.n	8003466 <HAL_TIM_IC_Start+0xe6>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003464:	e00b      	b.n	800347e <HAL_TIM_IC_Start+0xfe>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b08      	cmp	r3, #8
 800346a:	d104      	bne.n	8003476 <HAL_TIM_IC_Start+0xf6>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003474:	e003      	b.n	800347e <HAL_TIM_IC_Start+0xfe>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2202      	movs	r2, #2
 800347a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2201      	movs	r2, #1
 8003484:	6839      	ldr	r1, [r7, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f001 f994 	bl	80047b4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a1d      	ldr	r2, [pc, #116]	; (8003508 <HAL_TIM_IC_Start+0x188>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d018      	beq.n	80034c8 <HAL_TIM_IC_Start+0x148>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800349e:	d013      	beq.n	80034c8 <HAL_TIM_IC_Start+0x148>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a19      	ldr	r2, [pc, #100]	; (800350c <HAL_TIM_IC_Start+0x18c>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d00e      	beq.n	80034c8 <HAL_TIM_IC_Start+0x148>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a18      	ldr	r2, [pc, #96]	; (8003510 <HAL_TIM_IC_Start+0x190>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d009      	beq.n	80034c8 <HAL_TIM_IC_Start+0x148>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a16      	ldr	r2, [pc, #88]	; (8003514 <HAL_TIM_IC_Start+0x194>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d004      	beq.n	80034c8 <HAL_TIM_IC_Start+0x148>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a15      	ldr	r2, [pc, #84]	; (8003518 <HAL_TIM_IC_Start+0x198>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d111      	bne.n	80034ec <HAL_TIM_IC_Start+0x16c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	2b06      	cmp	r3, #6
 80034d8:	d010      	beq.n	80034fc <HAL_TIM_IC_Start+0x17c>
    {
      __HAL_TIM_ENABLE(htim);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f042 0201 	orr.w	r2, r2, #1
 80034e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ea:	e007      	b.n	80034fc <HAL_TIM_IC_Start+0x17c>
=======
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d104      	bne.n	8002c0e <HAL_TIM_IC_Start+0x9e>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2202      	movs	r2, #2
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c0c:	e013      	b.n	8002c36 <HAL_TIM_IC_Start+0xc6>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d104      	bne.n	8002c1e <HAL_TIM_IC_Start+0xae>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c1c:	e00b      	b.n	8002c36 <HAL_TIM_IC_Start+0xc6>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d104      	bne.n	8002c2e <HAL_TIM_IC_Start+0xbe>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2202      	movs	r2, #2
 8002c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c2c:	e003      	b.n	8002c36 <HAL_TIM_IC_Start+0xc6>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2202      	movs	r2, #2
 8002c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d104      	bne.n	8002c46 <HAL_TIM_IC_Start+0xd6>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c44:	e013      	b.n	8002c6e <HAL_TIM_IC_Start+0xfe>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d104      	bne.n	8002c56 <HAL_TIM_IC_Start+0xe6>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c54:	e00b      	b.n	8002c6e <HAL_TIM_IC_Start+0xfe>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d104      	bne.n	8002c66 <HAL_TIM_IC_Start+0xf6>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c64:	e003      	b.n	8002c6e <HAL_TIM_IC_Start+0xfe>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2202      	movs	r2, #2
 8002c6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2201      	movs	r2, #1
 8002c74:	6839      	ldr	r1, [r7, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f001 f994 	bl	8003fa4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a1d      	ldr	r2, [pc, #116]	; (8002cf8 <HAL_TIM_IC_Start+0x188>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d018      	beq.n	8002cb8 <HAL_TIM_IC_Start+0x148>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c8e:	d013      	beq.n	8002cb8 <HAL_TIM_IC_Start+0x148>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a19      	ldr	r2, [pc, #100]	; (8002cfc <HAL_TIM_IC_Start+0x18c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d00e      	beq.n	8002cb8 <HAL_TIM_IC_Start+0x148>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a18      	ldr	r2, [pc, #96]	; (8002d00 <HAL_TIM_IC_Start+0x190>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d009      	beq.n	8002cb8 <HAL_TIM_IC_Start+0x148>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a16      	ldr	r2, [pc, #88]	; (8002d04 <HAL_TIM_IC_Start+0x194>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d004      	beq.n	8002cb8 <HAL_TIM_IC_Start+0x148>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a15      	ldr	r2, [pc, #84]	; (8002d08 <HAL_TIM_IC_Start+0x198>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d111      	bne.n	8002cdc <HAL_TIM_IC_Start+0x16c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2b06      	cmp	r3, #6
 8002cc8:	d010      	beq.n	8002cec <HAL_TIM_IC_Start+0x17c>
    {
      __HAL_TIM_ENABLE(htim);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f042 0201 	orr.w	r2, r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cda:	e007      	b.n	8002cec <HAL_TIM_IC_Start+0x17c>
>>>>>>> parent of 2b78fa3 (line sensor)
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0201 	orr.w	r2, r2, #1
 80034fa:	601a      	str	r2, [r3, #0]
=======
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0201 	orr.w	r2, r2, #1
 8002cea:	601a      	str	r2, [r3, #0]
>>>>>>> parent of 2b78fa3 (line sensor)
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40010000 	.word	0x40010000
 800350c:	40000400 	.word	0x40000400
 8003510:	40000800 	.word	0x40000800
 8003514:	40000c00 	.word	0x40000c00
 8003518:	40014000 	.word	0x40014000

0800351c <HAL_TIM_IC_Start_IT>:
=======
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40010000 	.word	0x40010000
 8002cfc:	40000400 	.word	0x40000400
 8002d00:	40000800 	.word	0x40000800
 8002d04:	40000c00 	.word	0x40000c00
 8002d08:	40014000 	.word	0x40014000

08002d0c <HAL_TIM_IC_Start_IT>:
>>>>>>> parent of 2b78fa3 (line sensor)
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003526:	2300      	movs	r3, #0
 8003528:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d104      	bne.n	800353a <HAL_TIM_IC_Start_IT+0x1e>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003536:	b2db      	uxtb	r3, r3
 8003538:	e013      	b.n	8003562 <HAL_TIM_IC_Start_IT+0x46>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	2b04      	cmp	r3, #4
 800353e:	d104      	bne.n	800354a <HAL_TIM_IC_Start_IT+0x2e>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003546:	b2db      	uxtb	r3, r3
 8003548:	e00b      	b.n	8003562 <HAL_TIM_IC_Start_IT+0x46>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b08      	cmp	r3, #8
 800354e:	d104      	bne.n	800355a <HAL_TIM_IC_Start_IT+0x3e>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003556:	b2db      	uxtb	r3, r3
 8003558:	e003      	b.n	8003562 <HAL_TIM_IC_Start_IT+0x46>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003560:	b2db      	uxtb	r3, r3
 8003562:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d104      	bne.n	8003574 <HAL_TIM_IC_Start_IT+0x58>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003570:	b2db      	uxtb	r3, r3
 8003572:	e013      	b.n	800359c <HAL_TIM_IC_Start_IT+0x80>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	2b04      	cmp	r3, #4
 8003578:	d104      	bne.n	8003584 <HAL_TIM_IC_Start_IT+0x68>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003580:	b2db      	uxtb	r3, r3
 8003582:	e00b      	b.n	800359c <HAL_TIM_IC_Start_IT+0x80>
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	2b08      	cmp	r3, #8
 8003588:	d104      	bne.n	8003594 <HAL_TIM_IC_Start_IT+0x78>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003590:	b2db      	uxtb	r3, r3
 8003592:	e003      	b.n	800359c <HAL_TIM_IC_Start_IT+0x80>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800359a:	b2db      	uxtb	r3, r3
 800359c:	737b      	strb	r3, [r7, #13]
=======
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d104      	bne.n	8002d2a <HAL_TIM_IC_Start_IT+0x1e>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	e013      	b.n	8002d52 <HAL_TIM_IC_Start_IT+0x46>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b04      	cmp	r3, #4
 8002d2e:	d104      	bne.n	8002d3a <HAL_TIM_IC_Start_IT+0x2e>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	e00b      	b.n	8002d52 <HAL_TIM_IC_Start_IT+0x46>
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	d104      	bne.n	8002d4a <HAL_TIM_IC_Start_IT+0x3e>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	e003      	b.n	8002d52 <HAL_TIM_IC_Start_IT+0x46>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d104      	bne.n	8002d64 <HAL_TIM_IC_Start_IT+0x58>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	e013      	b.n	8002d8c <HAL_TIM_IC_Start_IT+0x80>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d104      	bne.n	8002d74 <HAL_TIM_IC_Start_IT+0x68>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	e00b      	b.n	8002d8c <HAL_TIM_IC_Start_IT+0x80>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d104      	bne.n	8002d84 <HAL_TIM_IC_Start_IT+0x78>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	e003      	b.n	8002d8c <HAL_TIM_IC_Start_IT+0x80>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	737b      	strb	r3, [r7, #13]
>>>>>>> parent of 2b78fa3 (line sensor)

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
<<<<<<< HEAD
 800359e:	7bbb      	ldrb	r3, [r7, #14]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d102      	bne.n	80035aa <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80035a4:	7b7b      	ldrb	r3, [r7, #13]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d001      	beq.n	80035ae <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e0c2      	b.n	8003734 <HAL_TIM_IC_Start_IT+0x218>
=======
 8002d8e:	7bbb      	ldrb	r3, [r7, #14]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d102      	bne.n	8002d9a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d94:	7b7b      	ldrb	r3, [r7, #13]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d001      	beq.n	8002d9e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e0c2      	b.n	8002f24 <HAL_TIM_IC_Start_IT+0x218>
>>>>>>> parent of 2b78fa3 (line sensor)
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d104      	bne.n	80035be <HAL_TIM_IC_Start_IT+0xa2>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035bc:	e013      	b.n	80035e6 <HAL_TIM_IC_Start_IT+0xca>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d104      	bne.n	80035ce <HAL_TIM_IC_Start_IT+0xb2>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035cc:	e00b      	b.n	80035e6 <HAL_TIM_IC_Start_IT+0xca>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d104      	bne.n	80035de <HAL_TIM_IC_Start_IT+0xc2>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035dc:	e003      	b.n	80035e6 <HAL_TIM_IC_Start_IT+0xca>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2202      	movs	r2, #2
 80035e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d104      	bne.n	80035f6 <HAL_TIM_IC_Start_IT+0xda>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035f4:	e013      	b.n	800361e <HAL_TIM_IC_Start_IT+0x102>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2b04      	cmp	r3, #4
 80035fa:	d104      	bne.n	8003606 <HAL_TIM_IC_Start_IT+0xea>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2202      	movs	r2, #2
 8003600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003604:	e00b      	b.n	800361e <HAL_TIM_IC_Start_IT+0x102>
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2b08      	cmp	r3, #8
 800360a:	d104      	bne.n	8003616 <HAL_TIM_IC_Start_IT+0xfa>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2202      	movs	r2, #2
 8003610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003614:	e003      	b.n	800361e <HAL_TIM_IC_Start_IT+0x102>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2202      	movs	r2, #2
 800361a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b0c      	cmp	r3, #12
 8003622:	d841      	bhi.n	80036a8 <HAL_TIM_IC_Start_IT+0x18c>
 8003624:	a201      	add	r2, pc, #4	; (adr r2, 800362c <HAL_TIM_IC_Start_IT+0x110>)
 8003626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362a:	bf00      	nop
 800362c:	08003661 	.word	0x08003661
 8003630:	080036a9 	.word	0x080036a9
 8003634:	080036a9 	.word	0x080036a9
 8003638:	080036a9 	.word	0x080036a9
 800363c:	08003673 	.word	0x08003673
 8003640:	080036a9 	.word	0x080036a9
 8003644:	080036a9 	.word	0x080036a9
 8003648:	080036a9 	.word	0x080036a9
 800364c:	08003685 	.word	0x08003685
 8003650:	080036a9 	.word	0x080036a9
 8003654:	080036a9 	.word	0x080036a9
 8003658:	080036a9 	.word	0x080036a9
 800365c:	08003697 	.word	0x08003697
=======
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d104      	bne.n	8002dae <HAL_TIM_IC_Start_IT+0xa2>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dac:	e013      	b.n	8002dd6 <HAL_TIM_IC_Start_IT+0xca>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d104      	bne.n	8002dbe <HAL_TIM_IC_Start_IT+0xb2>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dbc:	e00b      	b.n	8002dd6 <HAL_TIM_IC_Start_IT+0xca>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d104      	bne.n	8002dce <HAL_TIM_IC_Start_IT+0xc2>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dcc:	e003      	b.n	8002dd6 <HAL_TIM_IC_Start_IT+0xca>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d104      	bne.n	8002de6 <HAL_TIM_IC_Start_IT+0xda>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002de4:	e013      	b.n	8002e0e <HAL_TIM_IC_Start_IT+0x102>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d104      	bne.n	8002df6 <HAL_TIM_IC_Start_IT+0xea>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002df4:	e00b      	b.n	8002e0e <HAL_TIM_IC_Start_IT+0x102>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d104      	bne.n	8002e06 <HAL_TIM_IC_Start_IT+0xfa>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e04:	e003      	b.n	8002e0e <HAL_TIM_IC_Start_IT+0x102>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2202      	movs	r2, #2
 8002e0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b0c      	cmp	r3, #12
 8002e12:	d841      	bhi.n	8002e98 <HAL_TIM_IC_Start_IT+0x18c>
 8002e14:	a201      	add	r2, pc, #4	; (adr r2, 8002e1c <HAL_TIM_IC_Start_IT+0x110>)
 8002e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1a:	bf00      	nop
 8002e1c:	08002e51 	.word	0x08002e51
 8002e20:	08002e99 	.word	0x08002e99
 8002e24:	08002e99 	.word	0x08002e99
 8002e28:	08002e99 	.word	0x08002e99
 8002e2c:	08002e63 	.word	0x08002e63
 8002e30:	08002e99 	.word	0x08002e99
 8002e34:	08002e99 	.word	0x08002e99
 8002e38:	08002e99 	.word	0x08002e99
 8002e3c:	08002e75 	.word	0x08002e75
 8002e40:	08002e99 	.word	0x08002e99
 8002e44:	08002e99 	.word	0x08002e99
 8002e48:	08002e99 	.word	0x08002e99
 8002e4c:	08002e87 	.word	0x08002e87
>>>>>>> parent of 2b78fa3 (line sensor)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
<<<<<<< HEAD
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0202 	orr.w	r2, r2, #2
 800366e:	60da      	str	r2, [r3, #12]
      break;
 8003670:	e01d      	b.n	80036ae <HAL_TIM_IC_Start_IT+0x192>
=======
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0202 	orr.w	r2, r2, #2
 8002e5e:	60da      	str	r2, [r3, #12]
      break;
 8002e60:	e01d      	b.n	8002e9e <HAL_TIM_IC_Start_IT+0x192>
>>>>>>> parent of 2b78fa3 (line sensor)
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
<<<<<<< HEAD
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68da      	ldr	r2, [r3, #12]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f042 0204 	orr.w	r2, r2, #4
 8003680:	60da      	str	r2, [r3, #12]
      break;
 8003682:	e014      	b.n	80036ae <HAL_TIM_IC_Start_IT+0x192>
=======
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f042 0204 	orr.w	r2, r2, #4
 8002e70:	60da      	str	r2, [r3, #12]
      break;
 8002e72:	e014      	b.n	8002e9e <HAL_TIM_IC_Start_IT+0x192>
>>>>>>> parent of 2b78fa3 (line sensor)
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
<<<<<<< HEAD
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0208 	orr.w	r2, r2, #8
 8003692:	60da      	str	r2, [r3, #12]
      break;
 8003694:	e00b      	b.n	80036ae <HAL_TIM_IC_Start_IT+0x192>
=======
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0208 	orr.w	r2, r2, #8
 8002e82:	60da      	str	r2, [r3, #12]
      break;
 8002e84:	e00b      	b.n	8002e9e <HAL_TIM_IC_Start_IT+0x192>
>>>>>>> parent of 2b78fa3 (line sensor)
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
<<<<<<< HEAD
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f042 0210 	orr.w	r2, r2, #16
 80036a4:	60da      	str	r2, [r3, #12]
      break;
 80036a6:	e002      	b.n	80036ae <HAL_TIM_IC_Start_IT+0x192>
=======
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f042 0210 	orr.w	r2, r2, #16
 8002e94:	60da      	str	r2, [r3, #12]
      break;
 8002e96:	e002      	b.n	8002e9e <HAL_TIM_IC_Start_IT+0x192>
>>>>>>> parent of 2b78fa3 (line sensor)
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 80036a8:	2301      	movs	r3, #1
 80036aa:	73fb      	strb	r3, [r7, #15]
      break;
 80036ac:	bf00      	nop
  }

  if (status == HAL_OK)
 80036ae:	7bfb      	ldrb	r3, [r7, #15]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d13e      	bne.n	8003732 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2201      	movs	r2, #1
 80036ba:	6839      	ldr	r1, [r7, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	f001 f879 	bl	80047b4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1d      	ldr	r2, [pc, #116]	; (800373c <HAL_TIM_IC_Start_IT+0x220>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d018      	beq.n	80036fe <HAL_TIM_IC_Start_IT+0x1e2>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d4:	d013      	beq.n	80036fe <HAL_TIM_IC_Start_IT+0x1e2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a19      	ldr	r2, [pc, #100]	; (8003740 <HAL_TIM_IC_Start_IT+0x224>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d00e      	beq.n	80036fe <HAL_TIM_IC_Start_IT+0x1e2>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a17      	ldr	r2, [pc, #92]	; (8003744 <HAL_TIM_IC_Start_IT+0x228>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d009      	beq.n	80036fe <HAL_TIM_IC_Start_IT+0x1e2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a16      	ldr	r2, [pc, #88]	; (8003748 <HAL_TIM_IC_Start_IT+0x22c>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d004      	beq.n	80036fe <HAL_TIM_IC_Start_IT+0x1e2>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a14      	ldr	r2, [pc, #80]	; (800374c <HAL_TIM_IC_Start_IT+0x230>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d111      	bne.n	8003722 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2b06      	cmp	r3, #6
 800370e:	d010      	beq.n	8003732 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0201 	orr.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003720:	e007      	b.n	8003732 <HAL_TIM_IC_Start_IT+0x216>
=======
 8002e98:	2301      	movs	r3, #1
 8002e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e9c:	bf00      	nop
  }

  if (status == HAL_OK)
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d13e      	bne.n	8002f22 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	6839      	ldr	r1, [r7, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f001 f879 	bl	8003fa4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a1d      	ldr	r2, [pc, #116]	; (8002f2c <HAL_TIM_IC_Start_IT+0x220>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d018      	beq.n	8002eee <HAL_TIM_IC_Start_IT+0x1e2>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec4:	d013      	beq.n	8002eee <HAL_TIM_IC_Start_IT+0x1e2>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a19      	ldr	r2, [pc, #100]	; (8002f30 <HAL_TIM_IC_Start_IT+0x224>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d00e      	beq.n	8002eee <HAL_TIM_IC_Start_IT+0x1e2>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a17      	ldr	r2, [pc, #92]	; (8002f34 <HAL_TIM_IC_Start_IT+0x228>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d009      	beq.n	8002eee <HAL_TIM_IC_Start_IT+0x1e2>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a16      	ldr	r2, [pc, #88]	; (8002f38 <HAL_TIM_IC_Start_IT+0x22c>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d004      	beq.n	8002eee <HAL_TIM_IC_Start_IT+0x1e2>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a14      	ldr	r2, [pc, #80]	; (8002f3c <HAL_TIM_IC_Start_IT+0x230>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d111      	bne.n	8002f12 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b06      	cmp	r3, #6
 8002efe:	d010      	beq.n	8002f22 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f10:	e007      	b.n	8002f22 <HAL_TIM_IC_Start_IT+0x216>
>>>>>>> parent of 2b78fa3 (line sensor)
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f042 0201 	orr.w	r2, r2, #1
 8003730:	601a      	str	r2, [r3, #0]
=======
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f042 0201 	orr.w	r2, r2, #1
 8002f20:	601a      	str	r2, [r3, #0]
>>>>>>> parent of 2b78fa3 (line sensor)
    }
  }

  /* Return function status */
  return status;
<<<<<<< HEAD
 8003732:	7bfb      	ldrb	r3, [r7, #15]
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40010000 	.word	0x40010000
 8003740:	40000400 	.word	0x40000400
 8003744:	40000800 	.word	0x40000800
 8003748:	40000c00 	.word	0x40000c00
 800374c:	40014000 	.word	0x40014000

08003750 <HAL_TIM_IRQHandler>:
=======
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40010000 	.word	0x40010000
 8002f30:	40000400 	.word	0x40000400
 8002f34:	40000800 	.word	0x40000800
 8002f38:	40000c00 	.word	0x40000c00
 8002f3c:	40014000 	.word	0x40014000

08002f40 <HAL_TIM_IRQHandler>:
>>>>>>> parent of 2b78fa3 (line sensor)
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b02      	cmp	r3, #2
 8003764:	d122      	bne.n	80037ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b02      	cmp	r3, #2
 8003772:	d11b      	bne.n	80037ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f06f 0202 	mvn.w	r2, #2
 800377c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_TIM_IRQHandler+0x4a>
=======
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d122      	bne.n	8002f9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d11b      	bne.n	8002f9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0202 	mvn.w	r2, #2
 8002f6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_TIM_IRQHandler+0x4a>
>>>>>>> parent of 2b78fa3 (line sensor)
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7fd fb80 	bl	8000e98 <HAL_TIM_IC_CaptureCallback>
 8003798:	e005      	b.n	80037a6 <HAL_TIM_IRQHandler+0x56>
=======
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7fd feb4 	bl	8000cf0 <HAL_TIM_IC_CaptureCallback>
 8002f88:	e005      	b.n	8002f96 <HAL_TIM_IRQHandler+0x56>
>>>>>>> parent of 2b78fa3 (line sensor)
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fb96 	bl	8003ecc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 fb9d 	bl	8003ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	771a      	strb	r2, [r3, #28]
=======
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fb96 	bl	80036bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 fb9d 	bl	80036d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	771a      	strb	r2, [r3, #28]
>>>>>>> parent of 2b78fa3 (line sensor)
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< HEAD
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d122      	bne.n	8003800 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d11b      	bne.n	8003800 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f06f 0204 	mvn.w	r2, #4
 80037d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2202      	movs	r2, #2
 80037d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_TIM_IRQHandler+0x9e>
=======
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d122      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d11b      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f06f 0204 	mvn.w	r2, #4
 8002fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_TIM_IRQHandler+0x9e>
>>>>>>> parent of 2b78fa3 (line sensor)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7fd fb56 	bl	8000e98 <HAL_TIM_IC_CaptureCallback>
 80037ec:	e005      	b.n	80037fa <HAL_TIM_IRQHandler+0xaa>
=======
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7fd fe8a 	bl	8000cf0 <HAL_TIM_IC_CaptureCallback>
 8002fdc:	e005      	b.n	8002fea <HAL_TIM_IRQHandler+0xaa>
>>>>>>> parent of 2b78fa3 (line sensor)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fb6c 	bl	8003ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 fb73 	bl	8003ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	771a      	strb	r2, [r3, #28]
=======
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fb6c 	bl	80036bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 fb73 	bl	80036d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	771a      	strb	r2, [r3, #28]
>>>>>>> parent of 2b78fa3 (line sensor)
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< HEAD
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f003 0308 	and.w	r3, r3, #8
 800380a:	2b08      	cmp	r3, #8
 800380c:	d122      	bne.n	8003854 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	2b08      	cmp	r3, #8
 800381a:	d11b      	bne.n	8003854 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f06f 0208 	mvn.w	r2, #8
 8003824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2204      	movs	r2, #4
 800382a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	f003 0303 	and.w	r3, r3, #3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_TIM_IRQHandler+0xf2>
=======
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d122      	bne.n	8003044 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b08      	cmp	r3, #8
 800300a:	d11b      	bne.n	8003044 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f06f 0208 	mvn.w	r2, #8
 8003014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2204      	movs	r2, #4
 800301a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_TIM_IRQHandler+0xf2>
>>>>>>> parent of 2b78fa3 (line sensor)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7fd fb2c 	bl	8000e98 <HAL_TIM_IC_CaptureCallback>
 8003840:	e005      	b.n	800384e <HAL_TIM_IRQHandler+0xfe>
=======
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7fd fe60 	bl	8000cf0 <HAL_TIM_IC_CaptureCallback>
 8003030:	e005      	b.n	800303e <HAL_TIM_IRQHandler+0xfe>
>>>>>>> parent of 2b78fa3 (line sensor)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 fb42 	bl	8003ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 fb49 	bl	8003ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	771a      	strb	r2, [r3, #28]
=======
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 fb42 	bl	80036bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 fb49 	bl	80036d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	771a      	strb	r2, [r3, #28]
>>>>>>> parent of 2b78fa3 (line sensor)
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< HEAD
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	f003 0310 	and.w	r3, r3, #16
 800385e:	2b10      	cmp	r3, #16
 8003860:	d122      	bne.n	80038a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f003 0310 	and.w	r3, r3, #16
 800386c:	2b10      	cmp	r3, #16
 800386e:	d11b      	bne.n	80038a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f06f 0210 	mvn.w	r2, #16
 8003878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2208      	movs	r2, #8
 800387e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_TIM_IRQHandler+0x146>
=======
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f003 0310 	and.w	r3, r3, #16
 800304e:	2b10      	cmp	r3, #16
 8003050:	d122      	bne.n	8003098 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f003 0310 	and.w	r3, r3, #16
 800305c:	2b10      	cmp	r3, #16
 800305e:	d11b      	bne.n	8003098 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f06f 0210 	mvn.w	r2, #16
 8003068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2208      	movs	r2, #8
 800306e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_TIM_IRQHandler+0x146>
>>>>>>> parent of 2b78fa3 (line sensor)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7fd fb02 	bl	8000e98 <HAL_TIM_IC_CaptureCallback>
 8003894:	e005      	b.n	80038a2 <HAL_TIM_IRQHandler+0x152>
=======
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7fd fe36 	bl	8000cf0 <HAL_TIM_IC_CaptureCallback>
 8003084:	e005      	b.n	8003092 <HAL_TIM_IRQHandler+0x152>
>>>>>>> parent of 2b78fa3 (line sensor)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 fb18 	bl	8003ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 fb1f 	bl	8003ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	771a      	strb	r2, [r3, #28]
=======
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fb18 	bl	80036bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fb1f 	bl	80036d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	771a      	strb	r2, [r3, #28]
>>>>>>> parent of 2b78fa3 (line sensor)
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< HEAD
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d10e      	bne.n	80038d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d107      	bne.n	80038d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f06f 0201 	mvn.w	r2, #1
 80038cc:	611a      	str	r2, [r3, #16]
=======
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d10e      	bne.n	80030c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d107      	bne.n	80030c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f06f 0201 	mvn.w	r2, #1
 80030bc:	611a      	str	r2, [r3, #16]
>>>>>>> parent of 2b78fa3 (line sensor)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 faf2 	bl	8003eb8 <HAL_TIM_PeriodElapsedCallback>
=======
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 faf2 	bl	80036a8 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> parent of 2b78fa3 (line sensor)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< HEAD
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038de:	2b80      	cmp	r3, #128	; 0x80
 80038e0:	d10e      	bne.n	8003900 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ec:	2b80      	cmp	r3, #128	; 0x80
 80038ee:	d107      	bne.n	8003900 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038f8:	611a      	str	r2, [r3, #16]
=======
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ce:	2b80      	cmp	r3, #128	; 0x80
 80030d0:	d10e      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030dc:	2b80      	cmp	r3, #128	; 0x80
 80030de:	d107      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030e8:	611a      	str	r2, [r3, #16]
>>>>>>> parent of 2b78fa3 (line sensor)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 fff8 	bl	80048f0 <HAL_TIMEx_BreakCallback>
=======
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 fff8 	bl	80040e0 <HAL_TIMEx_BreakCallback>
>>>>>>> parent of 2b78fa3 (line sensor)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< HEAD
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390a:	2b40      	cmp	r3, #64	; 0x40
 800390c:	d10e      	bne.n	800392c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003918:	2b40      	cmp	r3, #64	; 0x40
 800391a:	d107      	bne.n	800392c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003924:	611a      	str	r2, [r3, #16]
=======
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fa:	2b40      	cmp	r3, #64	; 0x40
 80030fc:	d10e      	bne.n	800311c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003108:	2b40      	cmp	r3, #64	; 0x40
 800310a:	d107      	bne.n	800311c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003114:	611a      	str	r2, [r3, #16]
>>>>>>> parent of 2b78fa3 (line sensor)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 fae4 	bl	8003ef4 <HAL_TIM_TriggerCallback>
=======
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 fae4 	bl	80036e4 <HAL_TIM_TriggerCallback>
>>>>>>> parent of 2b78fa3 (line sensor)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< HEAD
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f003 0320 	and.w	r3, r3, #32
 8003936:	2b20      	cmp	r3, #32
 8003938:	d10e      	bne.n	8003958 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f003 0320 	and.w	r3, r3, #32
 8003944:	2b20      	cmp	r3, #32
 8003946:	d107      	bne.n	8003958 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f06f 0220 	mvn.w	r2, #32
 8003950:	611a      	str	r2, [r3, #16]
=======
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	2b20      	cmp	r3, #32
 8003128:	d10e      	bne.n	8003148 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f003 0320 	and.w	r3, r3, #32
 8003134:	2b20      	cmp	r3, #32
 8003136:	d107      	bne.n	8003148 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f06f 0220 	mvn.w	r2, #32
 8003140:	611a      	str	r2, [r3, #16]
>>>>>>> parent of 2b78fa3 (line sensor)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 ffc2 	bl	80048dc <HAL_TIMEx_CommutCallback>
=======
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 ffc2 	bl	80040cc <HAL_TIMEx_CommutCallback>
>>>>>>> parent of 2b78fa3 (line sensor)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 8003958:	bf00      	nop
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_TIM_IC_ConfigChannel>:
=======
 8003148:	bf00      	nop
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_TIM_IC_ConfigChannel>:
>>>>>>> parent of 2b78fa3 (line sensor)
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
<<<<<<< HEAD
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	75fb      	strb	r3, [r7, #23]
=======
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	75fb      	strb	r3, [r7, #23]
>>>>>>> parent of 2b78fa3 (line sensor)
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003976:	2b01      	cmp	r3, #1
 8003978:	d101      	bne.n	800397e <HAL_TIM_IC_ConfigChannel+0x1e>
 800397a:	2302      	movs	r3, #2
 800397c:	e088      	b.n	8003a90 <HAL_TIM_IC_ConfigChannel+0x130>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d11b      	bne.n	80039c4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6818      	ldr	r0, [r3, #0]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	6819      	ldr	r1, [r3, #0]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f000 fd52 	bl	8004444 <TIM_TI1_SetConfig>
=======
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003166:	2b01      	cmp	r3, #1
 8003168:	d101      	bne.n	800316e <HAL_TIM_IC_ConfigChannel+0x1e>
 800316a:	2302      	movs	r3, #2
 800316c:	e088      	b.n	8003280 <HAL_TIM_IC_ConfigChannel+0x130>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d11b      	bne.n	80031b4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6818      	ldr	r0, [r3, #0]
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	6819      	ldr	r1, [r3, #0]
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f000 fd52 	bl	8003c34 <TIM_TI1_SetConfig>
>>>>>>> parent of 2b78fa3 (line sensor)
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
<<<<<<< HEAD
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699a      	ldr	r2, [r3, #24]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 020c 	bic.w	r2, r2, #12
 80039ae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6999      	ldr	r1, [r3, #24]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	689a      	ldr	r2, [r3, #8]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	619a      	str	r2, [r3, #24]
 80039c2:	e060      	b.n	8003a86 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d11c      	bne.n	8003a04 <HAL_TIM_IC_ConfigChannel+0xa4>
=======
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	699a      	ldr	r2, [r3, #24]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 020c 	bic.w	r2, r2, #12
 800319e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6999      	ldr	r1, [r3, #24]
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	619a      	str	r2, [r3, #24]
 80031b2:	e060      	b.n	8003276 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d11c      	bne.n	80031f4 <HAL_TIM_IC_ConfigChannel+0xa4>
>>>>>>> parent of 2b78fa3 (line sensor)
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
<<<<<<< HEAD
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6818      	ldr	r0, [r3, #0]
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	6819      	ldr	r1, [r3, #0]
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f000 fdca 	bl	8004572 <TIM_TI2_SetConfig>
=======
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6818      	ldr	r0, [r3, #0]
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	6819      	ldr	r1, [r3, #0]
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	f000 fdca 	bl	8003d62 <TIM_TI2_SetConfig>
>>>>>>> parent of 2b78fa3 (line sensor)
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
<<<<<<< HEAD
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	699a      	ldr	r2, [r3, #24]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80039ec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6999      	ldr	r1, [r3, #24]
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	021a      	lsls	r2, r3, #8
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	619a      	str	r2, [r3, #24]
 8003a02:	e040      	b.n	8003a86 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d11b      	bne.n	8003a42 <HAL_TIM_IC_ConfigChannel+0xe2>
=======
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	699a      	ldr	r2, [r3, #24]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80031dc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6999      	ldr	r1, [r3, #24]
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	021a      	lsls	r2, r3, #8
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	619a      	str	r2, [r3, #24]
 80031f2:	e040      	b.n	8003276 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d11b      	bne.n	8003232 <HAL_TIM_IC_ConfigChannel+0xe2>
>>>>>>> parent of 2b78fa3 (line sensor)
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
<<<<<<< HEAD
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6818      	ldr	r0, [r3, #0]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	6819      	ldr	r1, [r3, #0]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f000 fe17 	bl	800464c <TIM_TI3_SetConfig>
=======
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	6819      	ldr	r1, [r3, #0]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f000 fe17 	bl	8003e3c <TIM_TI3_SetConfig>
>>>>>>> parent of 2b78fa3 (line sensor)
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
<<<<<<< HEAD
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	69da      	ldr	r2, [r3, #28]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 020c 	bic.w	r2, r2, #12
 8003a2c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	69d9      	ldr	r1, [r3, #28]
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	689a      	ldr	r2, [r3, #8]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	61da      	str	r2, [r3, #28]
 8003a40:	e021      	b.n	8003a86 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b0c      	cmp	r3, #12
 8003a46:	d11c      	bne.n	8003a82 <HAL_TIM_IC_ConfigChannel+0x122>
=======
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	69da      	ldr	r2, [r3, #28]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 020c 	bic.w	r2, r2, #12
 800321c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69d9      	ldr	r1, [r3, #28]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	61da      	str	r2, [r3, #28]
 8003230:	e021      	b.n	8003276 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b0c      	cmp	r3, #12
 8003236:	d11c      	bne.n	8003272 <HAL_TIM_IC_ConfigChannel+0x122>
>>>>>>> parent of 2b78fa3 (line sensor)
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
<<<<<<< HEAD
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6818      	ldr	r0, [r3, #0]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	6819      	ldr	r1, [r3, #0]
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f000 fe34 	bl	80046c4 <TIM_TI4_SetConfig>
=======
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6818      	ldr	r0, [r3, #0]
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	6819      	ldr	r1, [r3, #0]
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f000 fe34 	bl	8003eb4 <TIM_TI4_SetConfig>
>>>>>>> parent of 2b78fa3 (line sensor)
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
<<<<<<< HEAD
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	69da      	ldr	r2, [r3, #28]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a6a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	69d9      	ldr	r1, [r3, #28]
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	021a      	lsls	r2, r3, #8
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	61da      	str	r2, [r3, #28]
 8003a80:	e001      	b.n	8003a86 <HAL_TIM_IC_ConfigChannel+0x126>
=======
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	69da      	ldr	r2, [r3, #28]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800325a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	69d9      	ldr	r1, [r3, #28]
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	021a      	lsls	r2, r3, #8
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	61da      	str	r2, [r3, #28]
 8003270:	e001      	b.n	8003276 <HAL_TIM_IC_ConfigChannel+0x126>
>>>>>>> parent of 2b78fa3 (line sensor)
  }
  else
  {
    status = HAL_ERROR;
<<<<<<< HEAD
 8003a82:	2301      	movs	r3, #1
 8003a84:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_TIM_PWM_ConfigChannel>:
=======
 8003272:	2301      	movs	r3, #1
 8003274:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800327e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <HAL_TIM_PWM_ConfigChannel>:
>>>>>>> parent of 2b78fa3 (line sensor)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
<<<<<<< HEAD
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	75fb      	strb	r3, [r7, #23]
=======
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	75fb      	strb	r3, [r7, #23]
>>>>>>> parent of 2b78fa3 (line sensor)
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d101      	bne.n	8003ab6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	e0ae      	b.n	8003c14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b0c      	cmp	r3, #12
 8003ac2:	f200 809f 	bhi.w	8003c04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ac6:	a201      	add	r2, pc, #4	; (adr r2, 8003acc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003acc:	08003b01 	.word	0x08003b01
 8003ad0:	08003c05 	.word	0x08003c05
 8003ad4:	08003c05 	.word	0x08003c05
 8003ad8:	08003c05 	.word	0x08003c05
 8003adc:	08003b41 	.word	0x08003b41
 8003ae0:	08003c05 	.word	0x08003c05
 8003ae4:	08003c05 	.word	0x08003c05
 8003ae8:	08003c05 	.word	0x08003c05
 8003aec:	08003b83 	.word	0x08003b83
 8003af0:	08003c05 	.word	0x08003c05
 8003af4:	08003c05 	.word	0x08003c05
 8003af8:	08003c05 	.word	0x08003c05
 8003afc:	08003bc3 	.word	0x08003bc3
=======
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d101      	bne.n	80032a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032a2:	2302      	movs	r3, #2
 80032a4:	e0ae      	b.n	8003404 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b0c      	cmp	r3, #12
 80032b2:	f200 809f 	bhi.w	80033f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80032b6:	a201      	add	r2, pc, #4	; (adr r2, 80032bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032bc:	080032f1 	.word	0x080032f1
 80032c0:	080033f5 	.word	0x080033f5
 80032c4:	080033f5 	.word	0x080033f5
 80032c8:	080033f5 	.word	0x080033f5
 80032cc:	08003331 	.word	0x08003331
 80032d0:	080033f5 	.word	0x080033f5
 80032d4:	080033f5 	.word	0x080033f5
 80032d8:	080033f5 	.word	0x080033f5
 80032dc:	08003373 	.word	0x08003373
 80032e0:	080033f5 	.word	0x080033f5
 80032e4:	080033f5 	.word	0x080033f5
 80032e8:	080033f5 	.word	0x080033f5
 80032ec:	080033b3 	.word	0x080033b3
>>>>>>> parent of 2b78fa3 (line sensor)
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68b9      	ldr	r1, [r7, #8]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fa7e 	bl	8004008 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699a      	ldr	r2, [r3, #24]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0208 	orr.w	r2, r2, #8
 8003b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	699a      	ldr	r2, [r3, #24]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0204 	bic.w	r2, r2, #4
 8003b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6999      	ldr	r1, [r3, #24]
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	691a      	ldr	r2, [r3, #16]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	619a      	str	r2, [r3, #24]
      break;
 8003b3e:	e064      	b.n	8003c0a <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68b9      	ldr	r1, [r7, #8]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fa7e 	bl	80037f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699a      	ldr	r2, [r3, #24]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0208 	orr.w	r2, r2, #8
 800330a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699a      	ldr	r2, [r3, #24]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0204 	bic.w	r2, r2, #4
 800331a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6999      	ldr	r1, [r3, #24]
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	691a      	ldr	r2, [r3, #16]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	619a      	str	r2, [r3, #24]
      break;
 800332e:	e064      	b.n	80033fa <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> parent of 2b78fa3 (line sensor)
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68b9      	ldr	r1, [r7, #8]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 fac4 	bl	80040d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699a      	ldr	r2, [r3, #24]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699a      	ldr	r2, [r3, #24]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6999      	ldr	r1, [r3, #24]
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	021a      	lsls	r2, r3, #8
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	619a      	str	r2, [r3, #24]
      break;
 8003b80:	e043      	b.n	8003c0a <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68b9      	ldr	r1, [r7, #8]
 8003336:	4618      	mov	r0, r3
 8003338:	f000 fac4 	bl	80038c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699a      	ldr	r2, [r3, #24]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800334a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699a      	ldr	r2, [r3, #24]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800335a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6999      	ldr	r1, [r3, #24]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	021a      	lsls	r2, r3, #8
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	619a      	str	r2, [r3, #24]
      break;
 8003370:	e043      	b.n	80033fa <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> parent of 2b78fa3 (line sensor)
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68b9      	ldr	r1, [r7, #8]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 fb0f 	bl	80041ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	69da      	ldr	r2, [r3, #28]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f042 0208 	orr.w	r2, r2, #8
 8003b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	69da      	ldr	r2, [r3, #28]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0204 	bic.w	r2, r2, #4
 8003bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	69d9      	ldr	r1, [r3, #28]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	691a      	ldr	r2, [r3, #16]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	61da      	str	r2, [r3, #28]
      break;
 8003bc0:	e023      	b.n	8003c0a <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68b9      	ldr	r1, [r7, #8]
 8003378:	4618      	mov	r0, r3
 800337a:	f000 fb0f 	bl	800399c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	69da      	ldr	r2, [r3, #28]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 0208 	orr.w	r2, r2, #8
 800338c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	69da      	ldr	r2, [r3, #28]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0204 	bic.w	r2, r2, #4
 800339c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	69d9      	ldr	r1, [r3, #28]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	691a      	ldr	r2, [r3, #16]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	61da      	str	r2, [r3, #28]
      break;
 80033b0:	e023      	b.n	80033fa <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> parent of 2b78fa3 (line sensor)
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68b9      	ldr	r1, [r7, #8]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 fb59 	bl	8004280 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	69da      	ldr	r2, [r3, #28]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	69da      	ldr	r2, [r3, #28]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	69d9      	ldr	r1, [r3, #28]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	021a      	lsls	r2, r3, #8
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	61da      	str	r2, [r3, #28]
      break;
 8003c02:	e002      	b.n	8003c0a <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68b9      	ldr	r1, [r7, #8]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 fb59 	bl	8003a70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	69da      	ldr	r2, [r3, #28]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	69da      	ldr	r2, [r3, #28]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	69d9      	ldr	r1, [r3, #28]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	021a      	lsls	r2, r3, #8
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	61da      	str	r2, [r3, #28]
      break;
 80033f2:	e002      	b.n	80033fa <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> parent of 2b78fa3 (line sensor)
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 8003c04:	2301      	movs	r3, #1
 8003c06:	75fb      	strb	r3, [r7, #23]
      break;
 8003c08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3718      	adds	r7, #24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_TIM_ConfigClockSource>:
=======
 80033f4:	2301      	movs	r3, #1
 80033f6:	75fb      	strb	r3, [r7, #23]
      break;
 80033f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003402:	7dfb      	ldrb	r3, [r7, #23]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3718      	adds	r7, #24
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_TIM_ConfigClockSource>:
>>>>>>> parent of 2b78fa3 (line sensor)
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< HEAD
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c26:	2300      	movs	r3, #0
 8003c28:	73fb      	strb	r3, [r7, #15]
=======
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003416:	2300      	movs	r3, #0
 8003418:	73fb      	strb	r3, [r7, #15]
>>>>>>> parent of 2b78fa3 (line sensor)
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <HAL_TIM_ConfigClockSource+0x1c>
 8003c34:	2302      	movs	r3, #2
 8003c36:	e0b4      	b.n	8003da2 <HAL_TIM_ConfigClockSource+0x186>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003420:	2b01      	cmp	r3, #1
 8003422:	d101      	bne.n	8003428 <HAL_TIM_ConfigClockSource+0x1c>
 8003424:	2302      	movs	r3, #2
 8003426:	e0b4      	b.n	8003592 <HAL_TIM_ConfigClockSource+0x186>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2202      	movs	r2, #2
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> parent of 2b78fa3 (line sensor)

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c70:	d03e      	beq.n	8003cf0 <HAL_TIM_ConfigClockSource+0xd4>
 8003c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c76:	f200 8087 	bhi.w	8003d88 <HAL_TIM_ConfigClockSource+0x16c>
 8003c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c7e:	f000 8086 	beq.w	8003d8e <HAL_TIM_ConfigClockSource+0x172>
 8003c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c86:	d87f      	bhi.n	8003d88 <HAL_TIM_ConfigClockSource+0x16c>
 8003c88:	2b70      	cmp	r3, #112	; 0x70
 8003c8a:	d01a      	beq.n	8003cc2 <HAL_TIM_ConfigClockSource+0xa6>
 8003c8c:	2b70      	cmp	r3, #112	; 0x70
 8003c8e:	d87b      	bhi.n	8003d88 <HAL_TIM_ConfigClockSource+0x16c>
 8003c90:	2b60      	cmp	r3, #96	; 0x60
 8003c92:	d050      	beq.n	8003d36 <HAL_TIM_ConfigClockSource+0x11a>
 8003c94:	2b60      	cmp	r3, #96	; 0x60
 8003c96:	d877      	bhi.n	8003d88 <HAL_TIM_ConfigClockSource+0x16c>
 8003c98:	2b50      	cmp	r3, #80	; 0x50
 8003c9a:	d03c      	beq.n	8003d16 <HAL_TIM_ConfigClockSource+0xfa>
 8003c9c:	2b50      	cmp	r3, #80	; 0x50
 8003c9e:	d873      	bhi.n	8003d88 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca0:	2b40      	cmp	r3, #64	; 0x40
 8003ca2:	d058      	beq.n	8003d56 <HAL_TIM_ConfigClockSource+0x13a>
 8003ca4:	2b40      	cmp	r3, #64	; 0x40
 8003ca6:	d86f      	bhi.n	8003d88 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca8:	2b30      	cmp	r3, #48	; 0x30
 8003caa:	d064      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0x15a>
 8003cac:	2b30      	cmp	r3, #48	; 0x30
 8003cae:	d86b      	bhi.n	8003d88 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb0:	2b20      	cmp	r3, #32
 8003cb2:	d060      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0x15a>
 8003cb4:	2b20      	cmp	r3, #32
 8003cb6:	d867      	bhi.n	8003d88 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d05c      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0x15a>
 8003cbc:	2b10      	cmp	r3, #16
 8003cbe:	d05a      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0x15a>
 8003cc0:	e062      	b.n	8003d88 <HAL_TIM_ConfigClockSource+0x16c>
=======
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800344e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003460:	d03e      	beq.n	80034e0 <HAL_TIM_ConfigClockSource+0xd4>
 8003462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003466:	f200 8087 	bhi.w	8003578 <HAL_TIM_ConfigClockSource+0x16c>
 800346a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800346e:	f000 8086 	beq.w	800357e <HAL_TIM_ConfigClockSource+0x172>
 8003472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003476:	d87f      	bhi.n	8003578 <HAL_TIM_ConfigClockSource+0x16c>
 8003478:	2b70      	cmp	r3, #112	; 0x70
 800347a:	d01a      	beq.n	80034b2 <HAL_TIM_ConfigClockSource+0xa6>
 800347c:	2b70      	cmp	r3, #112	; 0x70
 800347e:	d87b      	bhi.n	8003578 <HAL_TIM_ConfigClockSource+0x16c>
 8003480:	2b60      	cmp	r3, #96	; 0x60
 8003482:	d050      	beq.n	8003526 <HAL_TIM_ConfigClockSource+0x11a>
 8003484:	2b60      	cmp	r3, #96	; 0x60
 8003486:	d877      	bhi.n	8003578 <HAL_TIM_ConfigClockSource+0x16c>
 8003488:	2b50      	cmp	r3, #80	; 0x50
 800348a:	d03c      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0xfa>
 800348c:	2b50      	cmp	r3, #80	; 0x50
 800348e:	d873      	bhi.n	8003578 <HAL_TIM_ConfigClockSource+0x16c>
 8003490:	2b40      	cmp	r3, #64	; 0x40
 8003492:	d058      	beq.n	8003546 <HAL_TIM_ConfigClockSource+0x13a>
 8003494:	2b40      	cmp	r3, #64	; 0x40
 8003496:	d86f      	bhi.n	8003578 <HAL_TIM_ConfigClockSource+0x16c>
 8003498:	2b30      	cmp	r3, #48	; 0x30
 800349a:	d064      	beq.n	8003566 <HAL_TIM_ConfigClockSource+0x15a>
 800349c:	2b30      	cmp	r3, #48	; 0x30
 800349e:	d86b      	bhi.n	8003578 <HAL_TIM_ConfigClockSource+0x16c>
 80034a0:	2b20      	cmp	r3, #32
 80034a2:	d060      	beq.n	8003566 <HAL_TIM_ConfigClockSource+0x15a>
 80034a4:	2b20      	cmp	r3, #32
 80034a6:	d867      	bhi.n	8003578 <HAL_TIM_ConfigClockSource+0x16c>
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d05c      	beq.n	8003566 <HAL_TIM_ConfigClockSource+0x15a>
 80034ac:	2b10      	cmp	r3, #16
 80034ae:	d05a      	beq.n	8003566 <HAL_TIM_ConfigClockSource+0x15a>
 80034b0:	e062      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x16c>
>>>>>>> parent of 2b78fa3 (line sensor)
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6818      	ldr	r0, [r3, #0]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	6899      	ldr	r1, [r3, #8]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	f000 fd4f 	bl	8004774 <TIM_ETR_SetConfig>
=======
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6818      	ldr	r0, [r3, #0]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	6899      	ldr	r1, [r3, #8]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f000 fd4f 	bl	8003f64 <TIM_ETR_SetConfig>
>>>>>>> parent of 2b78fa3 (line sensor)
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ce4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	609a      	str	r2, [r3, #8]
      break;
 8003cee:	e04f      	b.n	8003d90 <HAL_TIM_ConfigClockSource+0x174>
=======
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	609a      	str	r2, [r3, #8]
      break;
 80034de:	e04f      	b.n	8003580 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> parent of 2b78fa3 (line sensor)
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6818      	ldr	r0, [r3, #0]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	6899      	ldr	r1, [r3, #8]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f000 fd38 	bl	8004774 <TIM_ETR_SetConfig>
=======
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6818      	ldr	r0, [r3, #0]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	6899      	ldr	r1, [r3, #8]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f000 fd38 	bl	8003f64 <TIM_ETR_SetConfig>
>>>>>>> parent of 2b78fa3 (line sensor)
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
<<<<<<< HEAD
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d12:	609a      	str	r2, [r3, #8]
      break;
 8003d14:	e03c      	b.n	8003d90 <HAL_TIM_ConfigClockSource+0x174>
=======
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003502:	609a      	str	r2, [r3, #8]
      break;
 8003504:	e03c      	b.n	8003580 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> parent of 2b78fa3 (line sensor)

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6818      	ldr	r0, [r3, #0]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	6859      	ldr	r1, [r3, #4]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	461a      	mov	r2, r3
 8003d24:	f000 fbf6 	bl	8004514 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2150      	movs	r1, #80	; 0x50
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fd05 	bl	800473e <TIM_ITRx_SetConfig>
      break;
 8003d34:	e02c      	b.n	8003d90 <HAL_TIM_ConfigClockSource+0x174>
=======
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	6859      	ldr	r1, [r3, #4]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	461a      	mov	r2, r3
 8003514:	f000 fbf6 	bl	8003d04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2150      	movs	r1, #80	; 0x50
 800351e:	4618      	mov	r0, r3
 8003520:	f000 fd05 	bl	8003f2e <TIM_ITRx_SetConfig>
      break;
 8003524:	e02c      	b.n	8003580 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> parent of 2b78fa3 (line sensor)

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6818      	ldr	r0, [r3, #0]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	6859      	ldr	r1, [r3, #4]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	461a      	mov	r2, r3
 8003d44:	f000 fc52 	bl	80045ec <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2160      	movs	r1, #96	; 0x60
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 fcf5 	bl	800473e <TIM_ITRx_SetConfig>
      break;
 8003d54:	e01c      	b.n	8003d90 <HAL_TIM_ConfigClockSource+0x174>
=======
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6818      	ldr	r0, [r3, #0]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	6859      	ldr	r1, [r3, #4]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	461a      	mov	r2, r3
 8003534:	f000 fc52 	bl	8003ddc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2160      	movs	r1, #96	; 0x60
 800353e:	4618      	mov	r0, r3
 8003540:	f000 fcf5 	bl	8003f2e <TIM_ITRx_SetConfig>
      break;
 8003544:	e01c      	b.n	8003580 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> parent of 2b78fa3 (line sensor)

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6818      	ldr	r0, [r3, #0]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	6859      	ldr	r1, [r3, #4]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	461a      	mov	r2, r3
 8003d64:	f000 fbd6 	bl	8004514 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2140      	movs	r1, #64	; 0x40
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fce5 	bl	800473e <TIM_ITRx_SetConfig>
      break;
 8003d74:	e00c      	b.n	8003d90 <HAL_TIM_ConfigClockSource+0x174>
=======
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6818      	ldr	r0, [r3, #0]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	6859      	ldr	r1, [r3, #4]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	461a      	mov	r2, r3
 8003554:	f000 fbd6 	bl	8003d04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2140      	movs	r1, #64	; 0x40
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fce5 	bl	8003f2e <TIM_ITRx_SetConfig>
      break;
 8003564:	e00c      	b.n	8003580 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> parent of 2b78fa3 (line sensor)
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
<<<<<<< HEAD
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4610      	mov	r0, r2
 8003d82:	f000 fcdc 	bl	800473e <TIM_ITRx_SetConfig>
      break;
 8003d86:	e003      	b.n	8003d90 <HAL_TIM_ConfigClockSource+0x174>
=======
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4619      	mov	r1, r3
 8003570:	4610      	mov	r0, r2
 8003572:	f000 fcdc 	bl	8003f2e <TIM_ITRx_SetConfig>
      break;
 8003576:	e003      	b.n	8003580 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> parent of 2b78fa3 (line sensor)
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 8003d88:	2301      	movs	r3, #1
 8003d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d8c:	e000      	b.n	8003d90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_TIM_SlaveConfigSynchro>:
=======
 8003578:	2301      	movs	r3, #1
 800357a:	73fb      	strb	r3, [r7, #15]
      break;
 800357c:	e000      	b.n	8003580 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800357e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003590:	7bfb      	ldrb	r3, [r7, #15]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_TIM_SlaveConfigSynchro>:
>>>>>>> parent of 2b78fa3 (line sensor)
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
<<<<<<< HEAD
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
 8003db2:	6039      	str	r1, [r7, #0]
=======
 800359a:	b580      	push	{r7, lr}
 800359c:	b082      	sub	sp, #8
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
 80035a2:	6039      	str	r1, [r7, #0]
>>>>>>> parent of 2b78fa3 (line sensor)
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
<<<<<<< HEAD
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d101      	bne.n	8003dc2 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	e031      	b.n	8003e26 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2202      	movs	r2, #2
 8003dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003dd2:	6839      	ldr	r1, [r7, #0]
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 faa3 	bl	8004320 <TIM_SlaveTimer_SetConfig>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d009      	beq.n	8003df4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e018      	b.n	8003e26 <HAL_TIM_SlaveConfigSynchro+0x7c>
=======
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d101      	bne.n	80035b2 <HAL_TIM_SlaveConfigSynchro+0x18>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e031      	b.n	8003616 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2202      	movs	r2, #2
 80035be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80035c2:	6839      	ldr	r1, [r7, #0]
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 faa3 	bl	8003b10 <TIM_SlaveTimer_SetConfig>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d009      	beq.n	80035e4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e018      	b.n	8003616 <HAL_TIM_SlaveConfigSynchro+0x7c>
>>>>>>> parent of 2b78fa3 (line sensor)
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
<<<<<<< HEAD
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68da      	ldr	r2, [r3, #12]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e02:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68da      	ldr	r2, [r3, #12]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e12:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
	...

08003e30 <HAL_TIM_ReadCapturedValue>:
=======
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035f2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003602:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
	...

08003620 <HAL_TIM_ReadCapturedValue>:
>>>>>>> parent of 2b78fa3 (line sensor)
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b0c      	cmp	r3, #12
 8003e42:	d831      	bhi.n	8003ea8 <HAL_TIM_ReadCapturedValue+0x78>
 8003e44:	a201      	add	r2, pc, #4	; (adr r2, 8003e4c <HAL_TIM_ReadCapturedValue+0x1c>)
 8003e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4a:	bf00      	nop
 8003e4c:	08003e81 	.word	0x08003e81
 8003e50:	08003ea9 	.word	0x08003ea9
 8003e54:	08003ea9 	.word	0x08003ea9
 8003e58:	08003ea9 	.word	0x08003ea9
 8003e5c:	08003e8b 	.word	0x08003e8b
 8003e60:	08003ea9 	.word	0x08003ea9
 8003e64:	08003ea9 	.word	0x08003ea9
 8003e68:	08003ea9 	.word	0x08003ea9
 8003e6c:	08003e95 	.word	0x08003e95
 8003e70:	08003ea9 	.word	0x08003ea9
 8003e74:	08003ea9 	.word	0x08003ea9
 8003e78:	08003ea9 	.word	0x08003ea9
 8003e7c:	08003e9f 	.word	0x08003e9f
=======
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2b0c      	cmp	r3, #12
 8003632:	d831      	bhi.n	8003698 <HAL_TIM_ReadCapturedValue+0x78>
 8003634:	a201      	add	r2, pc, #4	; (adr r2, 800363c <HAL_TIM_ReadCapturedValue+0x1c>)
 8003636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363a:	bf00      	nop
 800363c:	08003671 	.word	0x08003671
 8003640:	08003699 	.word	0x08003699
 8003644:	08003699 	.word	0x08003699
 8003648:	08003699 	.word	0x08003699
 800364c:	0800367b 	.word	0x0800367b
 8003650:	08003699 	.word	0x08003699
 8003654:	08003699 	.word	0x08003699
 8003658:	08003699 	.word	0x08003699
 800365c:	08003685 	.word	0x08003685
 8003660:	08003699 	.word	0x08003699
 8003664:	08003699 	.word	0x08003699
 8003668:	08003699 	.word	0x08003699
 800366c:	0800368f 	.word	0x0800368f
>>>>>>> parent of 2b78fa3 (line sensor)
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
<<<<<<< HEAD
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e86:	60fb      	str	r3, [r7, #12]

      break;
 8003e88:	e00f      	b.n	8003eaa <HAL_TIM_ReadCapturedValue+0x7a>
=======
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003676:	60fb      	str	r3, [r7, #12]

      break;
 8003678:	e00f      	b.n	800369a <HAL_TIM_ReadCapturedValue+0x7a>
>>>>>>> parent of 2b78fa3 (line sensor)
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
<<<<<<< HEAD
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e90:	60fb      	str	r3, [r7, #12]

      break;
 8003e92:	e00a      	b.n	8003eaa <HAL_TIM_ReadCapturedValue+0x7a>
=======
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003680:	60fb      	str	r3, [r7, #12]

      break;
 8003682:	e00a      	b.n	800369a <HAL_TIM_ReadCapturedValue+0x7a>
>>>>>>> parent of 2b78fa3 (line sensor)
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
<<<<<<< HEAD
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9a:	60fb      	str	r3, [r7, #12]

      break;
 8003e9c:	e005      	b.n	8003eaa <HAL_TIM_ReadCapturedValue+0x7a>
=======
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800368a:	60fb      	str	r3, [r7, #12]

      break;
 800368c:	e005      	b.n	800369a <HAL_TIM_ReadCapturedValue+0x7a>
>>>>>>> parent of 2b78fa3 (line sensor)
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
<<<<<<< HEAD
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea4:	60fb      	str	r3, [r7, #12]

      break;
 8003ea6:	e000      	b.n	8003eaa <HAL_TIM_ReadCapturedValue+0x7a>
=======
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	60fb      	str	r3, [r7, #12]

      break;
 8003696:	e000      	b.n	800369a <HAL_TIM_ReadCapturedValue+0x7a>
>>>>>>> parent of 2b78fa3 (line sensor)
    }

    default:
      break;
<<<<<<< HEAD
 8003ea8:	bf00      	nop
  }

  return tmpreg;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_TIM_PeriodElapsedCallback>:
=======
 8003698:	bf00      	nop
  }

  return tmpreg;
 800369a:	68fb      	ldr	r3, [r7, #12]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> parent of 2b78fa3 (line sensor)
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
=======
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 2b78fa3 (line sensor)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_TIM_OC_DelayElapsedCallback>:
=======
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> parent of 2b78fa3 (line sensor)
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
=======
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 2b78fa3 (line sensor)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> parent of 2b78fa3 (line sensor)
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
=======
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 2b78fa3 (line sensor)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_TIM_TriggerCallback>:
=======
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_TIM_TriggerCallback>:
>>>>>>> parent of 2b78fa3 (line sensor)
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
=======
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 2b78fa3 (line sensor)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <TIM_Base_SetConfig>:
=======
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <TIM_Base_SetConfig>:
>>>>>>> parent of 2b78fa3 (line sensor)
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a34      	ldr	r2, [pc, #208]	; (8003fec <TIM_Base_SetConfig+0xe4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d00f      	beq.n	8003f40 <TIM_Base_SetConfig+0x38>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f26:	d00b      	beq.n	8003f40 <TIM_Base_SetConfig+0x38>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a31      	ldr	r2, [pc, #196]	; (8003ff0 <TIM_Base_SetConfig+0xe8>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d007      	beq.n	8003f40 <TIM_Base_SetConfig+0x38>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a30      	ldr	r2, [pc, #192]	; (8003ff4 <TIM_Base_SetConfig+0xec>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d003      	beq.n	8003f40 <TIM_Base_SetConfig+0x38>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a2f      	ldr	r2, [pc, #188]	; (8003ff8 <TIM_Base_SetConfig+0xf0>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d108      	bne.n	8003f52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a25      	ldr	r2, [pc, #148]	; (8003fec <TIM_Base_SetConfig+0xe4>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d01b      	beq.n	8003f92 <TIM_Base_SetConfig+0x8a>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f60:	d017      	beq.n	8003f92 <TIM_Base_SetConfig+0x8a>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a22      	ldr	r2, [pc, #136]	; (8003ff0 <TIM_Base_SetConfig+0xe8>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d013      	beq.n	8003f92 <TIM_Base_SetConfig+0x8a>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a21      	ldr	r2, [pc, #132]	; (8003ff4 <TIM_Base_SetConfig+0xec>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d00f      	beq.n	8003f92 <TIM_Base_SetConfig+0x8a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a20      	ldr	r2, [pc, #128]	; (8003ff8 <TIM_Base_SetConfig+0xf0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d00b      	beq.n	8003f92 <TIM_Base_SetConfig+0x8a>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a1f      	ldr	r2, [pc, #124]	; (8003ffc <TIM_Base_SetConfig+0xf4>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d007      	beq.n	8003f92 <TIM_Base_SetConfig+0x8a>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a1e      	ldr	r2, [pc, #120]	; (8004000 <TIM_Base_SetConfig+0xf8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d003      	beq.n	8003f92 <TIM_Base_SetConfig+0x8a>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a1d      	ldr	r2, [pc, #116]	; (8004004 <TIM_Base_SetConfig+0xfc>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d108      	bne.n	8003fa4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	60fb      	str	r3, [r7, #12]
=======
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a34      	ldr	r2, [pc, #208]	; (80037dc <TIM_Base_SetConfig+0xe4>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d00f      	beq.n	8003730 <TIM_Base_SetConfig+0x38>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003716:	d00b      	beq.n	8003730 <TIM_Base_SetConfig+0x38>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a31      	ldr	r2, [pc, #196]	; (80037e0 <TIM_Base_SetConfig+0xe8>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d007      	beq.n	8003730 <TIM_Base_SetConfig+0x38>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a30      	ldr	r2, [pc, #192]	; (80037e4 <TIM_Base_SetConfig+0xec>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d003      	beq.n	8003730 <TIM_Base_SetConfig+0x38>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a2f      	ldr	r2, [pc, #188]	; (80037e8 <TIM_Base_SetConfig+0xf0>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d108      	bne.n	8003742 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a25      	ldr	r2, [pc, #148]	; (80037dc <TIM_Base_SetConfig+0xe4>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d01b      	beq.n	8003782 <TIM_Base_SetConfig+0x8a>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003750:	d017      	beq.n	8003782 <TIM_Base_SetConfig+0x8a>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a22      	ldr	r2, [pc, #136]	; (80037e0 <TIM_Base_SetConfig+0xe8>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d013      	beq.n	8003782 <TIM_Base_SetConfig+0x8a>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a21      	ldr	r2, [pc, #132]	; (80037e4 <TIM_Base_SetConfig+0xec>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d00f      	beq.n	8003782 <TIM_Base_SetConfig+0x8a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a20      	ldr	r2, [pc, #128]	; (80037e8 <TIM_Base_SetConfig+0xf0>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00b      	beq.n	8003782 <TIM_Base_SetConfig+0x8a>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a1f      	ldr	r2, [pc, #124]	; (80037ec <TIM_Base_SetConfig+0xf4>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d007      	beq.n	8003782 <TIM_Base_SetConfig+0x8a>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a1e      	ldr	r2, [pc, #120]	; (80037f0 <TIM_Base_SetConfig+0xf8>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d003      	beq.n	8003782 <TIM_Base_SetConfig+0x8a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a1d      	ldr	r2, [pc, #116]	; (80037f4 <TIM_Base_SetConfig+0xfc>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d108      	bne.n	8003794 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	4313      	orrs	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]
>>>>>>> parent of 2b78fa3 (line sensor)
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	689a      	ldr	r2, [r3, #8]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a08      	ldr	r2, [pc, #32]	; (8003fec <TIM_Base_SetConfig+0xe4>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d103      	bne.n	8003fd8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	691a      	ldr	r2, [r3, #16]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	4313      	orrs	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a08      	ldr	r2, [pc, #32]	; (80037dc <TIM_Base_SetConfig+0xe4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d103      	bne.n	80037c8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	691a      	ldr	r2, [r3, #16]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> parent of 2b78fa3 (line sensor)
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	615a      	str	r2, [r3, #20]
}
 8003fde:	bf00      	nop
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	40010000 	.word	0x40010000
 8003ff0:	40000400 	.word	0x40000400
 8003ff4:	40000800 	.word	0x40000800
 8003ff8:	40000c00 	.word	0x40000c00
 8003ffc:	40014000 	.word	0x40014000
 8004000:	40014400 	.word	0x40014400
 8004004:	40014800 	.word	0x40014800

08004008 <TIM_OC1_SetConfig>:
=======
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	615a      	str	r2, [r3, #20]
}
 80037ce:	bf00      	nop
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	40010000 	.word	0x40010000
 80037e0:	40000400 	.word	0x40000400
 80037e4:	40000800 	.word	0x40000800
 80037e8:	40000c00 	.word	0x40000c00
 80037ec:	40014000 	.word	0x40014000
 80037f0:	40014400 	.word	0x40014400
 80037f4:	40014800 	.word	0x40014800

080037f8 <TIM_OC1_SetConfig>:
>>>>>>> parent of 2b78fa3 (line sensor)
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
=======
 80037f8:	b480      	push	{r7}
 80037fa:	b087      	sub	sp, #28
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
>>>>>>> parent of 2b78fa3 (line sensor)
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
<<<<<<< HEAD
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	f023 0201 	bic.w	r2, r3, #1
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0303 	bic.w	r3, r3, #3
 800403e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f023 0302 	bic.w	r3, r3, #2
 8004050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	4313      	orrs	r3, r2
 800405a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a1c      	ldr	r2, [pc, #112]	; (80040d0 <TIM_OC1_SetConfig+0xc8>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d10c      	bne.n	800407e <TIM_OC1_SetConfig+0x76>
=======
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	f023 0201 	bic.w	r2, r3, #1
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f023 0303 	bic.w	r3, r3, #3
 800382e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	4313      	orrs	r3, r2
 8003838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f023 0302 	bic.w	r3, r3, #2
 8003840:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	4313      	orrs	r3, r2
 800384a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a1c      	ldr	r2, [pc, #112]	; (80038c0 <TIM_OC1_SetConfig+0xc8>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d10c      	bne.n	800386e <TIM_OC1_SetConfig+0x76>
>>>>>>> parent of 2b78fa3 (line sensor)
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< HEAD
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f023 0308 	bic.w	r3, r3, #8
 800406a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	4313      	orrs	r3, r2
 8004074:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f023 0304 	bic.w	r3, r3, #4
 800407c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a13      	ldr	r2, [pc, #76]	; (80040d0 <TIM_OC1_SetConfig+0xc8>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d111      	bne.n	80040aa <TIM_OC1_SetConfig+0xa2>
=======
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f023 0308 	bic.w	r3, r3, #8
 800385a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	4313      	orrs	r3, r2
 8003864:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f023 0304 	bic.w	r3, r3, #4
 800386c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a13      	ldr	r2, [pc, #76]	; (80038c0 <TIM_OC1_SetConfig+0xc8>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d111      	bne.n	800389a <TIM_OC1_SetConfig+0xa2>
>>>>>>> parent of 2b78fa3 (line sensor)
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< HEAD
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800408c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004094:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]
=======
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800387c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003884:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	4313      	orrs	r3, r2
 8003898:	613b      	str	r3, [r7, #16]
>>>>>>> parent of 2b78fa3 (line sensor)
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	621a      	str	r2, [r3, #32]
}
 80040c4:	bf00      	nop
 80040c6:	371c      	adds	r7, #28
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	40010000 	.word	0x40010000

080040d4 <TIM_OC2_SetConfig>:
=======
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	621a      	str	r2, [r3, #32]
}
 80038b4:	bf00      	nop
 80038b6:	371c      	adds	r7, #28
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	40010000 	.word	0x40010000

080038c4 <TIM_OC2_SetConfig>:
>>>>>>> parent of 2b78fa3 (line sensor)
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
=======
 80038c4:	b480      	push	{r7}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
>>>>>>> parent of 2b78fa3 (line sensor)
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	f023 0210 	bic.w	r2, r3, #16
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800410a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	021b      	lsls	r3, r3, #8
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	4313      	orrs	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f023 0320 	bic.w	r3, r3, #32
 800411e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	4313      	orrs	r3, r2
 800412a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a1e      	ldr	r2, [pc, #120]	; (80041a8 <TIM_OC2_SetConfig+0xd4>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d10d      	bne.n	8004150 <TIM_OC2_SetConfig+0x7c>
=======
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	f023 0210 	bic.w	r2, r3, #16
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	021b      	lsls	r3, r3, #8
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4313      	orrs	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f023 0320 	bic.w	r3, r3, #32
 800390e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	4313      	orrs	r3, r2
 800391a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a1e      	ldr	r2, [pc, #120]	; (8003998 <TIM_OC2_SetConfig+0xd4>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d10d      	bne.n	8003940 <TIM_OC2_SetConfig+0x7c>
>>>>>>> parent of 2b78fa3 (line sensor)
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< HEAD
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800413a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	4313      	orrs	r3, r2
 8004146:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800414e:	617b      	str	r3, [r7, #20]
=======
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800392a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	4313      	orrs	r3, r2
 8003936:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800393e:	617b      	str	r3, [r7, #20]
>>>>>>> parent of 2b78fa3 (line sensor)

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
<<<<<<< HEAD
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a15      	ldr	r2, [pc, #84]	; (80041a8 <TIM_OC2_SetConfig+0xd4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d113      	bne.n	8004180 <TIM_OC2_SetConfig+0xac>
=======
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a15      	ldr	r2, [pc, #84]	; (8003998 <TIM_OC2_SetConfig+0xd4>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d113      	bne.n	8003970 <TIM_OC2_SetConfig+0xac>
>>>>>>> parent of 2b78fa3 (line sensor)
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< HEAD
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800415e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004166:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	4313      	orrs	r3, r2
 8004172:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]
=======
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800394e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003956:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	4313      	orrs	r3, r2
 8003962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4313      	orrs	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
>>>>>>> parent of 2b78fa3 (line sensor)
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	621a      	str	r2, [r3, #32]
}
 800419a:	bf00      	nop
 800419c:	371c      	adds	r7, #28
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	40010000 	.word	0x40010000

080041ac <TIM_OC3_SetConfig>:
=======
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	621a      	str	r2, [r3, #32]
}
 800398a:	bf00      	nop
 800398c:	371c      	adds	r7, #28
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	40010000 	.word	0x40010000

0800399c <TIM_OC3_SetConfig>:
>>>>>>> parent of 2b78fa3 (line sensor)
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 80041ac:	b480      	push	{r7}
 80041ae:	b087      	sub	sp, #28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
=======
 800399c:	b480      	push	{r7}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
>>>>>>> parent of 2b78fa3 (line sensor)
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
<<<<<<< HEAD
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f023 0303 	bic.w	r3, r3, #3
 80041e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	021b      	lsls	r3, r3, #8
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	4313      	orrs	r3, r2
 8004200:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a1d      	ldr	r2, [pc, #116]	; (800427c <TIM_OC3_SetConfig+0xd0>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d10d      	bne.n	8004226 <TIM_OC3_SetConfig+0x7a>
=======
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f023 0303 	bic.w	r3, r3, #3
 80039d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	4313      	orrs	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	021b      	lsls	r3, r3, #8
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a1d      	ldr	r2, [pc, #116]	; (8003a6c <TIM_OC3_SetConfig+0xd0>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d10d      	bne.n	8003a16 <TIM_OC3_SetConfig+0x7a>
>>>>>>> parent of 2b78fa3 (line sensor)
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< HEAD
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004210:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	021b      	lsls	r3, r3, #8
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	4313      	orrs	r3, r2
 800421c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a14      	ldr	r2, [pc, #80]	; (800427c <TIM_OC3_SetConfig+0xd0>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d113      	bne.n	8004256 <TIM_OC3_SetConfig+0xaa>
=======
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	021b      	lsls	r3, r3, #8
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a14      	ldr	r2, [pc, #80]	; (8003a6c <TIM_OC3_SetConfig+0xd0>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d113      	bne.n	8003a46 <TIM_OC3_SetConfig+0xaa>
>>>>>>> parent of 2b78fa3 (line sensor)
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< HEAD
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004234:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800423c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	011b      	lsls	r3, r3, #4
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	4313      	orrs	r3, r2
 8004248:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4313      	orrs	r3, r2
 8004254:	613b      	str	r3, [r7, #16]
=======
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	613b      	str	r3, [r7, #16]
>>>>>>> parent of 2b78fa3 (line sensor)
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	621a      	str	r2, [r3, #32]
}
 8004270:	bf00      	nop
 8004272:	371c      	adds	r7, #28
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	40010000 	.word	0x40010000

08004280 <TIM_OC4_SetConfig>:
=======
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	621a      	str	r2, [r3, #32]
}
 8003a60:	bf00      	nop
 8003a62:	371c      	adds	r7, #28
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	40010000 	.word	0x40010000

08003a70 <TIM_OC4_SetConfig>:
>>>>>>> parent of 2b78fa3 (line sensor)
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
=======
 8003a70:	b480      	push	{r7}
 8003a72:	b087      	sub	sp, #28
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
>>>>>>> parent of 2b78fa3 (line sensor)
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
<<<<<<< HEAD
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	021b      	lsls	r3, r3, #8
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	031b      	lsls	r3, r3, #12
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a10      	ldr	r2, [pc, #64]	; (800431c <TIM_OC4_SetConfig+0x9c>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d109      	bne.n	80042f4 <TIM_OC4_SetConfig+0x74>
=======
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	021b      	lsls	r3, r3, #8
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003aba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	031b      	lsls	r3, r3, #12
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a10      	ldr	r2, [pc, #64]	; (8003b0c <TIM_OC4_SetConfig+0x9c>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d109      	bne.n	8003ae4 <TIM_OC4_SetConfig+0x74>
>>>>>>> parent of 2b78fa3 (line sensor)
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< HEAD
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	019b      	lsls	r3, r3, #6
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]
=======
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ad6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	019b      	lsls	r3, r3, #6
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]
>>>>>>> parent of 2b78fa3 (line sensor)
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	621a      	str	r2, [r3, #32]
}
 800430e:	bf00      	nop
 8004310:	371c      	adds	r7, #28
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40010000 	.word	0x40010000

08004320 <TIM_SlaveTimer_SetConfig>:
=======
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	621a      	str	r2, [r3, #32]
}
 8003afe:	bf00      	nop
 8003b00:	371c      	adds	r7, #28
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	40010000 	.word	0x40010000

08003b10 <TIM_SlaveTimer_SetConfig>:
>>>>>>> parent of 2b78fa3 (line sensor)
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
<<<<<<< HEAD
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	75fb      	strb	r3, [r7, #23]
=======
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	75fb      	strb	r3, [r7, #23]
>>>>>>> parent of 2b78fa3 (line sensor)
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800433c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	4313      	orrs	r3, r2
 8004346:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	f023 0307 	bic.w	r3, r3, #7
 800434e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	4313      	orrs	r3, r2
 8004358:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2b70      	cmp	r3, #112	; 0x70
 8004368:	d01a      	beq.n	80043a0 <TIM_SlaveTimer_SetConfig+0x80>
 800436a:	2b70      	cmp	r3, #112	; 0x70
 800436c:	d860      	bhi.n	8004430 <TIM_SlaveTimer_SetConfig+0x110>
 800436e:	2b60      	cmp	r3, #96	; 0x60
 8004370:	d054      	beq.n	800441c <TIM_SlaveTimer_SetConfig+0xfc>
 8004372:	2b60      	cmp	r3, #96	; 0x60
 8004374:	d85c      	bhi.n	8004430 <TIM_SlaveTimer_SetConfig+0x110>
 8004376:	2b50      	cmp	r3, #80	; 0x50
 8004378:	d046      	beq.n	8004408 <TIM_SlaveTimer_SetConfig+0xe8>
 800437a:	2b50      	cmp	r3, #80	; 0x50
 800437c:	d858      	bhi.n	8004430 <TIM_SlaveTimer_SetConfig+0x110>
 800437e:	2b40      	cmp	r3, #64	; 0x40
 8004380:	d019      	beq.n	80043b6 <TIM_SlaveTimer_SetConfig+0x96>
 8004382:	2b40      	cmp	r3, #64	; 0x40
 8004384:	d854      	bhi.n	8004430 <TIM_SlaveTimer_SetConfig+0x110>
 8004386:	2b30      	cmp	r3, #48	; 0x30
 8004388:	d055      	beq.n	8004436 <TIM_SlaveTimer_SetConfig+0x116>
 800438a:	2b30      	cmp	r3, #48	; 0x30
 800438c:	d850      	bhi.n	8004430 <TIM_SlaveTimer_SetConfig+0x110>
 800438e:	2b20      	cmp	r3, #32
 8004390:	d051      	beq.n	8004436 <TIM_SlaveTimer_SetConfig+0x116>
 8004392:	2b20      	cmp	r3, #32
 8004394:	d84c      	bhi.n	8004430 <TIM_SlaveTimer_SetConfig+0x110>
 8004396:	2b00      	cmp	r3, #0
 8004398:	d04d      	beq.n	8004436 <TIM_SlaveTimer_SetConfig+0x116>
 800439a:	2b10      	cmp	r3, #16
 800439c:	d04b      	beq.n	8004436 <TIM_SlaveTimer_SetConfig+0x116>
 800439e:	e047      	b.n	8004430 <TIM_SlaveTimer_SetConfig+0x110>
=======
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b2c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	f023 0307 	bic.w	r3, r3, #7
 8003b3e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b70      	cmp	r3, #112	; 0x70
 8003b58:	d01a      	beq.n	8003b90 <TIM_SlaveTimer_SetConfig+0x80>
 8003b5a:	2b70      	cmp	r3, #112	; 0x70
 8003b5c:	d860      	bhi.n	8003c20 <TIM_SlaveTimer_SetConfig+0x110>
 8003b5e:	2b60      	cmp	r3, #96	; 0x60
 8003b60:	d054      	beq.n	8003c0c <TIM_SlaveTimer_SetConfig+0xfc>
 8003b62:	2b60      	cmp	r3, #96	; 0x60
 8003b64:	d85c      	bhi.n	8003c20 <TIM_SlaveTimer_SetConfig+0x110>
 8003b66:	2b50      	cmp	r3, #80	; 0x50
 8003b68:	d046      	beq.n	8003bf8 <TIM_SlaveTimer_SetConfig+0xe8>
 8003b6a:	2b50      	cmp	r3, #80	; 0x50
 8003b6c:	d858      	bhi.n	8003c20 <TIM_SlaveTimer_SetConfig+0x110>
 8003b6e:	2b40      	cmp	r3, #64	; 0x40
 8003b70:	d019      	beq.n	8003ba6 <TIM_SlaveTimer_SetConfig+0x96>
 8003b72:	2b40      	cmp	r3, #64	; 0x40
 8003b74:	d854      	bhi.n	8003c20 <TIM_SlaveTimer_SetConfig+0x110>
 8003b76:	2b30      	cmp	r3, #48	; 0x30
 8003b78:	d055      	beq.n	8003c26 <TIM_SlaveTimer_SetConfig+0x116>
 8003b7a:	2b30      	cmp	r3, #48	; 0x30
 8003b7c:	d850      	bhi.n	8003c20 <TIM_SlaveTimer_SetConfig+0x110>
 8003b7e:	2b20      	cmp	r3, #32
 8003b80:	d051      	beq.n	8003c26 <TIM_SlaveTimer_SetConfig+0x116>
 8003b82:	2b20      	cmp	r3, #32
 8003b84:	d84c      	bhi.n	8003c20 <TIM_SlaveTimer_SetConfig+0x110>
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d04d      	beq.n	8003c26 <TIM_SlaveTimer_SetConfig+0x116>
 8003b8a:	2b10      	cmp	r3, #16
 8003b8c:	d04b      	beq.n	8003c26 <TIM_SlaveTimer_SetConfig+0x116>
 8003b8e:	e047      	b.n	8003c20 <TIM_SlaveTimer_SetConfig+0x110>
>>>>>>> parent of 2b78fa3 (line sensor)
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6818      	ldr	r0, [r3, #0]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	68d9      	ldr	r1, [r3, #12]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	f000 f9e0 	bl	8004774 <TIM_ETR_SetConfig>
=======
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6818      	ldr	r0, [r3, #0]
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	68d9      	ldr	r1, [r3, #12]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	f000 f9e0 	bl	8003f64 <TIM_ETR_SetConfig>
>>>>>>> parent of 2b78fa3 (line sensor)
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
<<<<<<< HEAD
 80043b4:	e040      	b.n	8004438 <TIM_SlaveTimer_SetConfig+0x118>
=======
 8003ba4:	e040      	b.n	8003c28 <TIM_SlaveTimer_SetConfig+0x118>
>>>>>>> parent of 2b78fa3 (line sensor)
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
<<<<<<< HEAD
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b05      	cmp	r3, #5
 80043bc:	d101      	bne.n	80043c2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e03b      	b.n	800443a <TIM_SlaveTimer_SetConfig+0x11a>
=======
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2b05      	cmp	r3, #5
 8003bac:	d101      	bne.n	8003bb2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e03b      	b.n	8003c2a <TIM_SlaveTimer_SetConfig+0x11a>
>>>>>>> parent of 2b78fa3 (line sensor)
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
<<<<<<< HEAD
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6a1a      	ldr	r2, [r3, #32]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 0201 	bic.w	r2, r2, #1
 80043d8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043e8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	621a      	str	r2, [r3, #32]
      break;
 8004406:	e017      	b.n	8004438 <TIM_SlaveTimer_SetConfig+0x118>
=======
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6a1a      	ldr	r2, [r3, #32]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0201 	bic.w	r2, r2, #1
 8003bc8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bd8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	621a      	str	r2, [r3, #32]
      break;
 8003bf6:	e017      	b.n	8003c28 <TIM_SlaveTimer_SetConfig+0x118>
>>>>>>> parent of 2b78fa3 (line sensor)
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6818      	ldr	r0, [r3, #0]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	6899      	ldr	r1, [r3, #8]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	461a      	mov	r2, r3
 8004416:	f000 f87d 	bl	8004514 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800441a:	e00d      	b.n	8004438 <TIM_SlaveTimer_SetConfig+0x118>
=======
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6818      	ldr	r0, [r3, #0]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	6899      	ldr	r1, [r3, #8]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	461a      	mov	r2, r3
 8003c06:	f000 f87d 	bl	8003d04 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003c0a:	e00d      	b.n	8003c28 <TIM_SlaveTimer_SetConfig+0x118>
>>>>>>> parent of 2b78fa3 (line sensor)
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6818      	ldr	r0, [r3, #0]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	6899      	ldr	r1, [r3, #8]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	461a      	mov	r2, r3
 800442a:	f000 f8df 	bl	80045ec <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800442e:	e003      	b.n	8004438 <TIM_SlaveTimer_SetConfig+0x118>
=======
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6818      	ldr	r0, [r3, #0]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	6899      	ldr	r1, [r3, #8]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	f000 f8df 	bl	8003ddc <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003c1e:	e003      	b.n	8003c28 <TIM_SlaveTimer_SetConfig+0x118>
>>>>>>> parent of 2b78fa3 (line sensor)
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 8004430:	2301      	movs	r3, #1
 8004432:	75fb      	strb	r3, [r7, #23]
      break;
 8004434:	e000      	b.n	8004438 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004436:	bf00      	nop
  }

  return status;
 8004438:	7dfb      	ldrb	r3, [r7, #23]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3718      	adds	r7, #24
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
	...

08004444 <TIM_TI1_SetConfig>:
=======
 8003c20:	2301      	movs	r3, #1
 8003c22:	75fb      	strb	r3, [r7, #23]
      break;
 8003c24:	e000      	b.n	8003c28 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003c26:	bf00      	nop
  }

  return status;
 8003c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
	...

08003c34 <TIM_TI1_SetConfig>:
>>>>>>> parent of 2b78fa3 (line sensor)
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8004444:	b480      	push	{r7}
 8004446:	b087      	sub	sp, #28
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
 8004450:	603b      	str	r3, [r7, #0]
=======
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	603b      	str	r3, [r7, #0]
>>>>>>> parent of 2b78fa3 (line sensor)
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
<<<<<<< HEAD
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	f023 0201 	bic.w	r2, r3, #1
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	4a24      	ldr	r2, [pc, #144]	; (8004500 <TIM_TI1_SetConfig+0xbc>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d013      	beq.n	800449a <TIM_TI1_SetConfig+0x56>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004478:	d00f      	beq.n	800449a <TIM_TI1_SetConfig+0x56>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	4a21      	ldr	r2, [pc, #132]	; (8004504 <TIM_TI1_SetConfig+0xc0>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d00b      	beq.n	800449a <TIM_TI1_SetConfig+0x56>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	4a20      	ldr	r2, [pc, #128]	; (8004508 <TIM_TI1_SetConfig+0xc4>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d007      	beq.n	800449a <TIM_TI1_SetConfig+0x56>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	4a1f      	ldr	r2, [pc, #124]	; (800450c <TIM_TI1_SetConfig+0xc8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d003      	beq.n	800449a <TIM_TI1_SetConfig+0x56>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	4a1e      	ldr	r2, [pc, #120]	; (8004510 <TIM_TI1_SetConfig+0xcc>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d101      	bne.n	800449e <TIM_TI1_SetConfig+0x5a>
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <TIM_TI1_SetConfig+0x5c>
 800449e:	2300      	movs	r3, #0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d008      	beq.n	80044b6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f023 0303 	bic.w	r3, r3, #3
 80044aa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	617b      	str	r3, [r7, #20]
 80044b4:	e003      	b.n	80044be <TIM_TI1_SetConfig+0x7a>
=======
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	f023 0201 	bic.w	r2, r3, #1
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4a24      	ldr	r2, [pc, #144]	; (8003cf0 <TIM_TI1_SetConfig+0xbc>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d013      	beq.n	8003c8a <TIM_TI1_SetConfig+0x56>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c68:	d00f      	beq.n	8003c8a <TIM_TI1_SetConfig+0x56>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	4a21      	ldr	r2, [pc, #132]	; (8003cf4 <TIM_TI1_SetConfig+0xc0>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d00b      	beq.n	8003c8a <TIM_TI1_SetConfig+0x56>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	4a20      	ldr	r2, [pc, #128]	; (8003cf8 <TIM_TI1_SetConfig+0xc4>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d007      	beq.n	8003c8a <TIM_TI1_SetConfig+0x56>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4a1f      	ldr	r2, [pc, #124]	; (8003cfc <TIM_TI1_SetConfig+0xc8>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d003      	beq.n	8003c8a <TIM_TI1_SetConfig+0x56>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4a1e      	ldr	r2, [pc, #120]	; (8003d00 <TIM_TI1_SetConfig+0xcc>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d101      	bne.n	8003c8e <TIM_TI1_SetConfig+0x5a>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <TIM_TI1_SetConfig+0x5c>
 8003c8e:	2300      	movs	r3, #0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d008      	beq.n	8003ca6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	f023 0303 	bic.w	r3, r3, #3
 8003c9a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	e003      	b.n	8003cae <TIM_TI1_SetConfig+0x7a>
>>>>>>> parent of 2b78fa3 (line sensor)
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
<<<<<<< HEAD
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f043 0301 	orr.w	r3, r3, #1
 80044bc:	617b      	str	r3, [r7, #20]
=======
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f043 0301 	orr.w	r3, r3, #1
 8003cac:	617b      	str	r3, [r7, #20]
>>>>>>> parent of 2b78fa3 (line sensor)
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
<<<<<<< HEAD
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	f023 030a 	bic.w	r3, r3, #10
 80044d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	f003 030a 	and.w	r3, r3, #10
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	621a      	str	r2, [r3, #32]
}
 80044f2:	bf00      	nop
 80044f4:	371c      	adds	r7, #28
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	40010000 	.word	0x40010000
 8004504:	40000400 	.word	0x40000400
 8004508:	40000800 	.word	0x40000800
 800450c:	40000c00 	.word	0x40000c00
 8004510:	40014000 	.word	0x40014000

08004514 <TIM_TI1_ConfigInputStage>:
=======
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f023 030a 	bic.w	r3, r3, #10
 8003cc8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	f003 030a 	and.w	r3, r3, #10
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	621a      	str	r2, [r3, #32]
}
 8003ce2:	bf00      	nop
 8003ce4:	371c      	adds	r7, #28
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40010000 	.word	0x40010000
 8003cf4:	40000400 	.word	0x40000400
 8003cf8:	40000800 	.word	0x40000800
 8003cfc:	40000c00 	.word	0x40000c00
 8003d00:	40014000 	.word	0x40014000

08003d04 <TIM_TI1_ConfigInputStage>:
>>>>>>> parent of 2b78fa3 (line sensor)
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
=======
 8003d04:	b480      	push	{r7}
 8003d06:	b087      	sub	sp, #28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
>>>>>>> parent of 2b78fa3 (line sensor)
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	f023 0201 	bic.w	r2, r3, #1
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800453e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f023 030a 	bic.w	r3, r3, #10
 8004550:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	4313      	orrs	r3, r2
 8004558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	621a      	str	r2, [r3, #32]
}
 8004566:	bf00      	nop
 8004568:	371c      	adds	r7, #28
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <TIM_TI2_SetConfig>:
=======
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	f023 0201 	bic.w	r2, r3, #1
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f023 030a 	bic.w	r3, r3, #10
 8003d40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	621a      	str	r2, [r3, #32]
}
 8003d56:	bf00      	nop
 8003d58:	371c      	adds	r7, #28
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <TIM_TI2_SetConfig>:
>>>>>>> parent of 2b78fa3 (line sensor)
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8004572:	b480      	push	{r7}
 8004574:	b087      	sub	sp, #28
 8004576:	af00      	add	r7, sp, #0
 8004578:	60f8      	str	r0, [r7, #12]
 800457a:	60b9      	str	r1, [r7, #8]
 800457c:	607a      	str	r2, [r7, #4]
 800457e:	603b      	str	r3, [r7, #0]
=======
 8003d62:	b480      	push	{r7}
 8003d64:	b087      	sub	sp, #28
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	60f8      	str	r0, [r7, #12]
 8003d6a:	60b9      	str	r1, [r7, #8]
 8003d6c:	607a      	str	r2, [r7, #4]
 8003d6e:	603b      	str	r3, [r7, #0]
>>>>>>> parent of 2b78fa3 (line sensor)
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	f023 0210 	bic.w	r2, r3, #16
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800459e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	021b      	lsls	r3, r3, #8
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	031b      	lsls	r3, r3, #12
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045c4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	011b      	lsls	r3, r3, #4
 80045ca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	621a      	str	r2, [r3, #32]
}
 80045e0:	bf00      	nop
 80045e2:	371c      	adds	r7, #28
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <TIM_TI2_ConfigInputStage>:
=======
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	f023 0210 	bic.w	r2, r3, #16
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	021b      	lsls	r3, r3, #8
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003da0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	031b      	lsls	r3, r3, #12
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003db4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	621a      	str	r2, [r3, #32]
}
 8003dd0:	bf00      	nop
 8003dd2:	371c      	adds	r7, #28
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <TIM_TI2_ConfigInputStage>:
>>>>>>> parent of 2b78fa3 (line sensor)
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
=======
 8003ddc:	b480      	push	{r7}
 8003dde:	b087      	sub	sp, #28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
>>>>>>> parent of 2b78fa3 (line sensor)
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	f023 0210 	bic.w	r2, r3, #16
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004616:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	031b      	lsls	r3, r3, #12
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	4313      	orrs	r3, r2
 8004620:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004628:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	4313      	orrs	r3, r2
 8004632:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	621a      	str	r2, [r3, #32]
}
 8004640:	bf00      	nop
 8004642:	371c      	adds	r7, #28
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <TIM_TI3_SetConfig>:
=======
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	f023 0210 	bic.w	r2, r3, #16
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	031b      	lsls	r3, r3, #12
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	621a      	str	r2, [r3, #32]
}
 8003e30:	bf00      	nop
 8003e32:	371c      	adds	r7, #28
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <TIM_TI3_SetConfig>:
>>>>>>> parent of 2b78fa3 (line sensor)
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 800464c:	b480      	push	{r7}
 800464e:	b087      	sub	sp, #28
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
 8004658:	603b      	str	r3, [r7, #0]
=======
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	603b      	str	r3, [r7, #0]
>>>>>>> parent of 2b78fa3 (line sensor)
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
<<<<<<< HEAD
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f023 0303 	bic.w	r3, r3, #3
 8004678:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4313      	orrs	r3, r2
 8004680:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004688:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	b2db      	uxtb	r3, r3
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	4313      	orrs	r3, r2
 8004694:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800469c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	021b      	lsls	r3, r3, #8
 80046a2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	621a      	str	r2, [r3, #32]
}
 80046b8:	bf00      	nop
 80046ba:	371c      	adds	r7, #28
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <TIM_TI4_SetConfig>:
=======
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f023 0303 	bic.w	r3, r3, #3
 8003e68:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	011b      	lsls	r3, r3, #4
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003e8c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	021b      	lsls	r3, r3, #8
 8003e92:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	621a      	str	r2, [r3, #32]
}
 8003ea8:	bf00      	nop
 8003eaa:	371c      	adds	r7, #28
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <TIM_TI4_SetConfig>:
>>>>>>> parent of 2b78fa3 (line sensor)
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 80046c4:	b480      	push	{r7}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
 80046d0:	603b      	str	r3, [r7, #0]
=======
 8003eb4:	b480      	push	{r7}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
 8003ec0:	603b      	str	r3, [r7, #0]
>>>>>>> parent of 2b78fa3 (line sensor)
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
<<<<<<< HEAD
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	021b      	lsls	r3, r3, #8
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004702:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	031b      	lsls	r3, r3, #12
 8004708:	b29b      	uxth	r3, r3
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	4313      	orrs	r3, r2
 800470e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004716:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	031b      	lsls	r3, r3, #12
 800471c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	4313      	orrs	r3, r2
 8004724:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	621a      	str	r2, [r3, #32]
}
 8004732:	bf00      	nop
 8004734:	371c      	adds	r7, #28
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <TIM_ITRx_SetConfig>:
=======
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	021b      	lsls	r3, r3, #8
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ef2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	031b      	lsls	r3, r3, #12
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003f06:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	031b      	lsls	r3, r3, #12
 8003f0c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	621a      	str	r2, [r3, #32]
}
 8003f22:	bf00      	nop
 8003f24:	371c      	adds	r7, #28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <TIM_ITRx_SetConfig>:
>>>>>>> parent of 2b78fa3 (line sensor)
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< HEAD
 800473e:	b480      	push	{r7}
 8004740:	b085      	sub	sp, #20
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	6039      	str	r1, [r7, #0]
=======
 8003f2e:	b480      	push	{r7}
 8003f30:	b085      	sub	sp, #20
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
 8003f36:	6039      	str	r1, [r7, #0]
>>>>>>> parent of 2b78fa3 (line sensor)
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< HEAD
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004754:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4313      	orrs	r3, r2
 800475c:	f043 0307 	orr.w	r3, r3, #7
 8004760:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	609a      	str	r2, [r3, #8]
}
 8004768:	bf00      	nop
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <TIM_ETR_SetConfig>:
=======
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f043 0307 	orr.w	r3, r3, #7
 8003f50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	609a      	str	r2, [r3, #8]
}
 8003f58:	bf00      	nop
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <TIM_ETR_SetConfig>:
>>>>>>> parent of 2b78fa3 (line sensor)
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< HEAD
 8004774:	b480      	push	{r7}
 8004776:	b087      	sub	sp, #28
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
 8004780:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800478e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	021a      	lsls	r2, r3, #8
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	431a      	orrs	r2, r3
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4313      	orrs	r3, r2
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	4313      	orrs	r3, r2
 80047a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	609a      	str	r2, [r3, #8]
}
 80047a8:	bf00      	nop
 80047aa:	371c      	adds	r7, #28
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <TIM_CCxChannelCmd>:
=======
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
 8003f70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	021a      	lsls	r2, r3, #8
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	431a      	orrs	r2, r3
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	609a      	str	r2, [r3, #8]
}
 8003f98:	bf00      	nop
 8003f9a:	371c      	adds	r7, #28
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <TIM_CCxChannelCmd>:
>>>>>>> parent of 2b78fa3 (line sensor)
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
<<<<<<< HEAD
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
=======
 8003fa4:	b480      	push	{r7}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
>>>>>>> parent of 2b78fa3 (line sensor)

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
<<<<<<< HEAD
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f003 031f 	and.w	r3, r3, #31
 80047c6:	2201      	movs	r2, #1
 80047c8:	fa02 f303 	lsl.w	r3, r2, r3
 80047cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6a1a      	ldr	r2, [r3, #32]
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	43db      	mvns	r3, r3
 80047d6:	401a      	ands	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6a1a      	ldr	r2, [r3, #32]
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f003 031f 	and.w	r3, r3, #31
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	fa01 f303 	lsl.w	r3, r1, r3
 80047ec:	431a      	orrs	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	621a      	str	r2, [r3, #32]
}
 80047f2:	bf00      	nop
 80047f4:	371c      	adds	r7, #28
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
	...

08004800 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f003 031f 	and.w	r3, r3, #31
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6a1a      	ldr	r2, [r3, #32]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	401a      	ands	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6a1a      	ldr	r2, [r3, #32]
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f003 031f 	and.w	r3, r3, #31
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	621a      	str	r2, [r3, #32]
}
 8003fe2:	bf00      	nop
 8003fe4:	371c      	adds	r7, #28
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
	...

08003ff0 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> parent of 2b78fa3 (line sensor)
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
=======
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
>>>>>>> parent of 2b78fa3 (line sensor)
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004810:	2b01      	cmp	r3, #1
 8004812:	d101      	bne.n	8004818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004814:	2302      	movs	r3, #2
 8004816:	e050      	b.n	80048ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	4313      	orrs	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a1c      	ldr	r2, [pc, #112]	; (80048c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d018      	beq.n	800488e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004864:	d013      	beq.n	800488e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a18      	ldr	r2, [pc, #96]	; (80048cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d00e      	beq.n	800488e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a16      	ldr	r2, [pc, #88]	; (80048d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d009      	beq.n	800488e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a15      	ldr	r2, [pc, #84]	; (80048d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d004      	beq.n	800488e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a13      	ldr	r2, [pc, #76]	; (80048d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d10c      	bne.n	80048a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004894:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	4313      	orrs	r3, r2
 800489e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	609a      	str	r2, [r3, #8]
=======
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004000:	2b01      	cmp	r3, #1
 8004002:	d101      	bne.n	8004008 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004004:	2302      	movs	r3, #2
 8004006:	e050      	b.n	80040aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2202      	movs	r2, #2
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800402e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	4313      	orrs	r3, r2
 8004038:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a1c      	ldr	r2, [pc, #112]	; (80040b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d018      	beq.n	800407e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004054:	d013      	beq.n	800407e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a18      	ldr	r2, [pc, #96]	; (80040bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d00e      	beq.n	800407e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a16      	ldr	r2, [pc, #88]	; (80040c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d009      	beq.n	800407e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a15      	ldr	r2, [pc, #84]	; (80040c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d004      	beq.n	800407e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a13      	ldr	r2, [pc, #76]	; (80040c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d10c      	bne.n	8004098 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004084:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	4313      	orrs	r3, r2
 800408e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	609a      	str	r2, [r3, #8]
>>>>>>> parent of 2b78fa3 (line sensor)
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40010000 	.word	0x40010000
 80048cc:	40000400 	.word	0x40000400
 80048d0:	40000800 	.word	0x40000800
 80048d4:	40000c00 	.word	0x40000c00
 80048d8:	40014000 	.word	0x40014000

080048dc <HAL_TIMEx_CommutCallback>:
=======
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40010000 	.word	0x40010000
 80040bc:	40000400 	.word	0x40000400
 80040c0:	40000800 	.word	0x40000800
 80040c4:	40000c00 	.word	0x40000c00
 80040c8:	40014000 	.word	0x40014000

080040cc <HAL_TIMEx_CommutCallback>:
>>>>>>> parent of 2b78fa3 (line sensor)
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
=======
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 2b78fa3 (line sensor)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_TIMEx_BreakCallback>:
=======
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_TIMEx_BreakCallback>:
>>>>>>> parent of 2b78fa3 (line sensor)
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
=======
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
>>>>>>> parent of 2b78fa3 (line sensor)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e03f      	b.n	8004996 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d106      	bne.n	8004930 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7fd f91c 	bl	8001b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2224      	movs	r2, #36	; 0x24
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004946:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 fddf 	bl	800550c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	691a      	ldr	r2, [r3, #16]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800495c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	695a      	ldr	r2, [r3, #20]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800496c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68da      	ldr	r2, [r3, #12]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800497c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2220      	movs	r2, #32
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2220      	movs	r2, #32
 8004990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b08a      	sub	sp, #40	; 0x28
 80049a2:	af02      	add	r7, sp, #8
 80049a4:	60f8      	str	r0, [r7, #12]
 80049a6:	60b9      	str	r1, [r7, #8]
 80049a8:	603b      	str	r3, [r7, #0]
 80049aa:	4613      	mov	r3, r2
 80049ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b20      	cmp	r3, #32
 80049bc:	d17c      	bne.n	8004ab8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <HAL_UART_Transmit+0x2c>
 80049c4:	88fb      	ldrh	r3, [r7, #6]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e075      	b.n	8004aba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_UART_Transmit+0x3e>
 80049d8:	2302      	movs	r3, #2
 80049da:	e06e      	b.n	8004aba <HAL_UART_Transmit+0x11c>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2221      	movs	r2, #33	; 0x21
 80049ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049f2:	f7fd fa33 	bl	8001e5c <HAL_GetTick>
 80049f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	88fa      	ldrh	r2, [r7, #6]
 80049fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	88fa      	ldrh	r2, [r7, #6]
 8004a02:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a0c:	d108      	bne.n	8004a20 <HAL_UART_Transmit+0x82>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d104      	bne.n	8004a20 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004a16:	2300      	movs	r3, #0
 8004a18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	61bb      	str	r3, [r7, #24]
 8004a1e:	e003      	b.n	8004a28 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a24:	2300      	movs	r3, #0
 8004a26:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004a30:	e02a      	b.n	8004a88 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	2180      	movs	r1, #128	; 0x80
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f000 fb1f 	bl	8005080 <UART_WaitOnFlagUntilTimeout>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e036      	b.n	8004aba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10b      	bne.n	8004a6a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	461a      	mov	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	3302      	adds	r3, #2
 8004a66:	61bb      	str	r3, [r7, #24]
 8004a68:	e007      	b.n	8004a7a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	781a      	ldrb	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	3301      	adds	r3, #1
 8004a78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	3b01      	subs	r3, #1
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1cf      	bne.n	8004a32 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	2140      	movs	r1, #64	; 0x40
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 faef 	bl	8005080 <UART_WaitOnFlagUntilTimeout>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e006      	b.n	8004aba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	e000      	b.n	8004aba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004ab8:	2302      	movs	r3, #2
  }
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3720      	adds	r7, #32
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b084      	sub	sp, #16
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	60f8      	str	r0, [r7, #12]
 8004aca:	60b9      	str	r1, [r7, #8]
 8004acc:	4613      	mov	r3, r2
 8004ace:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b20      	cmp	r3, #32
 8004ada:	d11d      	bne.n	8004b18 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d002      	beq.n	8004ae8 <HAL_UART_Receive_IT+0x26>
 8004ae2:	88fb      	ldrh	r3, [r7, #6]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d101      	bne.n	8004aec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e016      	b.n	8004b1a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d101      	bne.n	8004afa <HAL_UART_Receive_IT+0x38>
 8004af6:	2302      	movs	r3, #2
 8004af8:	e00f      	b.n	8004b1a <HAL_UART_Receive_IT+0x58>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004b08:	88fb      	ldrh	r3, [r7, #6]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	68b9      	ldr	r1, [r7, #8]
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 fb24 	bl	800515c <UART_Start_Receive_IT>
 8004b14:	4603      	mov	r3, r0
 8004b16:	e000      	b.n	8004b1a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004b18:	2302      	movs	r3, #2
  }
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
	...

08004b24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b0ba      	sub	sp, #232	; 0xe8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b5a:	f003 030f 	and.w	r3, r3, #15
 8004b5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004b62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10f      	bne.n	8004b8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b6e:	f003 0320 	and.w	r3, r3, #32
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d009      	beq.n	8004b8a <HAL_UART_IRQHandler+0x66>
 8004b76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b7a:	f003 0320 	and.w	r3, r3, #32
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fc07 	bl	8005396 <UART_Receive_IT>
      return;
 8004b88:	e256      	b.n	8005038 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 80de 	beq.w	8004d50 <HAL_UART_IRQHandler+0x22c>
 8004b94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d106      	bne.n	8004bae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ba4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 80d1 	beq.w	8004d50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00b      	beq.n	8004bd2 <HAL_UART_IRQHandler+0xae>
 8004bba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d005      	beq.n	8004bd2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bca:	f043 0201 	orr.w	r2, r3, #1
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bd6:	f003 0304 	and.w	r3, r3, #4
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00b      	beq.n	8004bf6 <HAL_UART_IRQHandler+0xd2>
 8004bde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d005      	beq.n	8004bf6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	f043 0202 	orr.w	r2, r3, #2
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00b      	beq.n	8004c1a <HAL_UART_IRQHandler+0xf6>
 8004c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d005      	beq.n	8004c1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	f043 0204 	orr.w	r2, r3, #4
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c1e:	f003 0308 	and.w	r3, r3, #8
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d011      	beq.n	8004c4a <HAL_UART_IRQHandler+0x126>
 8004c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c2a:	f003 0320 	and.w	r3, r3, #32
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d105      	bne.n	8004c3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d005      	beq.n	8004c4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	f043 0208 	orr.w	r2, r3, #8
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 81ed 	beq.w	800502e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c58:	f003 0320 	and.w	r3, r3, #32
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d008      	beq.n	8004c72 <HAL_UART_IRQHandler+0x14e>
 8004c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c64:	f003 0320 	and.w	r3, r3, #32
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 fb92 	bl	8005396 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7c:	2b40      	cmp	r3, #64	; 0x40
 8004c7e:	bf0c      	ite	eq
 8004c80:	2301      	moveq	r3, #1
 8004c82:	2300      	movne	r3, #0
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	f003 0308 	and.w	r3, r3, #8
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d103      	bne.n	8004c9e <HAL_UART_IRQHandler+0x17a>
 8004c96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d04f      	beq.n	8004d3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fa9a 	bl	80051d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cae:	2b40      	cmp	r3, #64	; 0x40
 8004cb0:	d141      	bne.n	8004d36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3314      	adds	r3, #20
 8004cb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004cc0:	e853 3f00 	ldrex	r3, [r3]
 8004cc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004cc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	3314      	adds	r3, #20
 8004cda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004cde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004ce2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004cea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004cee:	e841 2300 	strex	r3, r2, [r1]
 8004cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004cf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1d9      	bne.n	8004cb2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d013      	beq.n	8004d2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0a:	4a7d      	ldr	r2, [pc, #500]	; (8004f00 <HAL_UART_IRQHandler+0x3dc>)
 8004d0c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fd fa2f 	bl	8002176 <HAL_DMA_Abort_IT>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d016      	beq.n	8004d4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d28:	4610      	mov	r0, r2
 8004d2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d2c:	e00e      	b.n	8004d4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f990 	bl	8005054 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d34:	e00a      	b.n	8004d4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f98c 	bl	8005054 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d3c:	e006      	b.n	8004d4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f988 	bl	8005054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004d4a:	e170      	b.n	800502e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d4c:	bf00      	nop
    return;
 8004d4e:	e16e      	b.n	800502e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	f040 814a 	bne.w	8004fee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d5e:	f003 0310 	and.w	r3, r3, #16
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 8143 	beq.w	8004fee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d6c:	f003 0310 	and.w	r3, r3, #16
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 813c 	beq.w	8004fee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d76:	2300      	movs	r3, #0
 8004d78:	60bb      	str	r3, [r7, #8]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	60bb      	str	r3, [r7, #8]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	60bb      	str	r3, [r7, #8]
 8004d8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d96:	2b40      	cmp	r3, #64	; 0x40
 8004d98:	f040 80b4 	bne.w	8004f04 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004da8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 8140 	beq.w	8005032 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004db6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	f080 8139 	bcs.w	8005032 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004dc6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dd2:	f000 8088 	beq.w	8004ee6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	330c      	adds	r3, #12
 8004ddc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004de4:	e853 3f00 	ldrex	r3, [r3]
 8004de8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004dec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004df0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004df4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	330c      	adds	r3, #12
 8004dfe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004e02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004e0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e12:	e841 2300 	strex	r3, r2, [r1]
 8004e16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004e1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1d9      	bne.n	8004dd6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	3314      	adds	r3, #20
 8004e28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e2c:	e853 3f00 	ldrex	r3, [r3]
 8004e30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004e32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e34:	f023 0301 	bic.w	r3, r3, #1
 8004e38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	3314      	adds	r3, #20
 8004e42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004e4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004e4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e52:	e841 2300 	strex	r3, r2, [r1]
 8004e56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004e58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1e1      	bne.n	8004e22 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	3314      	adds	r3, #20
 8004e64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e68:	e853 3f00 	ldrex	r3, [r3]
 8004e6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004e6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	3314      	adds	r3, #20
 8004e7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004e82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e8a:	e841 2300 	strex	r3, r2, [r1]
 8004e8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1e3      	bne.n	8004e5e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	330c      	adds	r3, #12
 8004eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eae:	e853 3f00 	ldrex	r3, [r3]
 8004eb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eb6:	f023 0310 	bic.w	r3, r3, #16
 8004eba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	330c      	adds	r3, #12
 8004ec4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004ec8:	65ba      	str	r2, [r7, #88]	; 0x58
 8004eca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ecc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ece:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ed0:	e841 2300 	strex	r3, r2, [r1]
 8004ed4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1e3      	bne.n	8004ea4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7fd f8d8 	bl	8002096 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f8b6 	bl	8005068 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004efc:	e099      	b.n	8005032 <HAL_UART_IRQHandler+0x50e>
 8004efe:	bf00      	nop
 8004f00:	0800529f 	.word	0x0800529f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f000 808b 	beq.w	8005036 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004f20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 8086 	beq.w	8005036 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	330c      	adds	r3, #12
 8004f30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f34:	e853 3f00 	ldrex	r3, [r3]
 8004f38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	330c      	adds	r3, #12
 8004f4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004f4e:	647a      	str	r2, [r7, #68]	; 0x44
 8004f50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f56:	e841 2300 	strex	r3, r2, [r1]
 8004f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1e3      	bne.n	8004f2a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	3314      	adds	r3, #20
 8004f68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	e853 3f00 	ldrex	r3, [r3]
 8004f70:	623b      	str	r3, [r7, #32]
   return(result);
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	f023 0301 	bic.w	r3, r3, #1
 8004f78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	3314      	adds	r3, #20
 8004f82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004f86:	633a      	str	r2, [r7, #48]	; 0x30
 8004f88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f8e:	e841 2300 	strex	r3, r2, [r1]
 8004f92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1e3      	bne.n	8004f62 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	330c      	adds	r3, #12
 8004fae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	e853 3f00 	ldrex	r3, [r3]
 8004fb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0310 	bic.w	r3, r3, #16
 8004fbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	330c      	adds	r3, #12
 8004fc8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004fcc:	61fa      	str	r2, [r7, #28]
 8004fce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd0:	69b9      	ldr	r1, [r7, #24]
 8004fd2:	69fa      	ldr	r2, [r7, #28]
 8004fd4:	e841 2300 	strex	r3, r2, [r1]
 8004fd8:	617b      	str	r3, [r7, #20]
   return(result);
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1e3      	bne.n	8004fa8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004fe0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f83e 	bl	8005068 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fec:	e023      	b.n	8005036 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d009      	beq.n	800500e <HAL_UART_IRQHandler+0x4ea>
 8004ffa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f95d 	bl	80052c6 <UART_Transmit_IT>
    return;
 800500c:	e014      	b.n	8005038 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800500e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00e      	beq.n	8005038 <HAL_UART_IRQHandler+0x514>
 800501a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800501e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005022:	2b00      	cmp	r3, #0
 8005024:	d008      	beq.n	8005038 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f99d 	bl	8005366 <UART_EndTransmit_IT>
    return;
 800502c:	e004      	b.n	8005038 <HAL_UART_IRQHandler+0x514>
    return;
 800502e:	bf00      	nop
 8005030:	e002      	b.n	8005038 <HAL_UART_IRQHandler+0x514>
      return;
 8005032:	bf00      	nop
 8005034:	e000      	b.n	8005038 <HAL_UART_IRQHandler+0x514>
      return;
 8005036:	bf00      	nop
  }
}
 8005038:	37e8      	adds	r7, #232	; 0xe8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop

08005040 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	460b      	mov	r3, r1
 8005072:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b090      	sub	sp, #64	; 0x40
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	603b      	str	r3, [r7, #0]
 800508c:	4613      	mov	r3, r2
 800508e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005090:	e050      	b.n	8005134 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005098:	d04c      	beq.n	8005134 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800509a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800509c:	2b00      	cmp	r3, #0
 800509e:	d007      	beq.n	80050b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80050a0:	f7fc fedc 	bl	8001e5c <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d241      	bcs.n	8005134 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	330c      	adds	r3, #12
 80050b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ba:	e853 3f00 	ldrex	r3, [r3]
 80050be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	330c      	adds	r3, #12
 80050ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050d0:	637a      	str	r2, [r7, #52]	; 0x34
 80050d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050d8:	e841 2300 	strex	r3, r2, [r1]
 80050dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80050de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1e5      	bne.n	80050b0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3314      	adds	r3, #20
 80050ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	e853 3f00 	ldrex	r3, [r3]
 80050f2:	613b      	str	r3, [r7, #16]
   return(result);
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	f023 0301 	bic.w	r3, r3, #1
 80050fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3314      	adds	r3, #20
 8005102:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005104:	623a      	str	r2, [r7, #32]
 8005106:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005108:	69f9      	ldr	r1, [r7, #28]
 800510a:	6a3a      	ldr	r2, [r7, #32]
 800510c:	e841 2300 	strex	r3, r2, [r1]
 8005110:	61bb      	str	r3, [r7, #24]
   return(result);
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1e5      	bne.n	80050e4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2220      	movs	r2, #32
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2220      	movs	r2, #32
 8005124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e00f      	b.n	8005154 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	4013      	ands	r3, r2
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	429a      	cmp	r2, r3
 8005142:	bf0c      	ite	eq
 8005144:	2301      	moveq	r3, #1
 8005146:	2300      	movne	r3, #0
 8005148:	b2db      	uxtb	r3, r3
 800514a:	461a      	mov	r2, r3
 800514c:	79fb      	ldrb	r3, [r7, #7]
 800514e:	429a      	cmp	r2, r3
 8005150:	d09f      	beq.n	8005092 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3740      	adds	r7, #64	; 0x40
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	4613      	mov	r3, r2
 8005168:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	88fa      	ldrh	r2, [r7, #6]
 8005174:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	88fa      	ldrh	r2, [r7, #6]
 800517a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2222      	movs	r2, #34	; 0x22
 8005186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d007      	beq.n	80051aa <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68da      	ldr	r2, [r3, #12]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051a8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	695a      	ldr	r2, [r3, #20]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f042 0201 	orr.w	r2, r2, #1
 80051b8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68da      	ldr	r2, [r3, #12]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f042 0220 	orr.w	r2, r2, #32
 80051c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3714      	adds	r7, #20
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051d8:	b480      	push	{r7}
 80051da:	b095      	sub	sp, #84	; 0x54
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	330c      	adds	r3, #12
 80051e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ea:	e853 3f00 	ldrex	r3, [r3]
 80051ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	330c      	adds	r3, #12
 80051fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005200:	643a      	str	r2, [r7, #64]	; 0x40
 8005202:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005204:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005206:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005208:	e841 2300 	strex	r3, r2, [r1]
 800520c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800520e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1e5      	bne.n	80051e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	3314      	adds	r3, #20
 800521a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521c:	6a3b      	ldr	r3, [r7, #32]
 800521e:	e853 3f00 	ldrex	r3, [r3]
 8005222:	61fb      	str	r3, [r7, #28]
   return(result);
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	f023 0301 	bic.w	r3, r3, #1
 800522a:	64bb      	str	r3, [r7, #72]	; 0x48
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	3314      	adds	r3, #20
 8005232:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005234:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005236:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005238:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800523a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800523c:	e841 2300 	strex	r3, r2, [r1]
 8005240:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1e5      	bne.n	8005214 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524c:	2b01      	cmp	r3, #1
 800524e:	d119      	bne.n	8005284 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	330c      	adds	r3, #12
 8005256:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	e853 3f00 	ldrex	r3, [r3]
 800525e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f023 0310 	bic.w	r3, r3, #16
 8005266:	647b      	str	r3, [r7, #68]	; 0x44
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	330c      	adds	r3, #12
 800526e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005270:	61ba      	str	r2, [r7, #24]
 8005272:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005274:	6979      	ldr	r1, [r7, #20]
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	e841 2300 	strex	r3, r2, [r1]
 800527c:	613b      	str	r3, [r7, #16]
   return(result);
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1e5      	bne.n	8005250 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2220      	movs	r2, #32
 8005288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005292:	bf00      	nop
 8005294:	3754      	adds	r7, #84	; 0x54
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b084      	sub	sp, #16
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f7ff fecb 	bl	8005054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052be:	bf00      	nop
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b085      	sub	sp, #20
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b21      	cmp	r3, #33	; 0x21
 80052d8:	d13e      	bne.n	8005358 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052e2:	d114      	bne.n	800530e <UART_Transmit_IT+0x48>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d110      	bne.n	800530e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	461a      	mov	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005300:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	1c9a      	adds	r2, r3, #2
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	621a      	str	r2, [r3, #32]
 800530c:	e008      	b.n	8005320 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	1c59      	adds	r1, r3, #1
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	6211      	str	r1, [r2, #32]
 8005318:	781a      	ldrb	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005324:	b29b      	uxth	r3, r3
 8005326:	3b01      	subs	r3, #1
 8005328:	b29b      	uxth	r3, r3
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	4619      	mov	r1, r3
 800532e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10f      	bne.n	8005354 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68da      	ldr	r2, [r3, #12]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005342:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68da      	ldr	r2, [r3, #12]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005352:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005354:	2300      	movs	r3, #0
 8005356:	e000      	b.n	800535a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005358:	2302      	movs	r3, #2
  }
}
 800535a:	4618      	mov	r0, r3
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b082      	sub	sp, #8
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68da      	ldr	r2, [r3, #12]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800537c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2220      	movs	r2, #32
 8005382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7ff fe5a 	bl	8005040 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b08c      	sub	sp, #48	; 0x30
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b22      	cmp	r3, #34	; 0x22
 80053a8:	f040 80ab 	bne.w	8005502 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053b4:	d117      	bne.n	80053e6 <UART_Receive_IT+0x50>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d113      	bne.n	80053e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80053be:	2300      	movs	r3, #0
 80053c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053de:	1c9a      	adds	r2, r3, #2
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	629a      	str	r2, [r3, #40]	; 0x28
 80053e4:	e026      	b.n	8005434 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80053ec:	2300      	movs	r3, #0
 80053ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053f8:	d007      	beq.n	800540a <UART_Receive_IT+0x74>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10a      	bne.n	8005418 <UART_Receive_IT+0x82>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d106      	bne.n	8005418 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	b2da      	uxtb	r2, r3
 8005412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005414:	701a      	strb	r2, [r3, #0]
 8005416:	e008      	b.n	800542a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	b2db      	uxtb	r3, r3
 8005420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005424:	b2da      	uxtb	r2, r3
 8005426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005428:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542e:	1c5a      	adds	r2, r3, #1
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005438:	b29b      	uxth	r3, r3
 800543a:	3b01      	subs	r3, #1
 800543c:	b29b      	uxth	r3, r3
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	4619      	mov	r1, r3
 8005442:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005444:	2b00      	cmp	r3, #0
 8005446:	d15a      	bne.n	80054fe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68da      	ldr	r2, [r3, #12]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 0220 	bic.w	r2, r2, #32
 8005456:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68da      	ldr	r2, [r3, #12]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005466:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	695a      	ldr	r2, [r3, #20]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f022 0201 	bic.w	r2, r2, #1
 8005476:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2220      	movs	r2, #32
 800547c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005484:	2b01      	cmp	r3, #1
 8005486:	d135      	bne.n	80054f4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	330c      	adds	r3, #12
 8005494:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	e853 3f00 	ldrex	r3, [r3]
 800549c:	613b      	str	r3, [r7, #16]
   return(result);
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f023 0310 	bic.w	r3, r3, #16
 80054a4:	627b      	str	r3, [r7, #36]	; 0x24
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	330c      	adds	r3, #12
 80054ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ae:	623a      	str	r2, [r7, #32]
 80054b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b2:	69f9      	ldr	r1, [r7, #28]
 80054b4:	6a3a      	ldr	r2, [r7, #32]
 80054b6:	e841 2300 	strex	r3, r2, [r1]
 80054ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1e5      	bne.n	800548e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0310 	and.w	r3, r3, #16
 80054cc:	2b10      	cmp	r3, #16
 80054ce:	d10a      	bne.n	80054e6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054d0:	2300      	movs	r3, #0
 80054d2:	60fb      	str	r3, [r7, #12]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	60fb      	str	r3, [r7, #12]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	60fb      	str	r3, [r7, #12]
 80054e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054ea:	4619      	mov	r1, r3
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f7ff fdbb 	bl	8005068 <HAL_UARTEx_RxEventCallback>
 80054f2:	e002      	b.n	80054fa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f7fb fc3b 	bl	8000d70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80054fa:	2300      	movs	r3, #0
 80054fc:	e002      	b.n	8005504 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	e000      	b.n	8005504 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005502:	2302      	movs	r3, #2
  }
}
 8005504:	4618      	mov	r0, r3
 8005506:	3730      	adds	r7, #48	; 0x30
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800550c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005510:	b0c0      	sub	sp, #256	; 0x100
 8005512:	af00      	add	r7, sp, #0
 8005514:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005528:	68d9      	ldr	r1, [r3, #12]
 800552a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	ea40 0301 	orr.w	r3, r0, r1
 8005534:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800553a:	689a      	ldr	r2, [r3, #8]
 800553c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	431a      	orrs	r2, r3
 8005544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	431a      	orrs	r2, r3
 800554c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	4313      	orrs	r3, r2
 8005554:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005564:	f021 010c 	bic.w	r1, r1, #12
 8005568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005572:	430b      	orrs	r3, r1
 8005574:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005586:	6999      	ldr	r1, [r3, #24]
 8005588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	ea40 0301 	orr.w	r3, r0, r1
 8005592:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	4b8f      	ldr	r3, [pc, #572]	; (80057d8 <UART_SetConfig+0x2cc>)
 800559c:	429a      	cmp	r2, r3
 800559e:	d005      	beq.n	80055ac <UART_SetConfig+0xa0>
 80055a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	4b8d      	ldr	r3, [pc, #564]	; (80057dc <UART_SetConfig+0x2d0>)
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d104      	bne.n	80055b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055ac:	f7fd fd2c 	bl	8003008 <HAL_RCC_GetPCLK2Freq>
 80055b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80055b4:	e003      	b.n	80055be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055b6:	f7fd fd13 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 80055ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055c8:	f040 810c 	bne.w	80057e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055d0:	2200      	movs	r2, #0
 80055d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80055d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80055da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80055de:	4622      	mov	r2, r4
 80055e0:	462b      	mov	r3, r5
 80055e2:	1891      	adds	r1, r2, r2
 80055e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80055e6:	415b      	adcs	r3, r3
 80055e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80055ee:	4621      	mov	r1, r4
 80055f0:	eb12 0801 	adds.w	r8, r2, r1
 80055f4:	4629      	mov	r1, r5
 80055f6:	eb43 0901 	adc.w	r9, r3, r1
 80055fa:	f04f 0200 	mov.w	r2, #0
 80055fe:	f04f 0300 	mov.w	r3, #0
 8005602:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005606:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800560a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800560e:	4690      	mov	r8, r2
 8005610:	4699      	mov	r9, r3
 8005612:	4623      	mov	r3, r4
 8005614:	eb18 0303 	adds.w	r3, r8, r3
 8005618:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800561c:	462b      	mov	r3, r5
 800561e:	eb49 0303 	adc.w	r3, r9, r3
 8005622:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005632:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005636:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800563a:	460b      	mov	r3, r1
 800563c:	18db      	adds	r3, r3, r3
 800563e:	653b      	str	r3, [r7, #80]	; 0x50
 8005640:	4613      	mov	r3, r2
 8005642:	eb42 0303 	adc.w	r3, r2, r3
 8005646:	657b      	str	r3, [r7, #84]	; 0x54
 8005648:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800564c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005650:	f7fb fa0c 	bl	8000a6c <__aeabi_uldivmod>
 8005654:	4602      	mov	r2, r0
 8005656:	460b      	mov	r3, r1
 8005658:	4b61      	ldr	r3, [pc, #388]	; (80057e0 <UART_SetConfig+0x2d4>)
 800565a:	fba3 2302 	umull	r2, r3, r3, r2
 800565e:	095b      	lsrs	r3, r3, #5
 8005660:	011c      	lsls	r4, r3, #4
 8005662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005666:	2200      	movs	r2, #0
 8005668:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800566c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005670:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005674:	4642      	mov	r2, r8
 8005676:	464b      	mov	r3, r9
 8005678:	1891      	adds	r1, r2, r2
 800567a:	64b9      	str	r1, [r7, #72]	; 0x48
 800567c:	415b      	adcs	r3, r3
 800567e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005680:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005684:	4641      	mov	r1, r8
 8005686:	eb12 0a01 	adds.w	sl, r2, r1
 800568a:	4649      	mov	r1, r9
 800568c:	eb43 0b01 	adc.w	fp, r3, r1
 8005690:	f04f 0200 	mov.w	r2, #0
 8005694:	f04f 0300 	mov.w	r3, #0
 8005698:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800569c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056a4:	4692      	mov	sl, r2
 80056a6:	469b      	mov	fp, r3
 80056a8:	4643      	mov	r3, r8
 80056aa:	eb1a 0303 	adds.w	r3, sl, r3
 80056ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056b2:	464b      	mov	r3, r9
 80056b4:	eb4b 0303 	adc.w	r3, fp, r3
 80056b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80056bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80056cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80056d0:	460b      	mov	r3, r1
 80056d2:	18db      	adds	r3, r3, r3
 80056d4:	643b      	str	r3, [r7, #64]	; 0x40
 80056d6:	4613      	mov	r3, r2
 80056d8:	eb42 0303 	adc.w	r3, r2, r3
 80056dc:	647b      	str	r3, [r7, #68]	; 0x44
 80056de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80056e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80056e6:	f7fb f9c1 	bl	8000a6c <__aeabi_uldivmod>
 80056ea:	4602      	mov	r2, r0
 80056ec:	460b      	mov	r3, r1
 80056ee:	4611      	mov	r1, r2
 80056f0:	4b3b      	ldr	r3, [pc, #236]	; (80057e0 <UART_SetConfig+0x2d4>)
 80056f2:	fba3 2301 	umull	r2, r3, r3, r1
 80056f6:	095b      	lsrs	r3, r3, #5
 80056f8:	2264      	movs	r2, #100	; 0x64
 80056fa:	fb02 f303 	mul.w	r3, r2, r3
 80056fe:	1acb      	subs	r3, r1, r3
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005706:	4b36      	ldr	r3, [pc, #216]	; (80057e0 <UART_SetConfig+0x2d4>)
 8005708:	fba3 2302 	umull	r2, r3, r3, r2
 800570c:	095b      	lsrs	r3, r3, #5
 800570e:	005b      	lsls	r3, r3, #1
 8005710:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005714:	441c      	add	r4, r3
 8005716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800571a:	2200      	movs	r2, #0
 800571c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005720:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005724:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005728:	4642      	mov	r2, r8
 800572a:	464b      	mov	r3, r9
 800572c:	1891      	adds	r1, r2, r2
 800572e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005730:	415b      	adcs	r3, r3
 8005732:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005734:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005738:	4641      	mov	r1, r8
 800573a:	1851      	adds	r1, r2, r1
 800573c:	6339      	str	r1, [r7, #48]	; 0x30
 800573e:	4649      	mov	r1, r9
 8005740:	414b      	adcs	r3, r1
 8005742:	637b      	str	r3, [r7, #52]	; 0x34
 8005744:	f04f 0200 	mov.w	r2, #0
 8005748:	f04f 0300 	mov.w	r3, #0
 800574c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005750:	4659      	mov	r1, fp
 8005752:	00cb      	lsls	r3, r1, #3
 8005754:	4651      	mov	r1, sl
 8005756:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800575a:	4651      	mov	r1, sl
 800575c:	00ca      	lsls	r2, r1, #3
 800575e:	4610      	mov	r0, r2
 8005760:	4619      	mov	r1, r3
 8005762:	4603      	mov	r3, r0
 8005764:	4642      	mov	r2, r8
 8005766:	189b      	adds	r3, r3, r2
 8005768:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800576c:	464b      	mov	r3, r9
 800576e:	460a      	mov	r2, r1
 8005770:	eb42 0303 	adc.w	r3, r2, r3
 8005774:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005784:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005788:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800578c:	460b      	mov	r3, r1
 800578e:	18db      	adds	r3, r3, r3
 8005790:	62bb      	str	r3, [r7, #40]	; 0x28
 8005792:	4613      	mov	r3, r2
 8005794:	eb42 0303 	adc.w	r3, r2, r3
 8005798:	62fb      	str	r3, [r7, #44]	; 0x2c
 800579a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800579e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80057a2:	f7fb f963 	bl	8000a6c <__aeabi_uldivmod>
 80057a6:	4602      	mov	r2, r0
 80057a8:	460b      	mov	r3, r1
 80057aa:	4b0d      	ldr	r3, [pc, #52]	; (80057e0 <UART_SetConfig+0x2d4>)
 80057ac:	fba3 1302 	umull	r1, r3, r3, r2
 80057b0:	095b      	lsrs	r3, r3, #5
 80057b2:	2164      	movs	r1, #100	; 0x64
 80057b4:	fb01 f303 	mul.w	r3, r1, r3
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	00db      	lsls	r3, r3, #3
 80057bc:	3332      	adds	r3, #50	; 0x32
 80057be:	4a08      	ldr	r2, [pc, #32]	; (80057e0 <UART_SetConfig+0x2d4>)
 80057c0:	fba2 2303 	umull	r2, r3, r2, r3
 80057c4:	095b      	lsrs	r3, r3, #5
 80057c6:	f003 0207 	and.w	r2, r3, #7
 80057ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4422      	add	r2, r4
 80057d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057d4:	e105      	b.n	80059e2 <UART_SetConfig+0x4d6>
 80057d6:	bf00      	nop
 80057d8:	40011000 	.word	0x40011000
 80057dc:	40011400 	.word	0x40011400
 80057e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057e8:	2200      	movs	r2, #0
 80057ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80057ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80057f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80057f6:	4642      	mov	r2, r8
 80057f8:	464b      	mov	r3, r9
 80057fa:	1891      	adds	r1, r2, r2
 80057fc:	6239      	str	r1, [r7, #32]
 80057fe:	415b      	adcs	r3, r3
 8005800:	627b      	str	r3, [r7, #36]	; 0x24
 8005802:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005806:	4641      	mov	r1, r8
 8005808:	1854      	adds	r4, r2, r1
 800580a:	4649      	mov	r1, r9
 800580c:	eb43 0501 	adc.w	r5, r3, r1
 8005810:	f04f 0200 	mov.w	r2, #0
 8005814:	f04f 0300 	mov.w	r3, #0
 8005818:	00eb      	lsls	r3, r5, #3
 800581a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800581e:	00e2      	lsls	r2, r4, #3
 8005820:	4614      	mov	r4, r2
 8005822:	461d      	mov	r5, r3
 8005824:	4643      	mov	r3, r8
 8005826:	18e3      	adds	r3, r4, r3
 8005828:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800582c:	464b      	mov	r3, r9
 800582e:	eb45 0303 	adc.w	r3, r5, r3
 8005832:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005842:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005846:	f04f 0200 	mov.w	r2, #0
 800584a:	f04f 0300 	mov.w	r3, #0
 800584e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005852:	4629      	mov	r1, r5
 8005854:	008b      	lsls	r3, r1, #2
 8005856:	4621      	mov	r1, r4
 8005858:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800585c:	4621      	mov	r1, r4
 800585e:	008a      	lsls	r2, r1, #2
 8005860:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005864:	f7fb f902 	bl	8000a6c <__aeabi_uldivmod>
 8005868:	4602      	mov	r2, r0
 800586a:	460b      	mov	r3, r1
 800586c:	4b60      	ldr	r3, [pc, #384]	; (80059f0 <UART_SetConfig+0x4e4>)
 800586e:	fba3 2302 	umull	r2, r3, r3, r2
 8005872:	095b      	lsrs	r3, r3, #5
 8005874:	011c      	lsls	r4, r3, #4
 8005876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800587a:	2200      	movs	r2, #0
 800587c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005880:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005884:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005888:	4642      	mov	r2, r8
 800588a:	464b      	mov	r3, r9
 800588c:	1891      	adds	r1, r2, r2
 800588e:	61b9      	str	r1, [r7, #24]
 8005890:	415b      	adcs	r3, r3
 8005892:	61fb      	str	r3, [r7, #28]
 8005894:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005898:	4641      	mov	r1, r8
 800589a:	1851      	adds	r1, r2, r1
 800589c:	6139      	str	r1, [r7, #16]
 800589e:	4649      	mov	r1, r9
 80058a0:	414b      	adcs	r3, r1
 80058a2:	617b      	str	r3, [r7, #20]
 80058a4:	f04f 0200 	mov.w	r2, #0
 80058a8:	f04f 0300 	mov.w	r3, #0
 80058ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058b0:	4659      	mov	r1, fp
 80058b2:	00cb      	lsls	r3, r1, #3
 80058b4:	4651      	mov	r1, sl
 80058b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058ba:	4651      	mov	r1, sl
 80058bc:	00ca      	lsls	r2, r1, #3
 80058be:	4610      	mov	r0, r2
 80058c0:	4619      	mov	r1, r3
 80058c2:	4603      	mov	r3, r0
 80058c4:	4642      	mov	r2, r8
 80058c6:	189b      	adds	r3, r3, r2
 80058c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80058cc:	464b      	mov	r3, r9
 80058ce:	460a      	mov	r2, r1
 80058d0:	eb42 0303 	adc.w	r3, r2, r3
 80058d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80058d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80058e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80058e4:	f04f 0200 	mov.w	r2, #0
 80058e8:	f04f 0300 	mov.w	r3, #0
 80058ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80058f0:	4649      	mov	r1, r9
 80058f2:	008b      	lsls	r3, r1, #2
 80058f4:	4641      	mov	r1, r8
 80058f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058fa:	4641      	mov	r1, r8
 80058fc:	008a      	lsls	r2, r1, #2
 80058fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005902:	f7fb f8b3 	bl	8000a6c <__aeabi_uldivmod>
 8005906:	4602      	mov	r2, r0
 8005908:	460b      	mov	r3, r1
 800590a:	4b39      	ldr	r3, [pc, #228]	; (80059f0 <UART_SetConfig+0x4e4>)
 800590c:	fba3 1302 	umull	r1, r3, r3, r2
 8005910:	095b      	lsrs	r3, r3, #5
 8005912:	2164      	movs	r1, #100	; 0x64
 8005914:	fb01 f303 	mul.w	r3, r1, r3
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	011b      	lsls	r3, r3, #4
 800591c:	3332      	adds	r3, #50	; 0x32
 800591e:	4a34      	ldr	r2, [pc, #208]	; (80059f0 <UART_SetConfig+0x4e4>)
 8005920:	fba2 2303 	umull	r2, r3, r2, r3
 8005924:	095b      	lsrs	r3, r3, #5
 8005926:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800592a:	441c      	add	r4, r3
 800592c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005930:	2200      	movs	r2, #0
 8005932:	673b      	str	r3, [r7, #112]	; 0x70
 8005934:	677a      	str	r2, [r7, #116]	; 0x74
 8005936:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800593a:	4642      	mov	r2, r8
 800593c:	464b      	mov	r3, r9
 800593e:	1891      	adds	r1, r2, r2
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	415b      	adcs	r3, r3
 8005944:	60fb      	str	r3, [r7, #12]
 8005946:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800594a:	4641      	mov	r1, r8
 800594c:	1851      	adds	r1, r2, r1
 800594e:	6039      	str	r1, [r7, #0]
 8005950:	4649      	mov	r1, r9
 8005952:	414b      	adcs	r3, r1
 8005954:	607b      	str	r3, [r7, #4]
 8005956:	f04f 0200 	mov.w	r2, #0
 800595a:	f04f 0300 	mov.w	r3, #0
 800595e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005962:	4659      	mov	r1, fp
 8005964:	00cb      	lsls	r3, r1, #3
 8005966:	4651      	mov	r1, sl
 8005968:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800596c:	4651      	mov	r1, sl
 800596e:	00ca      	lsls	r2, r1, #3
 8005970:	4610      	mov	r0, r2
 8005972:	4619      	mov	r1, r3
 8005974:	4603      	mov	r3, r0
 8005976:	4642      	mov	r2, r8
 8005978:	189b      	adds	r3, r3, r2
 800597a:	66bb      	str	r3, [r7, #104]	; 0x68
 800597c:	464b      	mov	r3, r9
 800597e:	460a      	mov	r2, r1
 8005980:	eb42 0303 	adc.w	r3, r2, r3
 8005984:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	663b      	str	r3, [r7, #96]	; 0x60
 8005990:	667a      	str	r2, [r7, #100]	; 0x64
 8005992:	f04f 0200 	mov.w	r2, #0
 8005996:	f04f 0300 	mov.w	r3, #0
 800599a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800599e:	4649      	mov	r1, r9
 80059a0:	008b      	lsls	r3, r1, #2
 80059a2:	4641      	mov	r1, r8
 80059a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059a8:	4641      	mov	r1, r8
 80059aa:	008a      	lsls	r2, r1, #2
 80059ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80059b0:	f7fb f85c 	bl	8000a6c <__aeabi_uldivmod>
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	4b0d      	ldr	r3, [pc, #52]	; (80059f0 <UART_SetConfig+0x4e4>)
 80059ba:	fba3 1302 	umull	r1, r3, r3, r2
 80059be:	095b      	lsrs	r3, r3, #5
 80059c0:	2164      	movs	r1, #100	; 0x64
 80059c2:	fb01 f303 	mul.w	r3, r1, r3
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	011b      	lsls	r3, r3, #4
 80059ca:	3332      	adds	r3, #50	; 0x32
 80059cc:	4a08      	ldr	r2, [pc, #32]	; (80059f0 <UART_SetConfig+0x4e4>)
 80059ce:	fba2 2303 	umull	r2, r3, r2, r3
 80059d2:	095b      	lsrs	r3, r3, #5
 80059d4:	f003 020f 	and.w	r2, r3, #15
 80059d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4422      	add	r2, r4
 80059e0:	609a      	str	r2, [r3, #8]
}
 80059e2:	bf00      	nop
 80059e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80059e8:	46bd      	mov	sp, r7
 80059ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059ee:	bf00      	nop
 80059f0:	51eb851f 	.word	0x51eb851f

080059f4 <__errno>:
 80059f4:	4b01      	ldr	r3, [pc, #4]	; (80059fc <__errno+0x8>)
 80059f6:	6818      	ldr	r0, [r3, #0]
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	2000000c 	.word	0x2000000c

08005a00 <__libc_init_array>:
 8005a00:	b570      	push	{r4, r5, r6, lr}
 8005a02:	4d0d      	ldr	r5, [pc, #52]	; (8005a38 <__libc_init_array+0x38>)
 8005a04:	4c0d      	ldr	r4, [pc, #52]	; (8005a3c <__libc_init_array+0x3c>)
 8005a06:	1b64      	subs	r4, r4, r5
 8005a08:	10a4      	asrs	r4, r4, #2
 8005a0a:	2600      	movs	r6, #0
 8005a0c:	42a6      	cmp	r6, r4
 8005a0e:	d109      	bne.n	8005a24 <__libc_init_array+0x24>
 8005a10:	4d0b      	ldr	r5, [pc, #44]	; (8005a40 <__libc_init_array+0x40>)
 8005a12:	4c0c      	ldr	r4, [pc, #48]	; (8005a44 <__libc_init_array+0x44>)
 8005a14:	f000 fe20 	bl	8006658 <_init>
 8005a18:	1b64      	subs	r4, r4, r5
 8005a1a:	10a4      	asrs	r4, r4, #2
 8005a1c:	2600      	movs	r6, #0
 8005a1e:	42a6      	cmp	r6, r4
 8005a20:	d105      	bne.n	8005a2e <__libc_init_array+0x2e>
 8005a22:	bd70      	pop	{r4, r5, r6, pc}
 8005a24:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a28:	4798      	blx	r3
 8005a2a:	3601      	adds	r6, #1
 8005a2c:	e7ee      	b.n	8005a0c <__libc_init_array+0xc>
 8005a2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a32:	4798      	blx	r3
 8005a34:	3601      	adds	r6, #1
 8005a36:	e7f2      	b.n	8005a1e <__libc_init_array+0x1e>
 8005a38:	08006848 	.word	0x08006848
 8005a3c:	08006848 	.word	0x08006848
 8005a40:	08006848 	.word	0x08006848
 8005a44:	0800684c 	.word	0x0800684c

08005a48 <memset>:
 8005a48:	4402      	add	r2, r0
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d100      	bne.n	8005a52 <memset+0xa>
 8005a50:	4770      	bx	lr
 8005a52:	f803 1b01 	strb.w	r1, [r3], #1
 8005a56:	e7f9      	b.n	8005a4c <memset+0x4>

08005a58 <siscanf>:
 8005a58:	b40e      	push	{r1, r2, r3}
 8005a5a:	b510      	push	{r4, lr}
 8005a5c:	b09f      	sub	sp, #124	; 0x7c
 8005a5e:	ac21      	add	r4, sp, #132	; 0x84
 8005a60:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005a64:	f854 2b04 	ldr.w	r2, [r4], #4
 8005a68:	9201      	str	r2, [sp, #4]
 8005a6a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8005a6e:	9004      	str	r0, [sp, #16]
 8005a70:	9008      	str	r0, [sp, #32]
 8005a72:	f7fa fbb5 	bl	80001e0 <strlen>
 8005a76:	4b0c      	ldr	r3, [pc, #48]	; (8005aa8 <siscanf+0x50>)
 8005a78:	9005      	str	r0, [sp, #20]
 8005a7a:	9009      	str	r0, [sp, #36]	; 0x24
 8005a7c:	930d      	str	r3, [sp, #52]	; 0x34
 8005a7e:	480b      	ldr	r0, [pc, #44]	; (8005aac <siscanf+0x54>)
 8005a80:	9a01      	ldr	r2, [sp, #4]
 8005a82:	6800      	ldr	r0, [r0, #0]
 8005a84:	9403      	str	r4, [sp, #12]
 8005a86:	2300      	movs	r3, #0
 8005a88:	9311      	str	r3, [sp, #68]	; 0x44
 8005a8a:	9316      	str	r3, [sp, #88]	; 0x58
 8005a8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a90:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005a94:	a904      	add	r1, sp, #16
 8005a96:	4623      	mov	r3, r4
 8005a98:	f000 f866 	bl	8005b68 <__ssvfiscanf_r>
 8005a9c:	b01f      	add	sp, #124	; 0x7c
 8005a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005aa2:	b003      	add	sp, #12
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	08005ab1 	.word	0x08005ab1
 8005aac:	2000000c 	.word	0x2000000c

08005ab0 <__seofread>:
 8005ab0:	2000      	movs	r0, #0
 8005ab2:	4770      	bx	lr

08005ab4 <_sungetc_r>:
 8005ab4:	b538      	push	{r3, r4, r5, lr}
 8005ab6:	1c4b      	adds	r3, r1, #1
 8005ab8:	4614      	mov	r4, r2
 8005aba:	d103      	bne.n	8005ac4 <_sungetc_r+0x10>
 8005abc:	f04f 35ff 	mov.w	r5, #4294967295
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	bd38      	pop	{r3, r4, r5, pc}
 8005ac4:	8993      	ldrh	r3, [r2, #12]
 8005ac6:	f023 0320 	bic.w	r3, r3, #32
 8005aca:	8193      	strh	r3, [r2, #12]
 8005acc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ace:	6852      	ldr	r2, [r2, #4]
 8005ad0:	b2cd      	uxtb	r5, r1
 8005ad2:	b18b      	cbz	r3, 8005af8 <_sungetc_r+0x44>
 8005ad4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	dd08      	ble.n	8005aec <_sungetc_r+0x38>
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	1e5a      	subs	r2, r3, #1
 8005ade:	6022      	str	r2, [r4, #0]
 8005ae0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005ae4:	6863      	ldr	r3, [r4, #4]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	6063      	str	r3, [r4, #4]
 8005aea:	e7e9      	b.n	8005ac0 <_sungetc_r+0xc>
 8005aec:	4621      	mov	r1, r4
 8005aee:	f000 fc35 	bl	800635c <__submore>
 8005af2:	2800      	cmp	r0, #0
 8005af4:	d0f1      	beq.n	8005ada <_sungetc_r+0x26>
 8005af6:	e7e1      	b.n	8005abc <_sungetc_r+0x8>
 8005af8:	6921      	ldr	r1, [r4, #16]
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	b151      	cbz	r1, 8005b14 <_sungetc_r+0x60>
 8005afe:	4299      	cmp	r1, r3
 8005b00:	d208      	bcs.n	8005b14 <_sungetc_r+0x60>
 8005b02:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005b06:	42a9      	cmp	r1, r5
 8005b08:	d104      	bne.n	8005b14 <_sungetc_r+0x60>
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	3201      	adds	r2, #1
 8005b0e:	6023      	str	r3, [r4, #0]
 8005b10:	6062      	str	r2, [r4, #4]
 8005b12:	e7d5      	b.n	8005ac0 <_sungetc_r+0xc>
 8005b14:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005b18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b1c:	6363      	str	r3, [r4, #52]	; 0x34
 8005b1e:	2303      	movs	r3, #3
 8005b20:	63a3      	str	r3, [r4, #56]	; 0x38
 8005b22:	4623      	mov	r3, r4
 8005b24:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005b28:	6023      	str	r3, [r4, #0]
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e7dc      	b.n	8005ae8 <_sungetc_r+0x34>

08005b2e <__ssrefill_r>:
 8005b2e:	b510      	push	{r4, lr}
 8005b30:	460c      	mov	r4, r1
 8005b32:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005b34:	b169      	cbz	r1, 8005b52 <__ssrefill_r+0x24>
 8005b36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b3a:	4299      	cmp	r1, r3
 8005b3c:	d001      	beq.n	8005b42 <__ssrefill_r+0x14>
 8005b3e:	f000 fc57 	bl	80063f0 <_free_r>
 8005b42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b44:	6063      	str	r3, [r4, #4]
 8005b46:	2000      	movs	r0, #0
 8005b48:	6360      	str	r0, [r4, #52]	; 0x34
 8005b4a:	b113      	cbz	r3, 8005b52 <__ssrefill_r+0x24>
 8005b4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b4e:	6023      	str	r3, [r4, #0]
 8005b50:	bd10      	pop	{r4, pc}
 8005b52:	6923      	ldr	r3, [r4, #16]
 8005b54:	6023      	str	r3, [r4, #0]
 8005b56:	2300      	movs	r3, #0
 8005b58:	6063      	str	r3, [r4, #4]
 8005b5a:	89a3      	ldrh	r3, [r4, #12]
 8005b5c:	f043 0320 	orr.w	r3, r3, #32
 8005b60:	81a3      	strh	r3, [r4, #12]
 8005b62:	f04f 30ff 	mov.w	r0, #4294967295
 8005b66:	e7f3      	b.n	8005b50 <__ssrefill_r+0x22>

08005b68 <__ssvfiscanf_r>:
 8005b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b6c:	460c      	mov	r4, r1
 8005b6e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8005b72:	2100      	movs	r1, #0
 8005b74:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8005b78:	49a6      	ldr	r1, [pc, #664]	; (8005e14 <__ssvfiscanf_r+0x2ac>)
 8005b7a:	91a0      	str	r1, [sp, #640]	; 0x280
 8005b7c:	f10d 0804 	add.w	r8, sp, #4
 8005b80:	49a5      	ldr	r1, [pc, #660]	; (8005e18 <__ssvfiscanf_r+0x2b0>)
 8005b82:	4fa6      	ldr	r7, [pc, #664]	; (8005e1c <__ssvfiscanf_r+0x2b4>)
 8005b84:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8005e20 <__ssvfiscanf_r+0x2b8>
 8005b88:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005b8c:	4606      	mov	r6, r0
 8005b8e:	91a1      	str	r1, [sp, #644]	; 0x284
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	7813      	ldrb	r3, [r2, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 815a 	beq.w	8005e4e <__ssvfiscanf_r+0x2e6>
 8005b9a:	5dd9      	ldrb	r1, [r3, r7]
 8005b9c:	f011 0108 	ands.w	r1, r1, #8
 8005ba0:	f102 0501 	add.w	r5, r2, #1
 8005ba4:	d019      	beq.n	8005bda <__ssvfiscanf_r+0x72>
 8005ba6:	6863      	ldr	r3, [r4, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	dd0f      	ble.n	8005bcc <__ssvfiscanf_r+0x64>
 8005bac:	6823      	ldr	r3, [r4, #0]
 8005bae:	781a      	ldrb	r2, [r3, #0]
 8005bb0:	5cba      	ldrb	r2, [r7, r2]
 8005bb2:	0712      	lsls	r2, r2, #28
 8005bb4:	d401      	bmi.n	8005bba <__ssvfiscanf_r+0x52>
 8005bb6:	462a      	mov	r2, r5
 8005bb8:	e7eb      	b.n	8005b92 <__ssvfiscanf_r+0x2a>
 8005bba:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005bbc:	3201      	adds	r2, #1
 8005bbe:	9245      	str	r2, [sp, #276]	; 0x114
 8005bc0:	6862      	ldr	r2, [r4, #4]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	3a01      	subs	r2, #1
 8005bc6:	6062      	str	r2, [r4, #4]
 8005bc8:	6023      	str	r3, [r4, #0]
 8005bca:	e7ec      	b.n	8005ba6 <__ssvfiscanf_r+0x3e>
 8005bcc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005bce:	4621      	mov	r1, r4
 8005bd0:	4630      	mov	r0, r6
 8005bd2:	4798      	blx	r3
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	d0e9      	beq.n	8005bac <__ssvfiscanf_r+0x44>
 8005bd8:	e7ed      	b.n	8005bb6 <__ssvfiscanf_r+0x4e>
 8005bda:	2b25      	cmp	r3, #37	; 0x25
 8005bdc:	d012      	beq.n	8005c04 <__ssvfiscanf_r+0x9c>
 8005bde:	469a      	mov	sl, r3
 8005be0:	6863      	ldr	r3, [r4, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f340 8091 	ble.w	8005d0a <__ssvfiscanf_r+0x1a2>
 8005be8:	6822      	ldr	r2, [r4, #0]
 8005bea:	7813      	ldrb	r3, [r2, #0]
 8005bec:	4553      	cmp	r3, sl
 8005bee:	f040 812e 	bne.w	8005e4e <__ssvfiscanf_r+0x2e6>
 8005bf2:	6863      	ldr	r3, [r4, #4]
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	6063      	str	r3, [r4, #4]
 8005bf8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005bfa:	3201      	adds	r2, #1
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	6022      	str	r2, [r4, #0]
 8005c00:	9345      	str	r3, [sp, #276]	; 0x114
 8005c02:	e7d8      	b.n	8005bb6 <__ssvfiscanf_r+0x4e>
 8005c04:	9141      	str	r1, [sp, #260]	; 0x104
 8005c06:	9143      	str	r1, [sp, #268]	; 0x10c
 8005c08:	7853      	ldrb	r3, [r2, #1]
 8005c0a:	2b2a      	cmp	r3, #42	; 0x2a
 8005c0c:	bf02      	ittt	eq
 8005c0e:	2310      	moveq	r3, #16
 8005c10:	1c95      	addeq	r5, r2, #2
 8005c12:	9341      	streq	r3, [sp, #260]	; 0x104
 8005c14:	220a      	movs	r2, #10
 8005c16:	46aa      	mov	sl, r5
 8005c18:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005c1c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005c20:	2b09      	cmp	r3, #9
 8005c22:	d91d      	bls.n	8005c60 <__ssvfiscanf_r+0xf8>
 8005c24:	487e      	ldr	r0, [pc, #504]	; (8005e20 <__ssvfiscanf_r+0x2b8>)
 8005c26:	2203      	movs	r2, #3
 8005c28:	f7fa fae2 	bl	80001f0 <memchr>
 8005c2c:	b140      	cbz	r0, 8005c40 <__ssvfiscanf_r+0xd8>
 8005c2e:	2301      	movs	r3, #1
 8005c30:	eba0 0009 	sub.w	r0, r0, r9
 8005c34:	fa03 f000 	lsl.w	r0, r3, r0
 8005c38:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005c3a:	4318      	orrs	r0, r3
 8005c3c:	9041      	str	r0, [sp, #260]	; 0x104
 8005c3e:	4655      	mov	r5, sl
 8005c40:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005c44:	2b78      	cmp	r3, #120	; 0x78
 8005c46:	d806      	bhi.n	8005c56 <__ssvfiscanf_r+0xee>
 8005c48:	2b57      	cmp	r3, #87	; 0x57
 8005c4a:	d810      	bhi.n	8005c6e <__ssvfiscanf_r+0x106>
 8005c4c:	2b25      	cmp	r3, #37	; 0x25
 8005c4e:	d0c6      	beq.n	8005bde <__ssvfiscanf_r+0x76>
 8005c50:	d856      	bhi.n	8005d00 <__ssvfiscanf_r+0x198>
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d064      	beq.n	8005d20 <__ssvfiscanf_r+0x1b8>
 8005c56:	2303      	movs	r3, #3
 8005c58:	9347      	str	r3, [sp, #284]	; 0x11c
 8005c5a:	230a      	movs	r3, #10
 8005c5c:	9342      	str	r3, [sp, #264]	; 0x108
 8005c5e:	e071      	b.n	8005d44 <__ssvfiscanf_r+0x1dc>
 8005c60:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005c62:	fb02 1103 	mla	r1, r2, r3, r1
 8005c66:	3930      	subs	r1, #48	; 0x30
 8005c68:	9143      	str	r1, [sp, #268]	; 0x10c
 8005c6a:	4655      	mov	r5, sl
 8005c6c:	e7d3      	b.n	8005c16 <__ssvfiscanf_r+0xae>
 8005c6e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005c72:	2a20      	cmp	r2, #32
 8005c74:	d8ef      	bhi.n	8005c56 <__ssvfiscanf_r+0xee>
 8005c76:	a101      	add	r1, pc, #4	; (adr r1, 8005c7c <__ssvfiscanf_r+0x114>)
 8005c78:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005c7c:	08005d2f 	.word	0x08005d2f
 8005c80:	08005c57 	.word	0x08005c57
 8005c84:	08005c57 	.word	0x08005c57
 8005c88:	08005d8d 	.word	0x08005d8d
 8005c8c:	08005c57 	.word	0x08005c57
 8005c90:	08005c57 	.word	0x08005c57
 8005c94:	08005c57 	.word	0x08005c57
 8005c98:	08005c57 	.word	0x08005c57
 8005c9c:	08005c57 	.word	0x08005c57
 8005ca0:	08005c57 	.word	0x08005c57
 8005ca4:	08005c57 	.word	0x08005c57
 8005ca8:	08005da3 	.word	0x08005da3
 8005cac:	08005d79 	.word	0x08005d79
 8005cb0:	08005d07 	.word	0x08005d07
 8005cb4:	08005d07 	.word	0x08005d07
 8005cb8:	08005d07 	.word	0x08005d07
 8005cbc:	08005c57 	.word	0x08005c57
 8005cc0:	08005d7d 	.word	0x08005d7d
 8005cc4:	08005c57 	.word	0x08005c57
 8005cc8:	08005c57 	.word	0x08005c57
 8005ccc:	08005c57 	.word	0x08005c57
 8005cd0:	08005c57 	.word	0x08005c57
 8005cd4:	08005db3 	.word	0x08005db3
 8005cd8:	08005d85 	.word	0x08005d85
 8005cdc:	08005d27 	.word	0x08005d27
 8005ce0:	08005c57 	.word	0x08005c57
 8005ce4:	08005c57 	.word	0x08005c57
 8005ce8:	08005daf 	.word	0x08005daf
 8005cec:	08005c57 	.word	0x08005c57
 8005cf0:	08005d79 	.word	0x08005d79
 8005cf4:	08005c57 	.word	0x08005c57
 8005cf8:	08005c57 	.word	0x08005c57
 8005cfc:	08005d2f 	.word	0x08005d2f
 8005d00:	3b45      	subs	r3, #69	; 0x45
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d8a7      	bhi.n	8005c56 <__ssvfiscanf_r+0xee>
 8005d06:	2305      	movs	r3, #5
 8005d08:	e01b      	b.n	8005d42 <__ssvfiscanf_r+0x1da>
 8005d0a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005d0c:	4621      	mov	r1, r4
 8005d0e:	4630      	mov	r0, r6
 8005d10:	4798      	blx	r3
 8005d12:	2800      	cmp	r0, #0
 8005d14:	f43f af68 	beq.w	8005be8 <__ssvfiscanf_r+0x80>
 8005d18:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005d1a:	2800      	cmp	r0, #0
 8005d1c:	f040 808d 	bne.w	8005e3a <__ssvfiscanf_r+0x2d2>
 8005d20:	f04f 30ff 	mov.w	r0, #4294967295
 8005d24:	e08f      	b.n	8005e46 <__ssvfiscanf_r+0x2de>
 8005d26:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005d28:	f042 0220 	orr.w	r2, r2, #32
 8005d2c:	9241      	str	r2, [sp, #260]	; 0x104
 8005d2e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005d30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d34:	9241      	str	r2, [sp, #260]	; 0x104
 8005d36:	2210      	movs	r2, #16
 8005d38:	2b6f      	cmp	r3, #111	; 0x6f
 8005d3a:	9242      	str	r2, [sp, #264]	; 0x108
 8005d3c:	bf34      	ite	cc
 8005d3e:	2303      	movcc	r3, #3
 8005d40:	2304      	movcs	r3, #4
 8005d42:	9347      	str	r3, [sp, #284]	; 0x11c
 8005d44:	6863      	ldr	r3, [r4, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	dd42      	ble.n	8005dd0 <__ssvfiscanf_r+0x268>
 8005d4a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005d4c:	0659      	lsls	r1, r3, #25
 8005d4e:	d404      	bmi.n	8005d5a <__ssvfiscanf_r+0x1f2>
 8005d50:	6823      	ldr	r3, [r4, #0]
 8005d52:	781a      	ldrb	r2, [r3, #0]
 8005d54:	5cba      	ldrb	r2, [r7, r2]
 8005d56:	0712      	lsls	r2, r2, #28
 8005d58:	d441      	bmi.n	8005dde <__ssvfiscanf_r+0x276>
 8005d5a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	dc50      	bgt.n	8005e02 <__ssvfiscanf_r+0x29a>
 8005d60:	466b      	mov	r3, sp
 8005d62:	4622      	mov	r2, r4
 8005d64:	a941      	add	r1, sp, #260	; 0x104
 8005d66:	4630      	mov	r0, r6
 8005d68:	f000 f876 	bl	8005e58 <_scanf_chars>
 8005d6c:	2801      	cmp	r0, #1
 8005d6e:	d06e      	beq.n	8005e4e <__ssvfiscanf_r+0x2e6>
 8005d70:	2802      	cmp	r0, #2
 8005d72:	f47f af20 	bne.w	8005bb6 <__ssvfiscanf_r+0x4e>
 8005d76:	e7cf      	b.n	8005d18 <__ssvfiscanf_r+0x1b0>
 8005d78:	220a      	movs	r2, #10
 8005d7a:	e7dd      	b.n	8005d38 <__ssvfiscanf_r+0x1d0>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	9342      	str	r3, [sp, #264]	; 0x108
 8005d80:	2303      	movs	r3, #3
 8005d82:	e7de      	b.n	8005d42 <__ssvfiscanf_r+0x1da>
 8005d84:	2308      	movs	r3, #8
 8005d86:	9342      	str	r3, [sp, #264]	; 0x108
 8005d88:	2304      	movs	r3, #4
 8005d8a:	e7da      	b.n	8005d42 <__ssvfiscanf_r+0x1da>
 8005d8c:	4629      	mov	r1, r5
 8005d8e:	4640      	mov	r0, r8
 8005d90:	f000 f9b4 	bl	80060fc <__sccl>
 8005d94:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005d96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d9a:	9341      	str	r3, [sp, #260]	; 0x104
 8005d9c:	4605      	mov	r5, r0
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e7cf      	b.n	8005d42 <__ssvfiscanf_r+0x1da>
 8005da2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005da8:	9341      	str	r3, [sp, #260]	; 0x104
 8005daa:	2300      	movs	r3, #0
 8005dac:	e7c9      	b.n	8005d42 <__ssvfiscanf_r+0x1da>
 8005dae:	2302      	movs	r3, #2
 8005db0:	e7c7      	b.n	8005d42 <__ssvfiscanf_r+0x1da>
 8005db2:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005db4:	06c3      	lsls	r3, r0, #27
 8005db6:	f53f aefe 	bmi.w	8005bb6 <__ssvfiscanf_r+0x4e>
 8005dba:	9b00      	ldr	r3, [sp, #0]
 8005dbc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005dbe:	1d19      	adds	r1, r3, #4
 8005dc0:	9100      	str	r1, [sp, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f010 0f01 	tst.w	r0, #1
 8005dc8:	bf14      	ite	ne
 8005dca:	801a      	strhne	r2, [r3, #0]
 8005dcc:	601a      	streq	r2, [r3, #0]
 8005dce:	e6f2      	b.n	8005bb6 <__ssvfiscanf_r+0x4e>
 8005dd0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	4630      	mov	r0, r6
 8005dd6:	4798      	blx	r3
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	d0b6      	beq.n	8005d4a <__ssvfiscanf_r+0x1e2>
 8005ddc:	e79c      	b.n	8005d18 <__ssvfiscanf_r+0x1b0>
 8005dde:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005de0:	3201      	adds	r2, #1
 8005de2:	9245      	str	r2, [sp, #276]	; 0x114
 8005de4:	6862      	ldr	r2, [r4, #4]
 8005de6:	3a01      	subs	r2, #1
 8005de8:	2a00      	cmp	r2, #0
 8005dea:	6062      	str	r2, [r4, #4]
 8005dec:	dd02      	ble.n	8005df4 <__ssvfiscanf_r+0x28c>
 8005dee:	3301      	adds	r3, #1
 8005df0:	6023      	str	r3, [r4, #0]
 8005df2:	e7ad      	b.n	8005d50 <__ssvfiscanf_r+0x1e8>
 8005df4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005df6:	4621      	mov	r1, r4
 8005df8:	4630      	mov	r0, r6
 8005dfa:	4798      	blx	r3
 8005dfc:	2800      	cmp	r0, #0
 8005dfe:	d0a7      	beq.n	8005d50 <__ssvfiscanf_r+0x1e8>
 8005e00:	e78a      	b.n	8005d18 <__ssvfiscanf_r+0x1b0>
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	dc0e      	bgt.n	8005e24 <__ssvfiscanf_r+0x2bc>
 8005e06:	466b      	mov	r3, sp
 8005e08:	4622      	mov	r2, r4
 8005e0a:	a941      	add	r1, sp, #260	; 0x104
 8005e0c:	4630      	mov	r0, r6
 8005e0e:	f000 f87d 	bl	8005f0c <_scanf_i>
 8005e12:	e7ab      	b.n	8005d6c <__ssvfiscanf_r+0x204>
 8005e14:	08005ab5 	.word	0x08005ab5
 8005e18:	08005b2f 	.word	0x08005b2f
 8005e1c:	080066c1 	.word	0x080066c1
 8005e20:	080067c1 	.word	0x080067c1
 8005e24:	4b0b      	ldr	r3, [pc, #44]	; (8005e54 <__ssvfiscanf_r+0x2ec>)
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f43f aec5 	beq.w	8005bb6 <__ssvfiscanf_r+0x4e>
 8005e2c:	466b      	mov	r3, sp
 8005e2e:	4622      	mov	r2, r4
 8005e30:	a941      	add	r1, sp, #260	; 0x104
 8005e32:	4630      	mov	r0, r6
 8005e34:	f3af 8000 	nop.w
 8005e38:	e798      	b.n	8005d6c <__ssvfiscanf_r+0x204>
 8005e3a:	89a3      	ldrh	r3, [r4, #12]
 8005e3c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005e40:	bf18      	it	ne
 8005e42:	f04f 30ff 	movne.w	r0, #4294967295
 8005e46:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8005e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e4e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005e50:	e7f9      	b.n	8005e46 <__ssvfiscanf_r+0x2de>
 8005e52:	bf00      	nop
 8005e54:	00000000 	.word	0x00000000

08005e58 <_scanf_chars>:
 8005e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e5c:	4615      	mov	r5, r2
 8005e5e:	688a      	ldr	r2, [r1, #8]
 8005e60:	4680      	mov	r8, r0
 8005e62:	460c      	mov	r4, r1
 8005e64:	b932      	cbnz	r2, 8005e74 <_scanf_chars+0x1c>
 8005e66:	698a      	ldr	r2, [r1, #24]
 8005e68:	2a00      	cmp	r2, #0
 8005e6a:	bf0c      	ite	eq
 8005e6c:	2201      	moveq	r2, #1
 8005e6e:	f04f 32ff 	movne.w	r2, #4294967295
 8005e72:	608a      	str	r2, [r1, #8]
 8005e74:	6822      	ldr	r2, [r4, #0]
 8005e76:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8005f08 <_scanf_chars+0xb0>
 8005e7a:	06d1      	lsls	r1, r2, #27
 8005e7c:	bf5f      	itttt	pl
 8005e7e:	681a      	ldrpl	r2, [r3, #0]
 8005e80:	1d11      	addpl	r1, r2, #4
 8005e82:	6019      	strpl	r1, [r3, #0]
 8005e84:	6816      	ldrpl	r6, [r2, #0]
 8005e86:	2700      	movs	r7, #0
 8005e88:	69a0      	ldr	r0, [r4, #24]
 8005e8a:	b188      	cbz	r0, 8005eb0 <_scanf_chars+0x58>
 8005e8c:	2801      	cmp	r0, #1
 8005e8e:	d107      	bne.n	8005ea0 <_scanf_chars+0x48>
 8005e90:	682a      	ldr	r2, [r5, #0]
 8005e92:	7811      	ldrb	r1, [r2, #0]
 8005e94:	6962      	ldr	r2, [r4, #20]
 8005e96:	5c52      	ldrb	r2, [r2, r1]
 8005e98:	b952      	cbnz	r2, 8005eb0 <_scanf_chars+0x58>
 8005e9a:	2f00      	cmp	r7, #0
 8005e9c:	d031      	beq.n	8005f02 <_scanf_chars+0xaa>
 8005e9e:	e022      	b.n	8005ee6 <_scanf_chars+0x8e>
 8005ea0:	2802      	cmp	r0, #2
 8005ea2:	d120      	bne.n	8005ee6 <_scanf_chars+0x8e>
 8005ea4:	682b      	ldr	r3, [r5, #0]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	f813 3009 	ldrb.w	r3, [r3, r9]
 8005eac:	071b      	lsls	r3, r3, #28
 8005eae:	d41a      	bmi.n	8005ee6 <_scanf_chars+0x8e>
 8005eb0:	6823      	ldr	r3, [r4, #0]
 8005eb2:	06da      	lsls	r2, r3, #27
 8005eb4:	bf5e      	ittt	pl
 8005eb6:	682b      	ldrpl	r3, [r5, #0]
 8005eb8:	781b      	ldrbpl	r3, [r3, #0]
 8005eba:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005ebe:	682a      	ldr	r2, [r5, #0]
 8005ec0:	686b      	ldr	r3, [r5, #4]
 8005ec2:	3201      	adds	r2, #1
 8005ec4:	602a      	str	r2, [r5, #0]
 8005ec6:	68a2      	ldr	r2, [r4, #8]
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	3a01      	subs	r2, #1
 8005ecc:	606b      	str	r3, [r5, #4]
 8005ece:	3701      	adds	r7, #1
 8005ed0:	60a2      	str	r2, [r4, #8]
 8005ed2:	b142      	cbz	r2, 8005ee6 <_scanf_chars+0x8e>
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	dcd7      	bgt.n	8005e88 <_scanf_chars+0x30>
 8005ed8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005edc:	4629      	mov	r1, r5
 8005ede:	4640      	mov	r0, r8
 8005ee0:	4798      	blx	r3
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	d0d0      	beq.n	8005e88 <_scanf_chars+0x30>
 8005ee6:	6823      	ldr	r3, [r4, #0]
 8005ee8:	f013 0310 	ands.w	r3, r3, #16
 8005eec:	d105      	bne.n	8005efa <_scanf_chars+0xa2>
 8005eee:	68e2      	ldr	r2, [r4, #12]
 8005ef0:	3201      	adds	r2, #1
 8005ef2:	60e2      	str	r2, [r4, #12]
 8005ef4:	69a2      	ldr	r2, [r4, #24]
 8005ef6:	b102      	cbz	r2, 8005efa <_scanf_chars+0xa2>
 8005ef8:	7033      	strb	r3, [r6, #0]
 8005efa:	6923      	ldr	r3, [r4, #16]
 8005efc:	443b      	add	r3, r7
 8005efe:	6123      	str	r3, [r4, #16]
 8005f00:	2000      	movs	r0, #0
 8005f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f06:	bf00      	nop
 8005f08:	080066c1 	.word	0x080066c1

08005f0c <_scanf_i>:
 8005f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f10:	4698      	mov	r8, r3
 8005f12:	4b76      	ldr	r3, [pc, #472]	; (80060ec <_scanf_i+0x1e0>)
 8005f14:	460c      	mov	r4, r1
 8005f16:	4682      	mov	sl, r0
 8005f18:	4616      	mov	r6, r2
 8005f1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005f1e:	b087      	sub	sp, #28
 8005f20:	ab03      	add	r3, sp, #12
 8005f22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005f26:	4b72      	ldr	r3, [pc, #456]	; (80060f0 <_scanf_i+0x1e4>)
 8005f28:	69a1      	ldr	r1, [r4, #24]
 8005f2a:	4a72      	ldr	r2, [pc, #456]	; (80060f4 <_scanf_i+0x1e8>)
 8005f2c:	2903      	cmp	r1, #3
 8005f2e:	bf18      	it	ne
 8005f30:	461a      	movne	r2, r3
 8005f32:	68a3      	ldr	r3, [r4, #8]
 8005f34:	9201      	str	r2, [sp, #4]
 8005f36:	1e5a      	subs	r2, r3, #1
 8005f38:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005f3c:	bf88      	it	hi
 8005f3e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005f42:	4627      	mov	r7, r4
 8005f44:	bf82      	ittt	hi
 8005f46:	eb03 0905 	addhi.w	r9, r3, r5
 8005f4a:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005f4e:	60a3      	strhi	r3, [r4, #8]
 8005f50:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005f54:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005f58:	bf98      	it	ls
 8005f5a:	f04f 0900 	movls.w	r9, #0
 8005f5e:	6023      	str	r3, [r4, #0]
 8005f60:	463d      	mov	r5, r7
 8005f62:	f04f 0b00 	mov.w	fp, #0
 8005f66:	6831      	ldr	r1, [r6, #0]
 8005f68:	ab03      	add	r3, sp, #12
 8005f6a:	7809      	ldrb	r1, [r1, #0]
 8005f6c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005f70:	2202      	movs	r2, #2
 8005f72:	f7fa f93d 	bl	80001f0 <memchr>
 8005f76:	b328      	cbz	r0, 8005fc4 <_scanf_i+0xb8>
 8005f78:	f1bb 0f01 	cmp.w	fp, #1
 8005f7c:	d159      	bne.n	8006032 <_scanf_i+0x126>
 8005f7e:	6862      	ldr	r2, [r4, #4]
 8005f80:	b92a      	cbnz	r2, 8005f8e <_scanf_i+0x82>
 8005f82:	6822      	ldr	r2, [r4, #0]
 8005f84:	2308      	movs	r3, #8
 8005f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f8a:	6063      	str	r3, [r4, #4]
 8005f8c:	6022      	str	r2, [r4, #0]
 8005f8e:	6822      	ldr	r2, [r4, #0]
 8005f90:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005f94:	6022      	str	r2, [r4, #0]
 8005f96:	68a2      	ldr	r2, [r4, #8]
 8005f98:	1e51      	subs	r1, r2, #1
 8005f9a:	60a1      	str	r1, [r4, #8]
 8005f9c:	b192      	cbz	r2, 8005fc4 <_scanf_i+0xb8>
 8005f9e:	6832      	ldr	r2, [r6, #0]
 8005fa0:	1c51      	adds	r1, r2, #1
 8005fa2:	6031      	str	r1, [r6, #0]
 8005fa4:	7812      	ldrb	r2, [r2, #0]
 8005fa6:	f805 2b01 	strb.w	r2, [r5], #1
 8005faa:	6872      	ldr	r2, [r6, #4]
 8005fac:	3a01      	subs	r2, #1
 8005fae:	2a00      	cmp	r2, #0
 8005fb0:	6072      	str	r2, [r6, #4]
 8005fb2:	dc07      	bgt.n	8005fc4 <_scanf_i+0xb8>
 8005fb4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8005fb8:	4631      	mov	r1, r6
 8005fba:	4650      	mov	r0, sl
 8005fbc:	4790      	blx	r2
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	f040 8085 	bne.w	80060ce <_scanf_i+0x1c2>
 8005fc4:	f10b 0b01 	add.w	fp, fp, #1
 8005fc8:	f1bb 0f03 	cmp.w	fp, #3
 8005fcc:	d1cb      	bne.n	8005f66 <_scanf_i+0x5a>
 8005fce:	6863      	ldr	r3, [r4, #4]
 8005fd0:	b90b      	cbnz	r3, 8005fd6 <_scanf_i+0xca>
 8005fd2:	230a      	movs	r3, #10
 8005fd4:	6063      	str	r3, [r4, #4]
 8005fd6:	6863      	ldr	r3, [r4, #4]
 8005fd8:	4947      	ldr	r1, [pc, #284]	; (80060f8 <_scanf_i+0x1ec>)
 8005fda:	6960      	ldr	r0, [r4, #20]
 8005fdc:	1ac9      	subs	r1, r1, r3
 8005fde:	f000 f88d 	bl	80060fc <__sccl>
 8005fe2:	f04f 0b00 	mov.w	fp, #0
 8005fe6:	68a3      	ldr	r3, [r4, #8]
 8005fe8:	6822      	ldr	r2, [r4, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d03d      	beq.n	800606a <_scanf_i+0x15e>
 8005fee:	6831      	ldr	r1, [r6, #0]
 8005ff0:	6960      	ldr	r0, [r4, #20]
 8005ff2:	f891 c000 	ldrb.w	ip, [r1]
 8005ff6:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005ffa:	2800      	cmp	r0, #0
 8005ffc:	d035      	beq.n	800606a <_scanf_i+0x15e>
 8005ffe:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8006002:	d124      	bne.n	800604e <_scanf_i+0x142>
 8006004:	0510      	lsls	r0, r2, #20
 8006006:	d522      	bpl.n	800604e <_scanf_i+0x142>
 8006008:	f10b 0b01 	add.w	fp, fp, #1
 800600c:	f1b9 0f00 	cmp.w	r9, #0
 8006010:	d003      	beq.n	800601a <_scanf_i+0x10e>
 8006012:	3301      	adds	r3, #1
 8006014:	f109 39ff 	add.w	r9, r9, #4294967295
 8006018:	60a3      	str	r3, [r4, #8]
 800601a:	6873      	ldr	r3, [r6, #4]
 800601c:	3b01      	subs	r3, #1
 800601e:	2b00      	cmp	r3, #0
 8006020:	6073      	str	r3, [r6, #4]
 8006022:	dd1b      	ble.n	800605c <_scanf_i+0x150>
 8006024:	6833      	ldr	r3, [r6, #0]
 8006026:	3301      	adds	r3, #1
 8006028:	6033      	str	r3, [r6, #0]
 800602a:	68a3      	ldr	r3, [r4, #8]
 800602c:	3b01      	subs	r3, #1
 800602e:	60a3      	str	r3, [r4, #8]
 8006030:	e7d9      	b.n	8005fe6 <_scanf_i+0xda>
 8006032:	f1bb 0f02 	cmp.w	fp, #2
 8006036:	d1ae      	bne.n	8005f96 <_scanf_i+0x8a>
 8006038:	6822      	ldr	r2, [r4, #0]
 800603a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800603e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006042:	d1bf      	bne.n	8005fc4 <_scanf_i+0xb8>
 8006044:	2310      	movs	r3, #16
 8006046:	6063      	str	r3, [r4, #4]
 8006048:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800604c:	e7a2      	b.n	8005f94 <_scanf_i+0x88>
 800604e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006052:	6022      	str	r2, [r4, #0]
 8006054:	780b      	ldrb	r3, [r1, #0]
 8006056:	f805 3b01 	strb.w	r3, [r5], #1
 800605a:	e7de      	b.n	800601a <_scanf_i+0x10e>
 800605c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006060:	4631      	mov	r1, r6
 8006062:	4650      	mov	r0, sl
 8006064:	4798      	blx	r3
 8006066:	2800      	cmp	r0, #0
 8006068:	d0df      	beq.n	800602a <_scanf_i+0x11e>
 800606a:	6823      	ldr	r3, [r4, #0]
 800606c:	05db      	lsls	r3, r3, #23
 800606e:	d50d      	bpl.n	800608c <_scanf_i+0x180>
 8006070:	42bd      	cmp	r5, r7
 8006072:	d909      	bls.n	8006088 <_scanf_i+0x17c>
 8006074:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006078:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800607c:	4632      	mov	r2, r6
 800607e:	4650      	mov	r0, sl
 8006080:	4798      	blx	r3
 8006082:	f105 39ff 	add.w	r9, r5, #4294967295
 8006086:	464d      	mov	r5, r9
 8006088:	42bd      	cmp	r5, r7
 800608a:	d02d      	beq.n	80060e8 <_scanf_i+0x1dc>
 800608c:	6822      	ldr	r2, [r4, #0]
 800608e:	f012 0210 	ands.w	r2, r2, #16
 8006092:	d113      	bne.n	80060bc <_scanf_i+0x1b0>
 8006094:	702a      	strb	r2, [r5, #0]
 8006096:	6863      	ldr	r3, [r4, #4]
 8006098:	9e01      	ldr	r6, [sp, #4]
 800609a:	4639      	mov	r1, r7
 800609c:	4650      	mov	r0, sl
 800609e:	47b0      	blx	r6
 80060a0:	6821      	ldr	r1, [r4, #0]
 80060a2:	f8d8 3000 	ldr.w	r3, [r8]
 80060a6:	f011 0f20 	tst.w	r1, #32
 80060aa:	d013      	beq.n	80060d4 <_scanf_i+0x1c8>
 80060ac:	1d1a      	adds	r2, r3, #4
 80060ae:	f8c8 2000 	str.w	r2, [r8]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6018      	str	r0, [r3, #0]
 80060b6:	68e3      	ldr	r3, [r4, #12]
 80060b8:	3301      	adds	r3, #1
 80060ba:	60e3      	str	r3, [r4, #12]
 80060bc:	1bed      	subs	r5, r5, r7
 80060be:	44ab      	add	fp, r5
 80060c0:	6925      	ldr	r5, [r4, #16]
 80060c2:	445d      	add	r5, fp
 80060c4:	6125      	str	r5, [r4, #16]
 80060c6:	2000      	movs	r0, #0
 80060c8:	b007      	add	sp, #28
 80060ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ce:	f04f 0b00 	mov.w	fp, #0
 80060d2:	e7ca      	b.n	800606a <_scanf_i+0x15e>
 80060d4:	1d1a      	adds	r2, r3, #4
 80060d6:	f8c8 2000 	str.w	r2, [r8]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f011 0f01 	tst.w	r1, #1
 80060e0:	bf14      	ite	ne
 80060e2:	8018      	strhne	r0, [r3, #0]
 80060e4:	6018      	streq	r0, [r3, #0]
 80060e6:	e7e6      	b.n	80060b6 <_scanf_i+0x1aa>
 80060e8:	2001      	movs	r0, #1
 80060ea:	e7ed      	b.n	80060c8 <_scanf_i+0x1bc>
 80060ec:	0800669c 	.word	0x0800669c
 80060f0:	08006359 	.word	0x08006359
 80060f4:	08006271 	.word	0x08006271
 80060f8:	080067de 	.word	0x080067de

080060fc <__sccl>:
 80060fc:	b570      	push	{r4, r5, r6, lr}
 80060fe:	780b      	ldrb	r3, [r1, #0]
 8006100:	4604      	mov	r4, r0
 8006102:	2b5e      	cmp	r3, #94	; 0x5e
 8006104:	bf0b      	itete	eq
 8006106:	784b      	ldrbeq	r3, [r1, #1]
 8006108:	1c48      	addne	r0, r1, #1
 800610a:	1c88      	addeq	r0, r1, #2
 800610c:	2200      	movne	r2, #0
 800610e:	bf08      	it	eq
 8006110:	2201      	moveq	r2, #1
 8006112:	1e61      	subs	r1, r4, #1
 8006114:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8006118:	f801 2f01 	strb.w	r2, [r1, #1]!
 800611c:	42a9      	cmp	r1, r5
 800611e:	d1fb      	bne.n	8006118 <__sccl+0x1c>
 8006120:	b90b      	cbnz	r3, 8006126 <__sccl+0x2a>
 8006122:	3801      	subs	r0, #1
 8006124:	bd70      	pop	{r4, r5, r6, pc}
 8006126:	f082 0201 	eor.w	r2, r2, #1
 800612a:	54e2      	strb	r2, [r4, r3]
 800612c:	4605      	mov	r5, r0
 800612e:	4628      	mov	r0, r5
 8006130:	f810 1b01 	ldrb.w	r1, [r0], #1
 8006134:	292d      	cmp	r1, #45	; 0x2d
 8006136:	d006      	beq.n	8006146 <__sccl+0x4a>
 8006138:	295d      	cmp	r1, #93	; 0x5d
 800613a:	d0f3      	beq.n	8006124 <__sccl+0x28>
 800613c:	b909      	cbnz	r1, 8006142 <__sccl+0x46>
 800613e:	4628      	mov	r0, r5
 8006140:	e7f0      	b.n	8006124 <__sccl+0x28>
 8006142:	460b      	mov	r3, r1
 8006144:	e7f1      	b.n	800612a <__sccl+0x2e>
 8006146:	786e      	ldrb	r6, [r5, #1]
 8006148:	2e5d      	cmp	r6, #93	; 0x5d
 800614a:	d0fa      	beq.n	8006142 <__sccl+0x46>
 800614c:	42b3      	cmp	r3, r6
 800614e:	dcf8      	bgt.n	8006142 <__sccl+0x46>
 8006150:	3502      	adds	r5, #2
 8006152:	4619      	mov	r1, r3
 8006154:	3101      	adds	r1, #1
 8006156:	428e      	cmp	r6, r1
 8006158:	5462      	strb	r2, [r4, r1]
 800615a:	dcfb      	bgt.n	8006154 <__sccl+0x58>
 800615c:	1af1      	subs	r1, r6, r3
 800615e:	3901      	subs	r1, #1
 8006160:	1c58      	adds	r0, r3, #1
 8006162:	42b3      	cmp	r3, r6
 8006164:	bfa8      	it	ge
 8006166:	2100      	movge	r1, #0
 8006168:	1843      	adds	r3, r0, r1
 800616a:	e7e0      	b.n	800612e <__sccl+0x32>

0800616c <_strtol_l.constprop.0>:
 800616c:	2b01      	cmp	r3, #1
 800616e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006172:	d001      	beq.n	8006178 <_strtol_l.constprop.0+0xc>
 8006174:	2b24      	cmp	r3, #36	; 0x24
 8006176:	d906      	bls.n	8006186 <_strtol_l.constprop.0+0x1a>
 8006178:	f7ff fc3c 	bl	80059f4 <__errno>
 800617c:	2316      	movs	r3, #22
 800617e:	6003      	str	r3, [r0, #0]
 8006180:	2000      	movs	r0, #0
 8006182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006186:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800626c <_strtol_l.constprop.0+0x100>
 800618a:	460d      	mov	r5, r1
 800618c:	462e      	mov	r6, r5
 800618e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006192:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006196:	f017 0708 	ands.w	r7, r7, #8
 800619a:	d1f7      	bne.n	800618c <_strtol_l.constprop.0+0x20>
 800619c:	2c2d      	cmp	r4, #45	; 0x2d
 800619e:	d132      	bne.n	8006206 <_strtol_l.constprop.0+0x9a>
 80061a0:	782c      	ldrb	r4, [r5, #0]
 80061a2:	2701      	movs	r7, #1
 80061a4:	1cb5      	adds	r5, r6, #2
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d05b      	beq.n	8006262 <_strtol_l.constprop.0+0xf6>
 80061aa:	2b10      	cmp	r3, #16
 80061ac:	d109      	bne.n	80061c2 <_strtol_l.constprop.0+0x56>
 80061ae:	2c30      	cmp	r4, #48	; 0x30
 80061b0:	d107      	bne.n	80061c2 <_strtol_l.constprop.0+0x56>
 80061b2:	782c      	ldrb	r4, [r5, #0]
 80061b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80061b8:	2c58      	cmp	r4, #88	; 0x58
 80061ba:	d14d      	bne.n	8006258 <_strtol_l.constprop.0+0xec>
 80061bc:	786c      	ldrb	r4, [r5, #1]
 80061be:	2310      	movs	r3, #16
 80061c0:	3502      	adds	r5, #2
 80061c2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80061c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80061ca:	f04f 0c00 	mov.w	ip, #0
 80061ce:	fbb8 f9f3 	udiv	r9, r8, r3
 80061d2:	4666      	mov	r6, ip
 80061d4:	fb03 8a19 	mls	sl, r3, r9, r8
 80061d8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80061dc:	f1be 0f09 	cmp.w	lr, #9
 80061e0:	d816      	bhi.n	8006210 <_strtol_l.constprop.0+0xa4>
 80061e2:	4674      	mov	r4, lr
 80061e4:	42a3      	cmp	r3, r4
 80061e6:	dd24      	ble.n	8006232 <_strtol_l.constprop.0+0xc6>
 80061e8:	f1bc 0f00 	cmp.w	ip, #0
 80061ec:	db1e      	blt.n	800622c <_strtol_l.constprop.0+0xc0>
 80061ee:	45b1      	cmp	r9, r6
 80061f0:	d31c      	bcc.n	800622c <_strtol_l.constprop.0+0xc0>
 80061f2:	d101      	bne.n	80061f8 <_strtol_l.constprop.0+0x8c>
 80061f4:	45a2      	cmp	sl, r4
 80061f6:	db19      	blt.n	800622c <_strtol_l.constprop.0+0xc0>
 80061f8:	fb06 4603 	mla	r6, r6, r3, r4
 80061fc:	f04f 0c01 	mov.w	ip, #1
 8006200:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006204:	e7e8      	b.n	80061d8 <_strtol_l.constprop.0+0x6c>
 8006206:	2c2b      	cmp	r4, #43	; 0x2b
 8006208:	bf04      	itt	eq
 800620a:	782c      	ldrbeq	r4, [r5, #0]
 800620c:	1cb5      	addeq	r5, r6, #2
 800620e:	e7ca      	b.n	80061a6 <_strtol_l.constprop.0+0x3a>
 8006210:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006214:	f1be 0f19 	cmp.w	lr, #25
 8006218:	d801      	bhi.n	800621e <_strtol_l.constprop.0+0xb2>
 800621a:	3c37      	subs	r4, #55	; 0x37
 800621c:	e7e2      	b.n	80061e4 <_strtol_l.constprop.0+0x78>
 800621e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006222:	f1be 0f19 	cmp.w	lr, #25
 8006226:	d804      	bhi.n	8006232 <_strtol_l.constprop.0+0xc6>
 8006228:	3c57      	subs	r4, #87	; 0x57
 800622a:	e7db      	b.n	80061e4 <_strtol_l.constprop.0+0x78>
 800622c:	f04f 3cff 	mov.w	ip, #4294967295
 8006230:	e7e6      	b.n	8006200 <_strtol_l.constprop.0+0x94>
 8006232:	f1bc 0f00 	cmp.w	ip, #0
 8006236:	da05      	bge.n	8006244 <_strtol_l.constprop.0+0xd8>
 8006238:	2322      	movs	r3, #34	; 0x22
 800623a:	6003      	str	r3, [r0, #0]
 800623c:	4646      	mov	r6, r8
 800623e:	b942      	cbnz	r2, 8006252 <_strtol_l.constprop.0+0xe6>
 8006240:	4630      	mov	r0, r6
 8006242:	e79e      	b.n	8006182 <_strtol_l.constprop.0+0x16>
 8006244:	b107      	cbz	r7, 8006248 <_strtol_l.constprop.0+0xdc>
 8006246:	4276      	negs	r6, r6
 8006248:	2a00      	cmp	r2, #0
 800624a:	d0f9      	beq.n	8006240 <_strtol_l.constprop.0+0xd4>
 800624c:	f1bc 0f00 	cmp.w	ip, #0
 8006250:	d000      	beq.n	8006254 <_strtol_l.constprop.0+0xe8>
 8006252:	1e69      	subs	r1, r5, #1
 8006254:	6011      	str	r1, [r2, #0]
 8006256:	e7f3      	b.n	8006240 <_strtol_l.constprop.0+0xd4>
 8006258:	2430      	movs	r4, #48	; 0x30
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1b1      	bne.n	80061c2 <_strtol_l.constprop.0+0x56>
 800625e:	2308      	movs	r3, #8
 8006260:	e7af      	b.n	80061c2 <_strtol_l.constprop.0+0x56>
 8006262:	2c30      	cmp	r4, #48	; 0x30
 8006264:	d0a5      	beq.n	80061b2 <_strtol_l.constprop.0+0x46>
 8006266:	230a      	movs	r3, #10
 8006268:	e7ab      	b.n	80061c2 <_strtol_l.constprop.0+0x56>
 800626a:	bf00      	nop
 800626c:	080066c1 	.word	0x080066c1

08006270 <_strtol_r>:
 8006270:	f7ff bf7c 	b.w	800616c <_strtol_l.constprop.0>

08006274 <_strtoul_l.constprop.0>:
 8006274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006278:	4f36      	ldr	r7, [pc, #216]	; (8006354 <_strtoul_l.constprop.0+0xe0>)
 800627a:	4686      	mov	lr, r0
 800627c:	460d      	mov	r5, r1
 800627e:	4628      	mov	r0, r5
 8006280:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006284:	5de6      	ldrb	r6, [r4, r7]
 8006286:	f016 0608 	ands.w	r6, r6, #8
 800628a:	d1f8      	bne.n	800627e <_strtoul_l.constprop.0+0xa>
 800628c:	2c2d      	cmp	r4, #45	; 0x2d
 800628e:	d12f      	bne.n	80062f0 <_strtoul_l.constprop.0+0x7c>
 8006290:	782c      	ldrb	r4, [r5, #0]
 8006292:	2601      	movs	r6, #1
 8006294:	1c85      	adds	r5, r0, #2
 8006296:	2b00      	cmp	r3, #0
 8006298:	d057      	beq.n	800634a <_strtoul_l.constprop.0+0xd6>
 800629a:	2b10      	cmp	r3, #16
 800629c:	d109      	bne.n	80062b2 <_strtoul_l.constprop.0+0x3e>
 800629e:	2c30      	cmp	r4, #48	; 0x30
 80062a0:	d107      	bne.n	80062b2 <_strtoul_l.constprop.0+0x3e>
 80062a2:	7828      	ldrb	r0, [r5, #0]
 80062a4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80062a8:	2858      	cmp	r0, #88	; 0x58
 80062aa:	d149      	bne.n	8006340 <_strtoul_l.constprop.0+0xcc>
 80062ac:	786c      	ldrb	r4, [r5, #1]
 80062ae:	2310      	movs	r3, #16
 80062b0:	3502      	adds	r5, #2
 80062b2:	f04f 38ff 	mov.w	r8, #4294967295
 80062b6:	2700      	movs	r7, #0
 80062b8:	fbb8 f8f3 	udiv	r8, r8, r3
 80062bc:	fb03 f908 	mul.w	r9, r3, r8
 80062c0:	ea6f 0909 	mvn.w	r9, r9
 80062c4:	4638      	mov	r0, r7
 80062c6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80062ca:	f1bc 0f09 	cmp.w	ip, #9
 80062ce:	d814      	bhi.n	80062fa <_strtoul_l.constprop.0+0x86>
 80062d0:	4664      	mov	r4, ip
 80062d2:	42a3      	cmp	r3, r4
 80062d4:	dd22      	ble.n	800631c <_strtoul_l.constprop.0+0xa8>
 80062d6:	2f00      	cmp	r7, #0
 80062d8:	db1d      	blt.n	8006316 <_strtoul_l.constprop.0+0xa2>
 80062da:	4580      	cmp	r8, r0
 80062dc:	d31b      	bcc.n	8006316 <_strtoul_l.constprop.0+0xa2>
 80062de:	d101      	bne.n	80062e4 <_strtoul_l.constprop.0+0x70>
 80062e0:	45a1      	cmp	r9, r4
 80062e2:	db18      	blt.n	8006316 <_strtoul_l.constprop.0+0xa2>
 80062e4:	fb00 4003 	mla	r0, r0, r3, r4
 80062e8:	2701      	movs	r7, #1
 80062ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80062ee:	e7ea      	b.n	80062c6 <_strtoul_l.constprop.0+0x52>
 80062f0:	2c2b      	cmp	r4, #43	; 0x2b
 80062f2:	bf04      	itt	eq
 80062f4:	782c      	ldrbeq	r4, [r5, #0]
 80062f6:	1c85      	addeq	r5, r0, #2
 80062f8:	e7cd      	b.n	8006296 <_strtoul_l.constprop.0+0x22>
 80062fa:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80062fe:	f1bc 0f19 	cmp.w	ip, #25
 8006302:	d801      	bhi.n	8006308 <_strtoul_l.constprop.0+0x94>
 8006304:	3c37      	subs	r4, #55	; 0x37
 8006306:	e7e4      	b.n	80062d2 <_strtoul_l.constprop.0+0x5e>
 8006308:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800630c:	f1bc 0f19 	cmp.w	ip, #25
 8006310:	d804      	bhi.n	800631c <_strtoul_l.constprop.0+0xa8>
 8006312:	3c57      	subs	r4, #87	; 0x57
 8006314:	e7dd      	b.n	80062d2 <_strtoul_l.constprop.0+0x5e>
 8006316:	f04f 37ff 	mov.w	r7, #4294967295
 800631a:	e7e6      	b.n	80062ea <_strtoul_l.constprop.0+0x76>
 800631c:	2f00      	cmp	r7, #0
 800631e:	da07      	bge.n	8006330 <_strtoul_l.constprop.0+0xbc>
 8006320:	2322      	movs	r3, #34	; 0x22
 8006322:	f8ce 3000 	str.w	r3, [lr]
 8006326:	f04f 30ff 	mov.w	r0, #4294967295
 800632a:	b932      	cbnz	r2, 800633a <_strtoul_l.constprop.0+0xc6>
 800632c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006330:	b106      	cbz	r6, 8006334 <_strtoul_l.constprop.0+0xc0>
 8006332:	4240      	negs	r0, r0
 8006334:	2a00      	cmp	r2, #0
 8006336:	d0f9      	beq.n	800632c <_strtoul_l.constprop.0+0xb8>
 8006338:	b107      	cbz	r7, 800633c <_strtoul_l.constprop.0+0xc8>
 800633a:	1e69      	subs	r1, r5, #1
 800633c:	6011      	str	r1, [r2, #0]
 800633e:	e7f5      	b.n	800632c <_strtoul_l.constprop.0+0xb8>
 8006340:	2430      	movs	r4, #48	; 0x30
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1b5      	bne.n	80062b2 <_strtoul_l.constprop.0+0x3e>
 8006346:	2308      	movs	r3, #8
 8006348:	e7b3      	b.n	80062b2 <_strtoul_l.constprop.0+0x3e>
 800634a:	2c30      	cmp	r4, #48	; 0x30
 800634c:	d0a9      	beq.n	80062a2 <_strtoul_l.constprop.0+0x2e>
 800634e:	230a      	movs	r3, #10
 8006350:	e7af      	b.n	80062b2 <_strtoul_l.constprop.0+0x3e>
 8006352:	bf00      	nop
 8006354:	080066c1 	.word	0x080066c1

08006358 <_strtoul_r>:
 8006358:	f7ff bf8c 	b.w	8006274 <_strtoul_l.constprop.0>

0800635c <__submore>:
 800635c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006360:	460c      	mov	r4, r1
 8006362:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006364:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006368:	4299      	cmp	r1, r3
 800636a:	d11d      	bne.n	80063a8 <__submore+0x4c>
 800636c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006370:	f000 f8aa 	bl	80064c8 <_malloc_r>
 8006374:	b918      	cbnz	r0, 800637e <__submore+0x22>
 8006376:	f04f 30ff 	mov.w	r0, #4294967295
 800637a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800637e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006382:	63a3      	str	r3, [r4, #56]	; 0x38
 8006384:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006388:	6360      	str	r0, [r4, #52]	; 0x34
 800638a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800638e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006392:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8006396:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800639a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800639e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80063a2:	6020      	str	r0, [r4, #0]
 80063a4:	2000      	movs	r0, #0
 80063a6:	e7e8      	b.n	800637a <__submore+0x1e>
 80063a8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80063aa:	0077      	lsls	r7, r6, #1
 80063ac:	463a      	mov	r2, r7
 80063ae:	f000 f8ff 	bl	80065b0 <_realloc_r>
 80063b2:	4605      	mov	r5, r0
 80063b4:	2800      	cmp	r0, #0
 80063b6:	d0de      	beq.n	8006376 <__submore+0x1a>
 80063b8:	eb00 0806 	add.w	r8, r0, r6
 80063bc:	4601      	mov	r1, r0
 80063be:	4632      	mov	r2, r6
 80063c0:	4640      	mov	r0, r8
 80063c2:	f000 f807 	bl	80063d4 <memcpy>
 80063c6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80063ca:	f8c4 8000 	str.w	r8, [r4]
 80063ce:	e7e9      	b.n	80063a4 <__submore+0x48>

080063d0 <__retarget_lock_acquire_recursive>:
 80063d0:	4770      	bx	lr

080063d2 <__retarget_lock_release_recursive>:
 80063d2:	4770      	bx	lr

080063d4 <memcpy>:
 80063d4:	440a      	add	r2, r1
 80063d6:	4291      	cmp	r1, r2
 80063d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80063dc:	d100      	bne.n	80063e0 <memcpy+0xc>
 80063de:	4770      	bx	lr
 80063e0:	b510      	push	{r4, lr}
 80063e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063ea:	4291      	cmp	r1, r2
 80063ec:	d1f9      	bne.n	80063e2 <memcpy+0xe>
 80063ee:	bd10      	pop	{r4, pc}

080063f0 <_free_r>:
 80063f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063f2:	2900      	cmp	r1, #0
 80063f4:	d044      	beq.n	8006480 <_free_r+0x90>
 80063f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063fa:	9001      	str	r0, [sp, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f1a1 0404 	sub.w	r4, r1, #4
 8006402:	bfb8      	it	lt
 8006404:	18e4      	addlt	r4, r4, r3
 8006406:	f000 f913 	bl	8006630 <__malloc_lock>
 800640a:	4a1e      	ldr	r2, [pc, #120]	; (8006484 <_free_r+0x94>)
 800640c:	9801      	ldr	r0, [sp, #4]
 800640e:	6813      	ldr	r3, [r2, #0]
 8006410:	b933      	cbnz	r3, 8006420 <_free_r+0x30>
 8006412:	6063      	str	r3, [r4, #4]
 8006414:	6014      	str	r4, [r2, #0]
 8006416:	b003      	add	sp, #12
 8006418:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800641c:	f000 b90e 	b.w	800663c <__malloc_unlock>
 8006420:	42a3      	cmp	r3, r4
 8006422:	d908      	bls.n	8006436 <_free_r+0x46>
 8006424:	6825      	ldr	r5, [r4, #0]
 8006426:	1961      	adds	r1, r4, r5
 8006428:	428b      	cmp	r3, r1
 800642a:	bf01      	itttt	eq
 800642c:	6819      	ldreq	r1, [r3, #0]
 800642e:	685b      	ldreq	r3, [r3, #4]
 8006430:	1949      	addeq	r1, r1, r5
 8006432:	6021      	streq	r1, [r4, #0]
 8006434:	e7ed      	b.n	8006412 <_free_r+0x22>
 8006436:	461a      	mov	r2, r3
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	b10b      	cbz	r3, 8006440 <_free_r+0x50>
 800643c:	42a3      	cmp	r3, r4
 800643e:	d9fa      	bls.n	8006436 <_free_r+0x46>
 8006440:	6811      	ldr	r1, [r2, #0]
 8006442:	1855      	adds	r5, r2, r1
 8006444:	42a5      	cmp	r5, r4
 8006446:	d10b      	bne.n	8006460 <_free_r+0x70>
 8006448:	6824      	ldr	r4, [r4, #0]
 800644a:	4421      	add	r1, r4
 800644c:	1854      	adds	r4, r2, r1
 800644e:	42a3      	cmp	r3, r4
 8006450:	6011      	str	r1, [r2, #0]
 8006452:	d1e0      	bne.n	8006416 <_free_r+0x26>
 8006454:	681c      	ldr	r4, [r3, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	6053      	str	r3, [r2, #4]
 800645a:	4421      	add	r1, r4
 800645c:	6011      	str	r1, [r2, #0]
 800645e:	e7da      	b.n	8006416 <_free_r+0x26>
 8006460:	d902      	bls.n	8006468 <_free_r+0x78>
 8006462:	230c      	movs	r3, #12
 8006464:	6003      	str	r3, [r0, #0]
 8006466:	e7d6      	b.n	8006416 <_free_r+0x26>
 8006468:	6825      	ldr	r5, [r4, #0]
 800646a:	1961      	adds	r1, r4, r5
 800646c:	428b      	cmp	r3, r1
 800646e:	bf04      	itt	eq
 8006470:	6819      	ldreq	r1, [r3, #0]
 8006472:	685b      	ldreq	r3, [r3, #4]
 8006474:	6063      	str	r3, [r4, #4]
 8006476:	bf04      	itt	eq
 8006478:	1949      	addeq	r1, r1, r5
 800647a:	6021      	streq	r1, [r4, #0]
 800647c:	6054      	str	r4, [r2, #4]
 800647e:	e7ca      	b.n	8006416 <_free_r+0x26>
 8006480:	b003      	add	sp, #12
 8006482:	bd30      	pop	{r4, r5, pc}
 8006484:	2000022c 	.word	0x2000022c

08006488 <sbrk_aligned>:
 8006488:	b570      	push	{r4, r5, r6, lr}
 800648a:	4e0e      	ldr	r6, [pc, #56]	; (80064c4 <sbrk_aligned+0x3c>)
 800648c:	460c      	mov	r4, r1
 800648e:	6831      	ldr	r1, [r6, #0]
 8006490:	4605      	mov	r5, r0
 8006492:	b911      	cbnz	r1, 800649a <sbrk_aligned+0x12>
 8006494:	f000 f8bc 	bl	8006610 <_sbrk_r>
 8006498:	6030      	str	r0, [r6, #0]
 800649a:	4621      	mov	r1, r4
 800649c:	4628      	mov	r0, r5
 800649e:	f000 f8b7 	bl	8006610 <_sbrk_r>
 80064a2:	1c43      	adds	r3, r0, #1
 80064a4:	d00a      	beq.n	80064bc <sbrk_aligned+0x34>
 80064a6:	1cc4      	adds	r4, r0, #3
 80064a8:	f024 0403 	bic.w	r4, r4, #3
 80064ac:	42a0      	cmp	r0, r4
 80064ae:	d007      	beq.n	80064c0 <sbrk_aligned+0x38>
 80064b0:	1a21      	subs	r1, r4, r0
 80064b2:	4628      	mov	r0, r5
 80064b4:	f000 f8ac 	bl	8006610 <_sbrk_r>
 80064b8:	3001      	adds	r0, #1
 80064ba:	d101      	bne.n	80064c0 <sbrk_aligned+0x38>
 80064bc:	f04f 34ff 	mov.w	r4, #4294967295
 80064c0:	4620      	mov	r0, r4
 80064c2:	bd70      	pop	{r4, r5, r6, pc}
 80064c4:	20000230 	.word	0x20000230

080064c8 <_malloc_r>:
 80064c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064cc:	1ccd      	adds	r5, r1, #3
 80064ce:	f025 0503 	bic.w	r5, r5, #3
 80064d2:	3508      	adds	r5, #8
 80064d4:	2d0c      	cmp	r5, #12
 80064d6:	bf38      	it	cc
 80064d8:	250c      	movcc	r5, #12
 80064da:	2d00      	cmp	r5, #0
 80064dc:	4607      	mov	r7, r0
 80064de:	db01      	blt.n	80064e4 <_malloc_r+0x1c>
 80064e0:	42a9      	cmp	r1, r5
 80064e2:	d905      	bls.n	80064f0 <_malloc_r+0x28>
 80064e4:	230c      	movs	r3, #12
 80064e6:	603b      	str	r3, [r7, #0]
 80064e8:	2600      	movs	r6, #0
 80064ea:	4630      	mov	r0, r6
 80064ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064f0:	4e2e      	ldr	r6, [pc, #184]	; (80065ac <_malloc_r+0xe4>)
 80064f2:	f000 f89d 	bl	8006630 <__malloc_lock>
 80064f6:	6833      	ldr	r3, [r6, #0]
 80064f8:	461c      	mov	r4, r3
 80064fa:	bb34      	cbnz	r4, 800654a <_malloc_r+0x82>
 80064fc:	4629      	mov	r1, r5
 80064fe:	4638      	mov	r0, r7
 8006500:	f7ff ffc2 	bl	8006488 <sbrk_aligned>
 8006504:	1c43      	adds	r3, r0, #1
 8006506:	4604      	mov	r4, r0
 8006508:	d14d      	bne.n	80065a6 <_malloc_r+0xde>
 800650a:	6834      	ldr	r4, [r6, #0]
 800650c:	4626      	mov	r6, r4
 800650e:	2e00      	cmp	r6, #0
 8006510:	d140      	bne.n	8006594 <_malloc_r+0xcc>
 8006512:	6823      	ldr	r3, [r4, #0]
 8006514:	4631      	mov	r1, r6
 8006516:	4638      	mov	r0, r7
 8006518:	eb04 0803 	add.w	r8, r4, r3
 800651c:	f000 f878 	bl	8006610 <_sbrk_r>
 8006520:	4580      	cmp	r8, r0
 8006522:	d13a      	bne.n	800659a <_malloc_r+0xd2>
 8006524:	6821      	ldr	r1, [r4, #0]
 8006526:	3503      	adds	r5, #3
 8006528:	1a6d      	subs	r5, r5, r1
 800652a:	f025 0503 	bic.w	r5, r5, #3
 800652e:	3508      	adds	r5, #8
 8006530:	2d0c      	cmp	r5, #12
 8006532:	bf38      	it	cc
 8006534:	250c      	movcc	r5, #12
 8006536:	4629      	mov	r1, r5
 8006538:	4638      	mov	r0, r7
 800653a:	f7ff ffa5 	bl	8006488 <sbrk_aligned>
 800653e:	3001      	adds	r0, #1
 8006540:	d02b      	beq.n	800659a <_malloc_r+0xd2>
 8006542:	6823      	ldr	r3, [r4, #0]
 8006544:	442b      	add	r3, r5
 8006546:	6023      	str	r3, [r4, #0]
 8006548:	e00e      	b.n	8006568 <_malloc_r+0xa0>
 800654a:	6822      	ldr	r2, [r4, #0]
 800654c:	1b52      	subs	r2, r2, r5
 800654e:	d41e      	bmi.n	800658e <_malloc_r+0xc6>
 8006550:	2a0b      	cmp	r2, #11
 8006552:	d916      	bls.n	8006582 <_malloc_r+0xba>
 8006554:	1961      	adds	r1, r4, r5
 8006556:	42a3      	cmp	r3, r4
 8006558:	6025      	str	r5, [r4, #0]
 800655a:	bf18      	it	ne
 800655c:	6059      	strne	r1, [r3, #4]
 800655e:	6863      	ldr	r3, [r4, #4]
 8006560:	bf08      	it	eq
 8006562:	6031      	streq	r1, [r6, #0]
 8006564:	5162      	str	r2, [r4, r5]
 8006566:	604b      	str	r3, [r1, #4]
 8006568:	4638      	mov	r0, r7
 800656a:	f104 060b 	add.w	r6, r4, #11
 800656e:	f000 f865 	bl	800663c <__malloc_unlock>
 8006572:	f026 0607 	bic.w	r6, r6, #7
 8006576:	1d23      	adds	r3, r4, #4
 8006578:	1af2      	subs	r2, r6, r3
 800657a:	d0b6      	beq.n	80064ea <_malloc_r+0x22>
 800657c:	1b9b      	subs	r3, r3, r6
 800657e:	50a3      	str	r3, [r4, r2]
 8006580:	e7b3      	b.n	80064ea <_malloc_r+0x22>
 8006582:	6862      	ldr	r2, [r4, #4]
 8006584:	42a3      	cmp	r3, r4
 8006586:	bf0c      	ite	eq
 8006588:	6032      	streq	r2, [r6, #0]
 800658a:	605a      	strne	r2, [r3, #4]
 800658c:	e7ec      	b.n	8006568 <_malloc_r+0xa0>
 800658e:	4623      	mov	r3, r4
 8006590:	6864      	ldr	r4, [r4, #4]
 8006592:	e7b2      	b.n	80064fa <_malloc_r+0x32>
 8006594:	4634      	mov	r4, r6
 8006596:	6876      	ldr	r6, [r6, #4]
 8006598:	e7b9      	b.n	800650e <_malloc_r+0x46>
 800659a:	230c      	movs	r3, #12
 800659c:	603b      	str	r3, [r7, #0]
 800659e:	4638      	mov	r0, r7
 80065a0:	f000 f84c 	bl	800663c <__malloc_unlock>
 80065a4:	e7a1      	b.n	80064ea <_malloc_r+0x22>
 80065a6:	6025      	str	r5, [r4, #0]
 80065a8:	e7de      	b.n	8006568 <_malloc_r+0xa0>
 80065aa:	bf00      	nop
 80065ac:	2000022c 	.word	0x2000022c

080065b0 <_realloc_r>:
 80065b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065b4:	4680      	mov	r8, r0
 80065b6:	4614      	mov	r4, r2
 80065b8:	460e      	mov	r6, r1
 80065ba:	b921      	cbnz	r1, 80065c6 <_realloc_r+0x16>
 80065bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065c0:	4611      	mov	r1, r2
 80065c2:	f7ff bf81 	b.w	80064c8 <_malloc_r>
 80065c6:	b92a      	cbnz	r2, 80065d4 <_realloc_r+0x24>
 80065c8:	f7ff ff12 	bl	80063f0 <_free_r>
 80065cc:	4625      	mov	r5, r4
 80065ce:	4628      	mov	r0, r5
 80065d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065d4:	f000 f838 	bl	8006648 <_malloc_usable_size_r>
 80065d8:	4284      	cmp	r4, r0
 80065da:	4607      	mov	r7, r0
 80065dc:	d802      	bhi.n	80065e4 <_realloc_r+0x34>
 80065de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80065e2:	d812      	bhi.n	800660a <_realloc_r+0x5a>
 80065e4:	4621      	mov	r1, r4
 80065e6:	4640      	mov	r0, r8
 80065e8:	f7ff ff6e 	bl	80064c8 <_malloc_r>
 80065ec:	4605      	mov	r5, r0
 80065ee:	2800      	cmp	r0, #0
 80065f0:	d0ed      	beq.n	80065ce <_realloc_r+0x1e>
 80065f2:	42bc      	cmp	r4, r7
 80065f4:	4622      	mov	r2, r4
 80065f6:	4631      	mov	r1, r6
 80065f8:	bf28      	it	cs
 80065fa:	463a      	movcs	r2, r7
 80065fc:	f7ff feea 	bl	80063d4 <memcpy>
 8006600:	4631      	mov	r1, r6
 8006602:	4640      	mov	r0, r8
 8006604:	f7ff fef4 	bl	80063f0 <_free_r>
 8006608:	e7e1      	b.n	80065ce <_realloc_r+0x1e>
 800660a:	4635      	mov	r5, r6
 800660c:	e7df      	b.n	80065ce <_realloc_r+0x1e>
	...

08006610 <_sbrk_r>:
 8006610:	b538      	push	{r3, r4, r5, lr}
 8006612:	4d06      	ldr	r5, [pc, #24]	; (800662c <_sbrk_r+0x1c>)
 8006614:	2300      	movs	r3, #0
 8006616:	4604      	mov	r4, r0
 8006618:	4608      	mov	r0, r1
 800661a:	602b      	str	r3, [r5, #0]
 800661c:	f7fb fb46 	bl	8001cac <_sbrk>
 8006620:	1c43      	adds	r3, r0, #1
 8006622:	d102      	bne.n	800662a <_sbrk_r+0x1a>
 8006624:	682b      	ldr	r3, [r5, #0]
 8006626:	b103      	cbz	r3, 800662a <_sbrk_r+0x1a>
 8006628:	6023      	str	r3, [r4, #0]
 800662a:	bd38      	pop	{r3, r4, r5, pc}
 800662c:	20000224 	.word	0x20000224

08006630 <__malloc_lock>:
 8006630:	4801      	ldr	r0, [pc, #4]	; (8006638 <__malloc_lock+0x8>)
 8006632:	f7ff becd 	b.w	80063d0 <__retarget_lock_acquire_recursive>
 8006636:	bf00      	nop
 8006638:	20000228 	.word	0x20000228

0800663c <__malloc_unlock>:
 800663c:	4801      	ldr	r0, [pc, #4]	; (8006644 <__malloc_unlock+0x8>)
 800663e:	f7ff bec8 	b.w	80063d2 <__retarget_lock_release_recursive>
 8006642:	bf00      	nop
 8006644:	20000228 	.word	0x20000228

08006648 <_malloc_usable_size_r>:
 8006648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800664c:	1f18      	subs	r0, r3, #4
 800664e:	2b00      	cmp	r3, #0
 8006650:	bfbc      	itt	lt
 8006652:	580b      	ldrlt	r3, [r1, r0]
 8006654:	18c0      	addlt	r0, r0, r3
 8006656:	4770      	bx	lr

08006658 <_init>:
 8006658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665a:	bf00      	nop
 800665c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800665e:	bc08      	pop	{r3}
 8006660:	469e      	mov	lr, r3
 8006662:	4770      	bx	lr

08006664 <_fini>:
 8006664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006666:	bf00      	nop
 8006668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800666a:	bc08      	pop	{r3}
 800666c:	469e      	mov	lr, r3
 800666e:	4770      	bx	lr
=======
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <__libc_init_array>:
 80040f4:	b570      	push	{r4, r5, r6, lr}
 80040f6:	4d0d      	ldr	r5, [pc, #52]	; (800412c <__libc_init_array+0x38>)
 80040f8:	4c0d      	ldr	r4, [pc, #52]	; (8004130 <__libc_init_array+0x3c>)
 80040fa:	1b64      	subs	r4, r4, r5
 80040fc:	10a4      	asrs	r4, r4, #2
 80040fe:	2600      	movs	r6, #0
 8004100:	42a6      	cmp	r6, r4
 8004102:	d109      	bne.n	8004118 <__libc_init_array+0x24>
 8004104:	4d0b      	ldr	r5, [pc, #44]	; (8004134 <__libc_init_array+0x40>)
 8004106:	4c0c      	ldr	r4, [pc, #48]	; (8004138 <__libc_init_array+0x44>)
 8004108:	f000 f820 	bl	800414c <_init>
 800410c:	1b64      	subs	r4, r4, r5
 800410e:	10a4      	asrs	r4, r4, #2
 8004110:	2600      	movs	r6, #0
 8004112:	42a6      	cmp	r6, r4
 8004114:	d105      	bne.n	8004122 <__libc_init_array+0x2e>
 8004116:	bd70      	pop	{r4, r5, r6, pc}
 8004118:	f855 3b04 	ldr.w	r3, [r5], #4
 800411c:	4798      	blx	r3
 800411e:	3601      	adds	r6, #1
 8004120:	e7ee      	b.n	8004100 <__libc_init_array+0xc>
 8004122:	f855 3b04 	ldr.w	r3, [r5], #4
 8004126:	4798      	blx	r3
 8004128:	3601      	adds	r6, #1
 800412a:	e7f2      	b.n	8004112 <__libc_init_array+0x1e>
 800412c:	08004184 	.word	0x08004184
 8004130:	08004184 	.word	0x08004184
 8004134:	08004184 	.word	0x08004184
 8004138:	08004188 	.word	0x08004188

0800413c <memset>:
 800413c:	4402      	add	r2, r0
 800413e:	4603      	mov	r3, r0
 8004140:	4293      	cmp	r3, r2
 8004142:	d100      	bne.n	8004146 <memset+0xa>
 8004144:	4770      	bx	lr
 8004146:	f803 1b01 	strb.w	r1, [r3], #1
 800414a:	e7f9      	b.n	8004140 <memset+0x4>

0800414c <_init>:
 800414c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800414e:	bf00      	nop
 8004150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004152:	bc08      	pop	{r3}
 8004154:	469e      	mov	lr, r3
 8004156:	4770      	bx	lr

08004158 <_fini>:
 8004158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800415a:	bf00      	nop
 800415c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800415e:	bc08      	pop	{r3}
 8004160:	469e      	mov	lr, r3
 8004162:	4770      	bx	lr
>>>>>>> parent of 2b78fa3 (line sensor)
